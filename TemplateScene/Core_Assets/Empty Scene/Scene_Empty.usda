#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (624.3807555110596, 647.7370336715289, 1796.9303241390885)
                double3 target = (-463.0881062900961, 30.267714471399586, -2572.789342736741)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:dynamicDiffuseGI:probeCounts" = (6, 6, 6)
            float3 "rtx:dynamicDiffuseGI:probeGridOrigin" = (-210, -250, -10)
            float3 "rtx:dynamicDiffuseGI:volumeSize" = (600, 440, 300)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            int "rtx:hydra:curves:splits" = 2
            double "rtx:hydra:points:defaultWidth" = 1
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (0, 1, 0)
            float3 "rtx:lightspeed:material:overrideAlbedo" = (0.5, 0.5, 0.5)
            float3 "rtx:lightspeed:material:overrideEmissiveColor" = (0.5, 0.5, 0.5)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            double "rtx:post:dof:focalLength" = 60
            double "rtx:post:dof:subjectDistance" = 700
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
            double "rtx:sceneDb:ambientLightIntensity" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 332
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    color3f primvars:sceneColor1 = (0.033, 0.033, 0.033)
    color3f primvars:sceneColor2 = (0.033, 0.033, 0.033)
    color3f primvars:sceneColor3 = (0.033, 0.033, 0.033)

    def Xform "EmptyScene"
    {
        double3 xformOp:rotateXYZ = (0.0000016807725842227228, 0, 1.5744836900921655e-7)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def "Background_Plane" (
            instanceable = false
            prepend references = @./Background_Plane.usd@
        )
        {
            over "Background_Plane"
            {
                float3 xformOp:rotateXYZ = (0, -0, 0)
                float3 xformOp:scale = (2, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

                over "Plane"
                {
                    rel material:binding = </World/Looks/Background_Plane> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    bool primvars:doNotCastShadows = 1
                    bool primvars:enableShadowTerminatorFix = 1
                    float3 xformOp:rotateXYZ = (0, 0, 0)
                    float3 xformOp:scale = (1, 1, 1)
                    double3 xformOp:translate = (-1.5598756085438822e-31, -2.5, 6.851498748249979e-8)
                    uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
                }
            }

            over "materials"
            {
            }
        }

        def Xform "Lights"
        {
            double3 xformOp:rotateXYZ = (1.0517465804521509e-14, 4.999996185302734, -1.15699279584075e-14)
            double3 xformOp:scale = (1.000000238418579, 1, 1.000000238418579)
            double3 xformOp:translate = (2.503e-7, 30, -0.00000267197)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            def DistantLight "MainLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float angle = 20
                color3f color = (1, 0.9695505, 0.91749173)
                float intensity = 2000
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (315, 38.9376419388561, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DistantLight "FillLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float angle = 30
                color3f color = (1, 0.9238904, 0.8945148)
                float intensity = 1200
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                double3 xformOp:rotateXYZ = (-46.01707458496094, -52.25022888183594, 17.957334518432617)
                double3 xformOp:scale = (1, 1.0000009536743164, 0.9999991655349731)
                double3 xformOp:translate = (1.18247e-13, 5.79092e-13, -1.22801e-13)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

            def DistantLight "BackLight" (
                prepend apiSchemas = ["ShapingAPI"]
            )
            {
                float angle = 5
                color3f color = (0.70627064, 0.9562976, 1)
                float intensity = 4000
                float shaping:cone:angle = 180
                float shaping:cone:softness
                float shaping:focus
                color3f shaping:focusTint
                asset shaping:ies:file
                token visibility = "inherited"
                double3 xformOp:rotateXYZ = (314.9999999999999, -127.37961990561209, 0)
                double3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (0, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }
        }
    }

    def Scope "transfer_data"
    {
    }

    def Scope "Looks"
    {
        def Material "Background_Plane"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Background_Plane/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Background_Plane/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Background_Plane/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.033, 0.033, 0.033) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant.connect = </World/Looks/Background_Plane/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.03333, 0.03333, 0.03333) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "sceneColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-883.02405, 23.723347)
            }
        }
    }
}

