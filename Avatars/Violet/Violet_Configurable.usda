#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (63.461392071695, 157.73381545823014, 196.65372933276913)
                double3 target = (-53.7526692961934, 79.35436531461964, -123.05168060092876)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            int "rtx:hydra:curves:splits" = 2
            double "rtx:hydra:points:defaultWidth" = 1
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 52
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            double "rtx:sceneDb:ambientLightIntensity" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    color3f primvars:GlassesColor = (0.18116204, 0.41434735, 0.18116204)
    color3f primvars:HairColor = (0.1483025, 0.06565618, 0.26840952)
    color3f primvars:HatColor = (0.07496594, 0.06951135, 0.049916405)
    color3f primvars:OutfitColor1 = (0.6120656, 0.5953599, 0.6120656)
    color3f primvars:OutfitColor2 = (0.025897505, 0.039427683, 0.056104835)
    color3f primvars:ShoeColor1 = (0.741003, 0.62327635, 0.87258685)
    color3f primvars:ShoeColor2 = (0.93050194, 0.8982095, 0.8442778)

    def Xform "LookAtTarget"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 200, 300)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks" (
        variants = {
            string skinVariant = "light"
            string eyeVariant = "green"
        }
        prepend variantSets = "skinVariant"
        append variantSets = "eyeVariant"
    )
    {
        variantSet "skinVariant" = {
            "dark"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Violet_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Violet_Albedo_Dark.png@ (
                            hidden = false
                        )
                    }
                }
            }
            "medium"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Violet_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Violet_Albedo_Medium.png@ (
                            hidden = false
                        )
                    }
                }
            }
            "light"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Violet_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Violet_Albedo_Light.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }

        variantSet "eyeVariant" = {
            "blue" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Blue.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "brown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Brown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "darkbrown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_DarkBrown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "gray" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Gray.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "green" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Green.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }

        def Material "Glasses"
        {
            token outputs:mdl:surface.connect = </World/Looks/Glasses/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Glasses/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Glasses"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0.02 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.2 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/Glasses/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "cornea"
        {
            token outputs:mdl:surface.connect = </World/Looks/cornea/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/cornea/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "cornea"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.5 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @../_general/Cornea_NORM.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/cornea/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "UVMap"
                    float2 outputs:result
                }
            }
        }

        def Material "Hoodie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Pants_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Pants_albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Pants_normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-892.5756, 147.44347)
            }
        }

        def Material "Pants_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Pants_Formal_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Pants_Formal_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "Shirt_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/Shirt_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shirt_normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-862.11914, 126.450386)
            }
        }

        def Material "Shoes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shoes/Shader.outputs:out>
            token visibility = "invisible"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Shoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shoes/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Shoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "ShoeLaces"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeLaces/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeLaces/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeLaces/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Shoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeLaces/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Shoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "EyeBrowLashes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.39999998 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/EyeBrowsLashes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/EyeBrowLashes/data_lookup_color.outputs:out>
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/EyeBrowsLashes_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:opacity_constant = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                asset inputs:opacity_texture = @../_general/EyeBrowsLashes_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.75 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-831.58685, 87.93512)
            }
        }

        def Material "Glasses_Frame"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Glasses_Frame/data_lookup_color.outputs:out>
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "ChefsHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ChefsHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8996139, 0.8996049, 0.8996049) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ChefsHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/ChefsHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-816.19147, 21.44432)
            }
        }

        def Material "DriversHat_Branded"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DriversHat_Branded/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-986.63086, 83.60689)
            }
        }

        def Material "DriversHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @../_general/DriversHat_Metal.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }
        }

        def Material "BaseballCap"
        {
            token outputs:mdl:displacement.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/BaseballCap/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/BaseballCap_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/BaseballCap/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/BaseballCap_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-930.96375, 160.52206)
            }
        }

        def Material "Branding"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Branding/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                int inputs:opacity_mode = 0 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Hoodie_Secondary"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie_Secondary/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Hair_Emission"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hair_Emission/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hair_Emission/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hair_Emission/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurfaceLite.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurfaceLite"
                float inputs:coat_roughness = 0.099999994 (
                    customData = {
                        float default = 0.1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Coat"
                    displayName = "Roughness"
                    hidden = false
                )
                color3f inputs:diffuse_reflection_color = (0.22492671, 0.15623741, 0.29042906) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Base"
                    displayName = "Color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_reflection_color.connect = </World/Looks/Hair_Emission/data_lookup_color.outputs:out>
                float inputs:diffuse_reflection_weight = 1 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:diffuse_reflection_weight_image = @./textures/HairStrands_variants_DIF_ALPHA.png@ (
                    colorSpace = "sRGB"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Base"
                    displayName = "Weight Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                int inputs:diffuse_reflection_weight_image_alpha_mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Base"
                    displayName = "Weight Image Alpha Mode"
                    hidden = false
                    renderType = "alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                color3f inputs:emission_color = (0.22492671, 0.15623741, 0.29042906) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Emission"
                    displayName = "Color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:emission_color.connect = </World/Looks/Hair_Emission/data_lookup_color.outputs:out>
                asset inputs:emission_color_image = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Color Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emission_intensity = 660 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1000
                            float min = 0
                        }
                    }
                    displayGroup = "Emission"
                    displayName = "Intensity"
                    hidden = false
                )
                bool inputs:emission_use_temperature = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Emission"
                    displayName = "Use Temperature"
                    hidden = false
                )
                float inputs:emission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Emission"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Enable Opacity"
                    doc = """Enables the use of cutout opacity"""
                    hidden = false
                )
                asset inputs:geometry_normal_image = @./textures/HairStrands_variants_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Map Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                bool inputs:geometry_normal_image_flip_g_channel = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Normal Map Flip G Channel"
                    hidden = false
                )
                float inputs:geometry_normal_strength = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Strength"
                    hidden = false
                )
                asset inputs:geometry_opacity_image = @./textures/HairStrands_variants_DIF_ALPHA.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                int inputs:geometry_opacity_image_alpha_mode = 0 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image Alpha Mode"
                    hidden = false
                    renderType = "alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                float inputs:geometry_opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Threshold"
                    doc = """If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"""
                    hidden = false
                )
                float inputs:metalness = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Metalness"
                    hidden = false
                )
                float inputs:specular_reflection_anisotropy = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Anisotropy"
                    hidden = false
                )
                float inputs:specular_reflection_ior = 1 (
                    customData = {
                        float default = 1.5
                        dictionary omni = {
                            dictionary kit = {
                                dictionary property = {
                                    dictionary usd = {
                                        float2 soft_range_ui = (1, 5)
                                    }
                                }
                            }
                        }
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "IOR"
                    hidden = false
                )
                float inputs:specular_reflection_roughness = 0.5 (
                    customData = {
                        float default = 0.2
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1066.4774, 665.2287)
            }
        }

        def Material "Hair"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hair/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hair/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hair/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurface.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurface"
                color3f inputs:diffuse_reflection_color = (0.22492671, 0.15623741, 0.29042906) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Base"
                    displayName = "Color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_reflection_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                float inputs:diffuse_reflection_weight = 1 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:enable_diffuse_transmission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Subsurface"
                    displayName = "Enable Subsurface"
                    doc = "Enables the use of subsurface"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_specular_transmission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Transmission"
                    displayName = "Enable Transmission"
                    doc = "Enables the use of transmission"
                    hidden = false
                )
                asset inputs:geometry_normal_image = @./textures/HairStrands_variants_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Map Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:geometry_normal_strength = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Strength"
                    hidden = false
                )
                float inputs:geometry_opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity"
                    hidden = false
                )
                asset inputs:geometry_opacity_image = @./textures/HairStrands_variants_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                int inputs:geometry_opacity_image_alpha_mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image Alpha Mode"
                    hidden = false
                    renderType = "alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                float inputs:geometry_opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Threshold"
                    doc = "If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:specular_reflection_ior = 1.55 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "IOR"
                    hidden = false
                )
                float inputs:specular_reflection_roughness = 0.5 (
                    customData = {
                        float default = 0.2
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness"
                    hidden = false
                )
                float inputs:specular_reflection_weight = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:specular_transmission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Transmission"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:subsurface_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 10
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Scale"
                    hidden = false
                )
                color3f inputs:subsurface_scattering_color = (1, 0.9837925, 0.9471947) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Radius (mfp)"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:subsurface_transmission_color = (0.15020949, 0.098955445, 0.2607261) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:subsurface_transmission_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                asset inputs:subsurface_transmission_color_image = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:subsurface_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Thin Walled"
                    doc = "Thin surface with no interior."
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-512.9804, 21.023666)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-932.73883, 559.7159)
            }
        }

        def Material "Shirt_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Formal_Shirt_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }

        def Material "Jacket_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Jacket_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Jacket_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Jacket_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Formal_Jacket_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Jacket_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Formal_Jacket_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Formal_Jacket_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }

        def Material "ShoeSole"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeSole/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeSole/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeSole/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Shoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeSole/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Shoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "EarRing"
        {
            token outputs:mdl:surface.connect = </World/Looks/EarRing/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/EarRing/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "earRing"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (1, 0.5991018, 0.27385408) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.2 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/EarRing/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/EarRing/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/EarRing/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/EarRing/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/EarRing/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/EarRing/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/EarRing/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        

        def Material "LabCoat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @../_general/Polyester_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Shirt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Shirt/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/LabCoat_Shirt_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-847.7966, 117.52515)
            }
        }

        def Material "LabCoat_Buttons"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Buttons/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_Buttons_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/LabCoat_Buttons_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Pen1"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Pen1/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "LabCoat_Pen2"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.14999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Tie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Tie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Tie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Tie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Tie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }
    
        def Material "HardHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HardHat/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.9 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/HardHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HardHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/HardHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/HardHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-801.3356, 183.71509)
            }
        }

        def Material "WesternHatMain"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatMain/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatMain/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }

        def Material "WesternHatBand"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatBand/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatBand/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }
    }

    def RectLight "RectLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float height = 100
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        float width = 100
        double3 xformOp:rotateXYZ = (0, -58.44024698680735, -40.09814257589656)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-76.33368903619271, 225.36474984910225, -2.359555120774175)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def RectLight "RectLight_01" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float height = 100
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        float width = 100
        double3 xformOp:rotateXYZ = (-51.57396317594845, 37.44499471708423, -25.12594113990295)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (68.56262565191813, 187.50074054759443, 119.35317374410711)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def "character" (
        instanceable = false
        prepend payload = @./Violet.usd@
    )
    {

        over "character"
        {
            over "glasses_variants" (
                variants = {
                    string glassesVariant = "glasses1"
                }
                prepend variantSets = "glassesVariant"
            )
            {
                variantSet "glassesVariant" = {
                    "glasses1" {
                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2Frames"
                            {
                                over "GEO_Glasses2Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "GEO_GlassesFrames"
                            {
                                over "GEO_GlassesFrames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                    }
                    "glasses2" {
                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2Frames"
                            {
                                over "GEO_Glasses2Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "visible"

                            over "GEO_GlassesFrames"
                            {
                                over "GEO_GlassesFrames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                    }
                    "glasses3" {
                        over "glasses2"
                        {
                            token visibility = "visible"

                            over "GEO_Glasses2Frames"
                            {
                                over "GEO_Glasses2Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "GEO_GlassesFrames"
                            {
                                over "GEO_GlassesFrames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                    }
                }
            }

            over "Jaw_Group"
            {
                over "GEO_Tongue"
                {
                    over "GEO_Tongue"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "GEO_TeethLower"
                {
                    over "GEO_TeethLower"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "GEO_TeethUpper"
            {
                over "GEO_TeethUpper"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_Shoes"
            {
                over "GEO_Shoes"
                {
                    rel material:binding = </World/Looks/Shoes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )

                    over "Shoes"
                    {
                        rel material:binding = </World/Looks/Shoes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "ShoeSoles"
                    {
                        rel material:binding = </World/Looks/ShoeSole> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "ShoeLaces"
                    {
                        rel material:binding = </World/Looks/ShoeLaces> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "outfit_variants" (
                variants = {
                    string outfitVariant = "outfit1"
                }
                prepend variantSets = "outfitVariant"
            )
            {
                variantSet "outfitVariant" = {
                    "outfit1" {
                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Formal_Shirt_Decal"
                                {
                                    over "GEO_Formal_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Formal_Pants"
                            {
                                over "GEO_Formal_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Jacket"
                            {
                                over "GEO_Formal_Jacket"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "visible"

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Decal"
                                {
                                    over "GEO_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }          
                    }
                    "outfit2" {
                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Formal_Shirt_Decal"
                                {
                                    over "GEO_Formal_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Formal_Pants"
                            {
                                over "GEO_Formal_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Jacket"
                            {
                                over "GEO_Formal_Jacket"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Decal"
                                {
                                    over "GEO_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            
                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit3" {
                        over "outfit_Hoodie"
                        {
                            token visibility = "visible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Formal_Shirt_Decal"
                                {
                                    over "GEO_Formal_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Formal_Pants"
                            {
                                over "GEO_Formal_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Jacket"
                            {
                                over "GEO_Formal_Jacket"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Decal"
                                {
                                    over "GEO_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            
                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit4" {                        
                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_Formal_Shirt"
                            {
                            token visibility = "invisible"
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Formal_Shirt_Decal"
                                {
                                    over "GEO_Formal_Shirt_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Formal_Pants"
                            {
                                over "GEO_Formal_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Jacket"
                            {
                            token visibility = "invisible"
                                over "GEO_Formal_Jacket"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "visible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                }
            }

            over "GEO_Head"
            {
                over "GEO_Head"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "headgear_variants" (
                variants = {
                    string headgearVariant = "headgear1"
                }
                prepend variantSets = "headgearVariant"
            )
            {
                variantSet "headgearVariant" = {
                    "headgear1" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underDriversHat"
                            {
                                over "GEO_Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underChefsHat"
                            {
                                over "GEO_Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underBaseballcap"
                            {
                                over "GEO_Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "visible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_Hair_underWesternHat"
                            {
                                over "GEO_Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear2" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underDriversHat"
                            {
                                over "GEO_Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underChefsHat"
                            {
                                over "GEO_Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "visible"

                            over "GEO_Hair_underBaseballcap"
                            {
                                over "GEO_Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_Hair_underWesternHat"
                            {
                                over "GEO_Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear3" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "visible"

                            over "GEO_Hair_underDriversHat"
                            {
                                over "GEO_Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underChefsHat"
                            {
                                over "GEO_Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underBaseballcap"
                            {
                                over "GEO_Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_Hair_underWesternHat"
                            {
                                over "GEO_Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear4" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underDriversHat"
                            {
                                over "GEO_Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "visible"

                            over "GEO_Hair_underChefsHat"
                            {
                                over "GEO_Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underBaseballcap"
                            {
                                over "GEO_Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_Hair_underWesternHat"
                            {
                                over "GEO_Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear5" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underDriversHat"
                            {
                                over "GEO_Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underChefsHat"
                            {
                                over "GEO_Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underBaseballcap"
                            {
                                over "GEO_Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "visible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_underHardHat"
                            {
                                over "GEO_Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_Hair_underWesternHat"
                            {
                                over "GEO_Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear6" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underDriversHat"
                            {
                                over "GEO_Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underChefsHat"
                            {
                                over "GEO_Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_underBaseballcap"
                            {
                                over "GEO_Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_underHardHat"
                            {
                                over "GEO_Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "visible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_Hair_underWesternHat"
                            {
                                over "GEO_Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                }
            }

            over "GEO_EyebrowsAndEyeLashes"
            {
                over "GEO_EyebrowsAndEyeLashes"
                {
                    rel material:binding = </World/Looks/EyeBrowLashes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Eye_Pivot_r"
            {
                over "GEO_Eye_r"
                {
                    over "GEO_Eye_r"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                    over "GEO_Cornea_r"
                    {
                        over "GEO_Cornea_r"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "GEO_Body"
            {
                over "GEO_Body"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_EarRing"
            {
                over "GEO_EarRing"
                {
                    rel material:binding = </World/Looks/EarRing> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Eye_Pivot_l"
            {
                over "GEO_Eye_l"
                {
                    over "GEO_Eye_l"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                    over "GEO_Cornea_l"
                    {
                        over "GEO_Cornea_l"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "violet_skeleton" (
                prepend apiSchemas = ["ControlRigAPI"]
            )
            {
                uniform token controlRig:forwardAxis = "MINUS Y"
                uniform token[] controlRig:retargetTags = ["", "", "", "Chest", "", "Left_Shoulder", "Left_Elbow", "Left_Hand", "", "", "", "Left_Index", "", "", "Left_Thumb", "", "", "", "Left_Middle", "", "", "", "Left_Ring", "", "", "", "Left_Pinky", "", "", "", "", "", "", "Head", "Left_Eye", "", "", "", "", "", "", "", "", "", "", "", "", "Right_Eye", "", "", "", "", "", "", "", "", "", "Right_Shoulder", "Right_Elbow", "Right_Hand", "", "", "", "Right_Index", "", "", "Right_Thumb", "", "", "", "Right_Middle", "", "", "", "Right_Ring", "", "", "", "Right_Pinky", "", "", "", "", "", "Left_Thigh", "", "", "Left_Knee", "Left_Foot", "Left_Toe", "", "Right_Thigh", "", "", "Right_Knee", "Right_Foot", "Right_Toe", ""]
                uniform matrix4d[] controlRig:retargetTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, -4.3711516184430366e-8, 3.552713678800501e-15, 0), (1.0840395248123968e-10, 0.0024800896644592285, 0.9999969005584717, 0), (-4.371138118131057e-8, -0.9999969005584717, 0.0024800896644592285, 0), (0, -0.9338769912719727, 79.09075164794922, 1) ), ( (1, -2.059477893187576e-16, 7.112025744260113e-15, 0), (1.882492476441158e-16, 0.9999969005584717, 0.0024884487502276897, 0), (-7.11251702336952e-15, -0.0024884487502276897, 0.9999969005584717, 0), (0, 15.174720764160156, 0, 1) ), ( (1, 6.282230846643699e-10, -2.38417655396006e-7, 0), (-2.7755575615628914e-16, 0.999996542930603, 0.002634958364069462, 0), (2.384184796255795e-7, -0.002634958364069462, 0.999996542930603, 0), (0, 15.174674987792969, 5.960464477539063e-8, 1) ), ( (0, -0.999996542930603, 0.0026436105836182833, 0), (1, 0, 1.94646418094635e-7, 0), (-1.94646418094635e-7, 0.0026436105836182833, 0.9999964833259583, 0), (1, 14.187919616699219, 1.1920928955078125e-7, 1) ), ( (0.9848077297210693, -6.908589811338572e-10, 0.1736481785774231, 0), (7.015165670587464e-10, 1, 6.938893903907228e-18, 0), (-0.1736481785774231, 1.2181705644209728e-10, 0.9848077297210693, 0), (-0.00000858306884765625, 7.205171585083008, 7.152557373046875e-7, 1) ), ( (0.9816204309463501, 0.17308616638183594, 0.08038977533578873, 0), (-0.1736481785774231, 0.9848077297210693, 3.306195139884949e-8, 0), (-0.07916846126317978, -0.013959569856524467, 0.9967635273933411, 0), (-9.5367431640625e-7, 23.061378479003906, 0.000003814697265625, 1) ), ( (0.9987121224403381, -0.018380673602223396, -0.04728848114609718, 0), (0.01815044693648815, 0.9998212456703186, -0.005293399095535278, 0), (0.0473773218691349, 0.004428274929523468, 0.9988672733306885, 0), (0.000030517578125, 21.66803741455078, -0.0000019073486328125, 1) ), ( (0.17925739288330078, 0.26969265937805176, -0.9461145401000977, 0), (-0.15209609270095825, 0.9577265977859497, 0.24418553709983826, 0), (0.9719741344451904, 0.10012823343276978, 0.21269875764846802, 0), (-0.28539276123046875, 2.42486572265625, 1.7731900215148926, 1) ), ( (0.955903947353363, -0.2841019332408905, -0.07438930124044418, 0), (0.28517183661460876, 0.9584682583808899, 0.003954684361815453, 0), (0.07017625123262405, -0.024994034320116043, 0.9972214102745056, 0), (0, 5.2735748291015625, 0, 1) ), ( (0.9640953540802002, -3.19339761745141e-7, -0.2655563950538635, 0), (-0.0000010266077197229606, 1, -0.000004929602710035397, 0), (0.2655563950538635, 0.000005025228801969206, 0.9640953540802002, 0), (0, 2.3343939781188965, 0, 1) ), ( (0.9781477451324463, 0.000002126517529177363, -0.20791099965572357, 0), (-0.0000010272344752593199, 1, 0.000005395243078964995, 0), (0.20791099965572357, -0.000005063771368440939, 0.9781477451324463, 0), (0, 2.606630325317383, -0.00000762939453125, 1) ), ( (-0.6180812120437622, 0.7618383169174194, -0.19385027885437012, 0), (0.6042156219482422, 0.6181430816650391, 0.5028146505355835, 0), (0.5028907060623169, 0.19365297257900238, -0.8423771858215332, 0), (0.9486312866210938, 3.1903419494628906, 2.35546875, 1) ), ( (0.991603672504425, -0.11105387657880783, -0.06625109165906906, 0), (0.11546164005994797, 0.991057276725769, 0.06688854843378067, 0), (0.05823039636015892, -0.07397639006376266, 0.995558500289917, 0), (0, 2.3024215698242188, 0, 1) ), ( (0.9800856709480286, -0.08127667009830475, -0.1811799257993698, 0), (0.09746444225311279, 0.9918304681777954, 0.08229844272136688, 0), (0.17301081120967865, -0.09831812977790833, 0.9800004363059998, 0), (0.000003814697265625, 2.8394622802734375, 0, 1) ), ( (0.20387285947799683, 0.1745803952217102, -0.9633055329322815, 0), (-0.11455873399972916, 0.9814658164978027, 0.15362650156021118, 0), (0.9722716212272644, 0.07903477549552917, 0.2200939655303955, 0), (-0.18236541748046875, 2.8299789428710938, 0.7381958961486816, 1) ), ( (0.9826841950416565, -0.14699307084083557, -0.11280447244644165, 0), (0.14714515209197998, 0.9890899658203125, -0.007022410165518522, 0), (0.11260601878166199, -0.009697820991277695, 0.993592381477356, 0), (0, 5.3505940437316895, 0, 1) ), ( (0.9985365271568298, 7.696039361348994e-9, -0.05408092960715294, 0), (-1.0916787474002376e-8, 1, -5.9258823625896184e-8, 0), (0.05408092960715294, 5.976249184413973e-8, 0.9985365271568298, 0), (0, 2.783435821533203, -0.00000762939453125, 1) ), ( (0.9999274611473083, 7.343011816374201e-7, 0.012042208574712276, 0), (-7.183299999269366e-7, 1, -0.000001330596091975167, 0), (-0.012042208574712276, 0.0000013218492540545412, 0.9999274611473083, 0), (0, 3.2918615341186523, 0, 1) ), ( (0.23962873220443726, 0.06421525031328201, -0.9687386155128479, 0), (-0.06543970853090286, 0.9966092705726624, 0.04987545311450958, 0), (0.9686567187309265, 0.05144238471984863, 0.24301844835281372, 0), (0.01944732666015625, 2.955821990966797, -0.5122437477111816, 1) ), ( (0.9988894462585449, 0.04302206262946129, 0.019209008663892746, 0), (-0.042813967913389206, 0.9990212321281433, -0.01111611444503069, 0), (-0.019668444991111755, 0.010281355120241642, 0.9997537136077881, 0), (0, 5.339698791503906, 0, 1) ), ( (0.9997531771659851, 4.0178537119572866e-7, -0.022216176614165306, 0), (-4.1800848293860327e-7, 1, -7.255958962559816e-7, 0), (0.022216176614165306, 7.347033488258603e-7, 0.9997531771659851, 0), (0, 2.4166927337646484, 0.00000762939453125, 1) ), ( (0.9987195730209351, 0.0000014061851061342168, 0.05058925971388817, 0), (-0.000001112760514843103, 1, -0.000005828299890708877, 0), (-0.05058925971388817, 0.000005764543402619893, 0.9987195730209351, 0), (-0.0000019073486328125, 2.922548294067383, 0.00000762939453125, 1) ), ( (0.3970832824707031, -0.03850361332297325, -0.9169745445251465, 0), (-0.012018230743706226, 0.9988157749176025, -0.04714444279670715, 0), (0.9177038669586182, 0.02974068373441696, 0.3961503505706787, 0), (0.2900390625, 2.8742294311523438, -1.6937646865844727, 1) ), ( (0.9685414433479309, 0.23329375684261322, -0.08661124110221863, 0), (-0.23309437930583954, 0.9723731279373169, 0.012550651095807552, 0), (0.08714643120765686, 0.008032768033444881, 0.9961631298065186, 0), (0, 5.298967361450195, 0, 1) ), ( (0.9953964948654175, 0.000002783815943985246, 0.09584259241819382, 0), (-0.000002370115453231847, 1, -0.0000044302964852249715, 0), (-0.09584259241819382, 0.0000041827438508335035, 0.9953964948654175, 0), (-0.000003814697265625, 1.7583212852478027, -0.00000762939453125, 1) ), ( (0.9961950182914734, -3.52302890860301e-7, 0.08715175837278366, 0), (2.846306870196713e-7, 1, 7.889134963079414e-7, 0), (-0.08715175837278366, -7.611056958012341e-7, 0.9961950182914734, 0), (0, 2.611924171447754, -0.00000762939453125, 1) ), ( (1, -8.196205953936442e-7, 4.507912763074273e-7, 0), (8.196205953936442e-7, 1, 5.0295078324325004e-8, 0), (-4.507913331508462e-7, -5.029470884210241e-8, 1, 0), (0.00000762939453125, 7.222675323486328, 0, 1) ), ( (1, -1.4889238286741602e-7, 2.15893891208907e-7, 0), (1.4889238286741602e-7, 1, -2.233383966654401e-8, 0), (-2.15893891208907e-7, 2.2333871640967118e-8, 1, 0), (0.00000762939453125, 14.445344924926758, 0, 1) ), ( (1, -8.196043950192688e-7, 0.00000163530864938366, 0), (8.196042813324311e-7, 1, 9.77362049070507e-8, 0), (-0.00000163530864938366, -9.773486908670748e-8, 1, 0), (0.00000762939453125, 7.687122344970703, 0, 1) ), ( (1, 0.0000011026176025552559, 0.0000016094005559352809, 0), (-0.0000011026178299289313, 1, 1.3293721679019654e-7, 0), (-0.0000016094003285616054, -1.3293897893618123e-7, 1, 0), (0.0000152587890625, 15.374259948730469, 7.748603820800781e-7, 1) ), ( (0.9961920976638794, -0.06103532761335373, 0.06225712597370148, 0), (0.061039455235004425, -0.021617650985717773, -0.9979012608528137, 0), (0.06225307285785675, 0.9979014992713928, -0.017809748649597168, 0), (0, 23.061382293701172, 0.0000018477439880371094, 1) ), ( (1, -6.3878831113584056e-9, 2.3748211219754012e-7, 0), (-2.813469990314843e-8, 0.9894192814826965, 0.14508457481861115, 0), (-2.3589615238961414e-7, -0.14508457481861115, 0.9894192814826965, 0), (7.105427357601002e-15, 14.187919616699219, 0, 1) ), ( (1, -1.7763568394002505e-14, -4.323239011227997e-8, 0), (-6.385386885909838e-9, 0.9890322685241699, -0.14769954979419708, 0), (4.275823073385254e-8, 0.14769954979419708, 0.9890322685241699, 0), (-5.684341886080802e-14, 11.467216491699219, -0.0000019073486328125, 1) ), ( (-0.9983294010162354, 0.023118438199162483, -0.05295321345329285, 0), (-0.05280522257089615, 0.0069661736488342285, 0.9985805153846741, 0), (0.02345450222492218, 0.9997084736824036, -0.0057337284088134766, 0), (4.698025703430176, 13.982772827148438, 7.266124725341797, 1) ), ( (0.9291179180145264, 0.06561926007270813, -0.36391481757164, 0), (0.3342062532901764, 0.27217406034469604, 0.9023455381393433, 0), (0.15825942158699036, -0.9600080251693726, 0.2309514284133911, 0), (4.698027610778809, 13.982772827148438, 7.266124725341797, 1) ), ( (-0.9298340082168579, -0.06868825852870941, 0.3615120053291321, 0), (0.35262030363082886, -0.4471933841705322, 0.8219959139823914, 0), (0.1052042543888092, 0.8917960524559021, 0.44003623723983765, 0), (4.698026180267334, 13.982772827148438, 7.266122817993164, 1) ), ( (-0.6498844623565674, -0.19028699398040771, 0.735826849937439, 0), (0.7564516663551331, -0.25581908226013184, 0.6019447445869446, 0), (0.07369628548622131, 0.9478119015693665, 0.3101956844329834, 0), (4.698025226593018, 13.9827880859375, 7.266124725341797, 1) ), ( (-0.9711289405822754, 0.06066112965345383, -0.23071348667144775, 0), (-0.23779642581939697, -0.3232235908508301, 0.9159581065177917, 0), (-0.019009016454219818, 0.9443762898445129, 0.328316867351532, 0), (4.698026180267334, 13.9827880859375, 7.266124725341797, 1) ), ( (0.659923791885376, 0.18017852306365967, -0.7294081449508667, 0), (0.7299345135688782, 0.07629275321960449, 0.6792458891868591, 0), (0.17803406715393066, -0.9806707501411438, -0.08117115497589111, 0), (4.698025226593018, 13.982772827148438, 7.266122817993164, 1) ), ( (0.9642296433448792, 0.018534734845161438, 0.2644195556640625, 0), (-0.264950692653656, 0.037668585777282715, 0.9635259509086609, 0), (0.007898390293121338, -0.9991183876991272, 0.04123193025588989, 0), (4.698025703430176, 13.982772827148438, 7.266122817993164, 1) ), ( (1, 4.7802753305758484e-15, -2.7562333519042317e-14, 0), (2.797039333544797e-14, -0.15549719333648682, 0.9878363609313965, 0), (4.3626686058216915e-16, -0.9878363609313965, -0.15549719333648682, 0), (1.1345608561799322e-13, 5.66400146484375, 4.386661529541016, 1) ), ( (1, -2.9314920919876718e-15, -2.8143201609215004e-14, 0), (2.8291503525752076e-14, 0.1202324628829956, 0.9927457571029663, 0), (4.735015819105209e-16, -0.9927457571029663, 0.1202324628829956, 0), (8.440694839037186e-14, 5.819427490234375, 3.3608686923980713, 1) ), ( (1, 6.285273457251606e-7, -0.0000027912806217500474, 0), (2.842170943040401e-14, 0.9755731225013733, 0.2196749448776245, 0), (0.0000028611698326130863, -0.2196749448776245, 0.9755731225013733, 0), (0, 2.5734939575195312, 0, 1) ), ( (1, -1.4371968859450135e-7, 0.0000038039297578507103, 0), (-4.311911823151604e-7, 0.9885788559913635, 0.1507045328617096, 0), (-0.0000037821437217644416, -0.1507045328617096, 0.9885788559913635, 0), (2.9103830456733704e-11, 2.58573579788208, 0, 1) ), ( (0.8374863862991333, -0.5140866041183472, 0.18528790771961212, 0), (0.1852879822254181, 0.5861294865608215, 0.788746178150177, 0), (-0.5140865445137024, -0.6262325644493103, 0.5861295461654663, 0), (2.7197508811950684, 13.234329223632812, 3.441814661026001, 1) ), ( (0.7858548164367676, -0.5237938761711121, -0.3287433385848999, 0), (0.5815051198005676, 0.4450007677078247, 0.681047797203064, 0), (-0.21043761074543, -0.7263705730438232, 0.6542948484420776, 0), (5.086831092834473, 12.800506591796875, 2.2849905490875244, 1) ), ( (-0.9983294010162354, -0.023118438199162483, 0.05295321345329285, 0), (0.05280522257089615, 0.0069661736488342285, 0.9985805153846741, 0), (-0.02345450222492218, 0.9997084736824036, -0.0057337284088134766, 0), (-4.698025703430176, 13.982772827148438, 7.266124725341797, 1) ), ( (0.923769474029541, -0.061433687806129456, 0.3779892325401306, 0), (-0.34905439615249634, 0.27091675996780396, 0.8970869779586792, 0), (-0.15751498937606812, -0.9606404304504395, 0.22882097959518433, 0), (-4.698026180267334, 13.982772827148438, 7.266122817993164, 1) ), ( (-0.9242181777954102, 0.07573898136615753, -0.37427806854248047, 0), (-0.36686044931411743, -0.44815146923065186, 0.8152137398719788, 0), (-0.10598985850811005, 0.8907433152198792, 0.44197559356689453, 0), (-4.698026180267334, 13.982772827148438, 7.266122817993164, 1) ), ( (-0.6427748203277588, 0.19271737337112427, -0.7414178848266602, 0), (-0.7624010443687439, -0.2553516626358032, 0.5945923328399658, 0), (-0.07473400235176086, 0.9474468231201172, 0.3110615611076355, 0), (-4.698025226593018, 13.9827880859375, 7.266124725341797, 1) ), ( (-0.973315954208374, -0.05758620798587799, 0.22212591767311096, 0), (0.22865010797977448, -0.3250999450683594, 0.9176214337348938, 0), (0.01937078684568405, 0.9439247250556946, 0.3295920491218567, 0), (-4.698026180267334, 13.9827880859375, 7.266124725341797, 1) ), ( (0.6530508995056152, -0.17949852347373962, 0.735734224319458, 0), (-0.7363326549530029, 0.07659882307052612, 0.6722699999809265, 0), (-0.1770278811454773, -0.9807716012001038, -0.08214771747589111, 0), (-4.698025226593018, 13.982772827148438, 7.266122817993164, 1) ), ( (0.9666721820831299, -0.01822352409362793, -0.2553679347038269, 0), (0.25588276982307434, 0.03643721342086792, 0.9660208225250244, 0), (-0.008299417793750763, -0.9991697072982788, 0.03988593816757202, 0), (-4.698025703430176, 13.982772827148438, 7.266122817993164, 1) ), ( (0.8374863862991333, 0.5140866041183472, -0.18528790771961212, 0), (-0.1852879822254181, 0.5861294865608215, 0.788746178150177, 0), (0.5140865445137024, -0.6262325644493103, 0.5861295461654663, 0), (-2.7197508811950684, 13.234329223632812, 3.441814661026001, 1) ), ( (0.7858548164367676, 0.5237938761711121, 0.3287433385848999, 0), (-0.5815051198005676, 0.4450007677078247, 0.681047797203064, 0), (0.21043761074543, -0.7263705730438232, 0.6542948484420776, 0), (-5.086831092834473, 12.800506591796875, 2.2849905490875244, 1) ), ( (0, 0.999996542930603, -0.0026436105836182833, 0), (-1, 0, -1.94646418094635e-7, 0), (-1.94646418094635e-7, 0.0026436105836182833, 0.9999964833259583, 0), (-1, 14.187919616699219, -2.384185791015625e-7, 1) ), ( (0.9848077297210693, 0, 0.1736481785774231, 0), (-4.169858157225016e-14, 1, 2.3648438892895363e-13, 0), (-0.1736481785774231, -2.401325666090415e-13, 0.9848077297210693, 0), (0.000008106231689453125, 7.205172061920166, 4.76837158203125e-7, 1) ), ( (0.9816171526908875, -0.17308558523654938, -0.0804312452673912, 0), (0.17365945875644684, 0.9848057627677917, 0.00014199456200003624, 0), (0.07918456941843033, -0.014107029885053635, 0.9967601299285889, 0), (0.0000057220458984375, 23.06139373779297, 9.5367431640625e-7, 1) ), ( (0.9987121224403381, 0.018381323665380478, 0.047288618981838226, 0), (-0.018151171505451202, 0.9998212456703186, -0.005291850306093693, 0), (-0.047377437353134155, 0.004426691681146622, 0.9988672733306885, 0), (-0.00002288818359375, 21.66802978515625, -0.00000476837158203125, 1) ), ( (0.17925727367401123, -0.26969245076179504, 0.9461145997047424, 0), (0.15209604799747467, 0.9577266573905945, 0.24418532848358154, 0), (-0.9719740748405457, 0.10012828558683395, 0.21269863843917847, 0), (0.285400390625, 2.4248733520507812, 1.7731890678405762, 1) ), ( (0.9559042453765869, 0.2841011881828308, 0.07438772916793823, 0), (-0.2851710915565491, 0.9584684371948242, 0.003955717198550701, 0), (-0.07017447054386139, -0.024994518607854843, 0.9972215294837952, 0), (0, 5.273576736450195, 0, 1) ), ( (0.9640949368476868, 0.0000010271379551340942, 0.2655577063560486, 0), (5.442274186862051e-7, 1, -0.000005843644430569839, 0), (-0.2655577063560486, 0.00000577835180592956, 0.9640949368476868, 0), (0, 2.3343868255615234, 0, 1) ), ( (0.9781472682952881, -3.887595880769368e-7, 0.20791321992874146, 0), (-4.884093982582272e-7, 1, 0.000004167584393144352, 0), (-0.20791321992874146, -0.000004178058134129969, 0.9781472682952881, 0), (0, 2.606632709503174, -0.00000762939453125, 1) ), ( (-0.6180812120437622, -0.7618382573127747, 0.19385039806365967, 0), (-0.6042155623435974, 0.6181432008743286, 0.5028147101402283, 0), (-0.5028907656669617, 0.19365294277668, -0.8423771858215332, 0), (-0.948638916015625, 3.1903343200683594, 2.3554697036743164, 1) ), ( (0.9916033744812012, 0.11105526983737946, 0.06625284254550934, 0), (-0.11546316742897034, 0.9910570979118347, 0.06688841432332993, 0), (-0.05823203921318054, -0.0739765390753746, 0.9955583810806274, 0), (0, 2.3024215698242188, 0, 1) ), ( (0.980086624622345, 0.0812738761305809, 0.1811761111021042, 0), (-0.09746118634939194, 0.9918307662010193, 0.08229823410511017, 0), (-0.17300735414028168, -0.09831704199314117, 0.9800011515617371, 0), (0, 2.8394622802734375, -0.000003814697265625, 1) ), ( (0.2038731575012207, -0.17458024621009827, 0.9633054733276367, 0), (0.11455866694450378, 0.9814658761024475, 0.15362635254859924, 0), (-0.9722715616226196, 0.0790347009897232, 0.22009426355361938, 0), (0.1823577880859375, 2.8299789428710938, 0.7381963729858398, 1) ), ( (0.9826841950416565, 0.1469927877187729, 0.11280468106269836, 0), (-0.1471448689699173, 0.9890900254249573, -0.007022332400083542, 0), (-0.11260621249675751, -0.009697895497083664, 0.993592381477356, 0), (-0.0000019073486328125, 5.350593566894531, 0, 1) ), ( (0.9985365271568298, 1.709870645072442e-7, 0.05408092960715294, 0), (-1.6696044724540116e-7, 1, -7.897341447460349e-8, 0), (-0.05408092960715294, 6.982845945913141e-8, 0.9985365271568298, 0), (0, 2.7834348678588867, 0, 1) ), ( (0.9999274611473083, -2.3495088896652305e-7, -0.012042181566357613, 0), (2.1933858818101726e-7, 1, -0.0000012977887990928139, 0), (0.012042181566357613, 0.0000012950534937772318, 0.9999274611473083, 0), (-9.5367431640625e-7, 3.2918617725372314, -0.00000762939453125, 1) ), ( (0.23962873220443726, -0.06421515345573425, 0.9687386155128479, 0), (0.06543973088264465, 0.9966092705726624, 0.049875348806381226, 0), (-0.9686567187309265, 0.05144242197275162, 0.24301844835281372, 0), (-0.01944732666015625, 2.9558181762695312, -0.5122427940368652, 1) ), ( (0.9988894462585449, -0.04302196949720383, -0.019208984449505806, 0), (0.042813897132873535, 0.9990212321281433, -0.011115249246358871, 0), (0.01966838352382183, 0.010280493646860123, 0.9997537136077881, 0), (0.0000019073486328125, 5.339700698852539, 0, 1) ), ( (0.9997531771659851, -7.135112696232682e-7, 0.022217387333512306, 0), (7.770831302877923e-7, 1, -0.0000028527208542072913, 0), (-0.022217387333512306, 0.0000028692813884845236, 0.9997531771659851, 0), (0, 2.416687488555908, -0.00000762939453125, 1) ), ( (0.9987193942070007, -5.629137262985751e-7, -0.05059243366122246, 0), (4.4896245299241855e-7, 1, -0.0000022637025267613353, 0), (0.05059243366122246, 0.000002238089336970006, 0.9987193942070007, 0), (0.0000019073486328125, 2.9225594997406006, 0, 1) ), ( (0.397083044052124, 0.038503773510456085, 0.916974663734436, 0), (0.012018180452287197, 0.9988157749176025, -0.04714459180831909, 0), (-0.9177039861679077, 0.02974068559706211, 0.3961501121520996, 0), (-0.29004669189453125, 2.8742218017578125, -1.6937651634216309, 1) ), ( (0.9685412645339966, -0.23329459130764008, 0.08661118149757385, 0), (0.23309515416622162, 0.9723729491233826, 0.012551075778901577, 0), (-0.08714646100997925, 0.008032412268221378, 0.9961631298065186, 0), (0, 5.298967361450195, -0.00000762939453125, 1) ), ( (0.9953964948654175, -0.000002079962541756686, -0.09584261476993561, 0), (0.0000016275986354230554, 1, -0.0000047980370254663285, 0), (0.09584261476993561, 0.000004619956143869786, 0.9953964948654175, 0), (0, 1.758314609527588, 0.00000762939453125, 1) ), ( (0.9961950182914734, 0.0000015102876886885497, -0.08715186268091202, 0), (-0.0000014869400501993368, 1, 3.328138689084881e-7, 0), (0.08715186268091202, -2.0195793126731587e-7, 0.9961950182914734, 0), (0, 2.6119284629821777, 0, 1) ), ( (1, 5.960014846095874e-7, -4.5445113983078045e-7, 0), (-5.960014846095874e-7, 1, -1.136126357437206e-7, 0), (4.544510829873616e-7, 1.1361290574996019e-7, 1, 0), (0, 7.222679138183594, 0, 1) ), ( (1, 5.66021526537952e-7, -2.606678606298374e-7, 0), (-5.66021526537952e-7, 1, -6.516689410318577e-8, 0), (2.606678037864185e-7, 6.516703621173292e-8, 1, 0), (-0.00000762939453125, 14.445356369018555, -9.5367431640625e-7, 1) ), ( (1, -3.7283970755197515e-7, -2.5021040528372396e-7, 0), (3.7283970755197515e-7, 1, -1.3399376053158107e-9, 0), (2.5021040528372396e-7, 1.3398443465817422e-9, 1, 0), (0.00000762939453125, 7.687129974365234, -5.960464477539063e-8, 1) ), ( (1, 5.960316116215836e-7, -1.571568297720205e-8, 0), (-5.960316116215836e-7, 1, -2.5668935421663264e-8, 0), (1.5715668766347335e-8, 2.56689460798043e-8, 1, 0), (0.00000762939453125, 15.374263763427734, -5.960464477539063e-8, 1) ), ( (0.996192455291748, 0.06103454530239105, -0.06225288286805153, 0), (-0.06103506684303284, -0.02162003517150879, -0.997901439666748, 0), (-0.06225236877799034, 0.997901439666748, -0.017812490463256836, 0), (0.00000762939453125, 23.06139373779297, -2.980232238769531e-7, 1) ), ( (-1, -0.000004261058165866416, -1.6198380592413741e-7, 0), (0.000004261445610609371, -0.9999969005584717, -0.0024749618023633957, 0), (-1.514373622057974e-7, -0.0024749618023633957, 0.9999969601631165, 0), (10.442049980163574, 4.412730693817139, 2.7606897354125977, 1) ), ( (0.9995719194412231, -0.0000013162592722437694, -0.029256857931613922, 0), (0.0000012744025070787757, 1, -0.0000014493109574686969, 0), (0.029256857931613922, 0.0000014114054920355557, 0.9995719194412231, 0), (2.546585164964199e-11, 7.014327526092529, 4.76837158203125e-7, 1) ), ( (0.977586030960083, -0.2103850543498993, 0.0079837366938591, 0), (-0.013160444796085358, -0.023217320442199707, 0.9996438026428223, 0), (-0.21012476086616516, -0.9773428440093994, -0.02546560764312744, 0), (0, 35.549949645996094, -1.1920928955078125e-7, 1) ), ( (0.9719108939170837, -0.000005383828465710394, 0.2353491336107254, 0), (0.000007488819392165169, 1, -0.000008050324140640441, 0), (-0.2353491336107254, 0.000009586684427631553, 0.9719108939170837, 0), (5.364418029785156e-7, 35.549949645996094, 0.00000762939453125, 1) ), ( (0.9766712784767151, -0.05344783514738083, -0.20798206329345703, 0), (0.21169930696487427, 0.4020547866821289, 0.8908060193061829, 0), (0.03600854426622391, -0.9140543341636658, 0.4039902091026306, 0), (0, 36.214725494384766, 2.384185791015625e-7, 1) ), ( (1, -0.000005224236701906193, 0.000006309557647909969, 0), (0.0000017398585896444274, 0.8881231546401978, 0.45960548520088196, 0), (-0.000008004752089618705, -0.45960548520088196, 0.8881231546401978, 0), (0, 7.480364799499512, 0, 1) ), ( (-0.998286247253418, -0.011358015239238739, 0.057408254593610764, 0), (-0.04712756723165512, -0.42555081844329834, -0.9037065505981445, 0), (0.03469444438815117, -0.9048632383346558, 0.42428624629974365, 0), (10.498513221740723, 4.412727355957031, 2.7606897354125977, 1) ), ( (-1, -7.989483492565341e-7, 1.4893505806412577e-7, 0), (7.985772754182108e-7, -0.9999969005584717, -0.0024749618023633957, 0), (1.5091195848526695e-7, -0.0024749618023633957, 0.9999969601631165, 0), (-10.442049026489258, 4.4127302169799805, 2.760690689086914, 1) ), ( (0.9995719194412231, -2.1473013589456968e-7, 0.029256904497742653, 0), (2.5833099925876013e-7, 1, -0.000001486495648350683, 0), (-0.029256904497742653, 0.000001493417357778526, 0.9995719194412231, 0), (2.9103830456733704e-11, 7.014327526092529, 0, 1) ), ( (0.9775859713554382, 0.2103850543498993, -0.007983744144439697, 0), (0.013160452246665955, -0.023217320442199707, 0.9996438026428223, 0), (0.21012476086616516, -0.9773428440093994, -0.02546560764312744, 0), (0, 35.54995346069336, 0, 1) ), ( (0.9719109535217285, -0.000002679025783436373, -0.23534885048866272, 0), (8.42458177885419e-7, 1, -0.000007904144695203286, 0), (0.23534885048866272, 0.000007483853096346138, 0.9719109535217285, 0), (-1.7881393432617188e-7, 35.549949645996094, 0.000003814697265625, 1) ), ( (0.9766713380813599, 0.05344657599925995, 0.2079821527004242, 0), (-0.21169887483119965, 0.4020550847053528, 0.8908059597015381, 0), (-0.0360097661614418, -0.914054274559021, 0.4039902091026306, 0), (0, 36.2147216796875, 0, 1) ), ( (1, 0.000005923945536778774, -0.000006778105216653785, 0), (-0.0000021459363779285923, 0.8881230354309082, 0.4596058130264282, 0), (0.00000874247052706778, -0.4596058130264282, 0.8881230354309082, 0), (9.5367431640625e-7, 7.480367183685303, 0, 1) ), ( (-0.9949424266815186, 0.0013508126139640808, -0.10043644160032272, 0), (0.08997629582881927, -0.43248772621154785, -0.8971390724182129, 0), (-0.04464941471815109, -0.9016387462615967, 0.43017905950546265, 0), (-10.498513221740723, 4.412727355957031, 2.760690689086914, 1) )]
                uniform token controlRig:upAxis = "Z"
            }
        }
    }
}

