#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (92.73651061883157, 152.7188097475243, 266.0185914434871)
                double3 target = (-48.68445094335382, 58.1525343649573, -119.71197673084461)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            bool "rtx:indirectDiffuse:enabled" = 0
            int "rtx:ambientOcclusion:maxSamples" = 2
            int "rtx:ambientOcclusion:minSamples" = 2
            bool "rtx:directLighting:domeLight:enabled" = 0
            int "rtx:directLighting:domeLight:sampleCount" = 1
            bool "rtx:directLighting:sampledLighting:autoEnable" = 0
            int "rtx:directLighting:sampledLighting:autoEnableLightCountThreshold" = 2
            bool "rtx:matteObject:enabled" = 0
            double "rtx:post:aa:sharpness" = 0.4999999888241291
            int "rtx:post:dlss:execMode" = 0
            bool "rtx:post:dof:enabled" = 1
            double "rtx:post:dof:fNumber" = 1.5
            bool "rtx:post:dof:overrideEnabled" = 0
            double "rtx:post:dof:focalLength" = 24
            double "rtx:post:dof:subjectDistance" = 348.3999938964844
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 64
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            int "rtx:realtime:mgpu:tileOverlap" = 24
            double "rtx:reflections:maxRoughness" = 0.09999999776482582
            double "rtx:sceneDb:ambientLightIntensity" = 0
            int "rtx:translucency:maxRefractionBounces" = 6
            double "rtx:translucency:reflectionCutoff" = 0.02
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    color3f primvars:GlassesColor = (0.5189873, 0.21898198, 0.2873376)
    color3f primvars:HairColor = (0.5527426, 0.22179963, 0.10961562)
    color3f primvars:HatColor = (0.5176471, 0.21960784, 0.28627452)
    color3f primvars:OutfitColor1 = (0.42995247, 0.886076, 0.7532806)
    color3f primvars:OutfitColor2 = (0.26083782, 0.3107127, 0.38396627)
    color3f primvars:ShoeColor1 = (0.2742616, 0.13583441, 0.10067831)
    color3f primvars:ShoeColor2 = (0.1687764, 0.07700788, 0.053410254)

    def Xform "LookAtTarget"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 200, 300)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks" (
        variants = {
            string skinVariant = "light"
            string eyeVariant = "gray"
        }
        prepend variantSets = "skinVariant"
        append variantSets = "eyeVariant"
    )
    {
        variantSet "skinVariant" = {
            "dark"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Emma_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Emma_Albedo_Dark.png@ (
                            hidden = false
                        )
                    }
                }
            }
            "medium"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Emma_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Emma_Albedo_Medium.png@ (
                            hidden = false
                        )
                    }
                }
            }
            "light"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Emma_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Emma_Albedo_Light.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }
        
        variantSet "eyeVariant" = {
            "blue" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Blue.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "brown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Brown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "darkbrown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_DarkBrown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "gray" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Gray.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "green" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Green.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }

        def Material "Glasses"
        {
            token outputs:mdl:surface.connect = </World/Looks/Glasses/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Glasses/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Glasses"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0.02 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.2 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/Glasses/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "cornea"
        {
            token outputs:mdl:surface.connect = </World/Looks/cornea/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/cornea/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "cornea"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.5 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @../_general/Cornea_NORM.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/cornea/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "UVMap"
                    float2 outputs:result
                }
            }
        }

        def Material "Hoodie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Pants_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Pants_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Pants_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-892.5756, 147.44347)
            }
        }

        def Material "Shirt_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shirt_Norm.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-862.11914, 126.450386)
            }
        }

        def Material "Shoes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shoes/Shader.outputs:out>
            token visibility = "invisible"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.25 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/Shoes_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shoes/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shoes_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.25 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "EyeBrowLashes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.39999998 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/EyeBrowsLashes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/EyeBrowLashes/data_lookup_color.outputs:out>
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/EyeBrowsLashes_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:opacity_constant = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                asset inputs:opacity_texture = @../_general/EyeBrowsLashes_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.75 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-831.58685, 87.93512)
            }
        }

        def Material "Glasses_Frame"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Glasses_Frame/data_lookup_color.outputs:out>
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "ChefsHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ChefsHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8996139, 0.8996049, 0.8996049) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ChefsHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/ChefsHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-816.19147, 21.44432)
            }
        }

        def Material "DriversHat_Branded"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DriversHat_Branded/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @../_general/DriversHat_Metal.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-986.63086, 83.60689)
            }
        }

        def Material "DriversHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @../_general/DriversHat_Metal.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }
        }

        def Material "BaseballCap"
        {
            token outputs:mdl:displacement.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/BaseballCap/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/BaseballCap_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/BaseballCap/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/BaseballCap_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-930.96375, 160.52206)
            }
        }

        def Material "Branding"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Branding/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                int inputs:opacity_mode = 0 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Hoodie_Secondary"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie_Secondary/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Hair"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hair/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hair/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hair/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurface.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurface"
                color3f inputs:diffuse_reflection_color = (0.22492671, 0.15623741, 0.29042906) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Base"
                    displayName = "Color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:diffuse_reflection_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                float inputs:diffuse_reflection_weight = 1 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:enable_diffuse_transmission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Subsurface"
                    displayName = "Enable Subsurface"
                    doc = "Enables the use of subsurface"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_specular_transmission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Transmission"
                    displayName = "Enable Transmission"
                    doc = "Enables the use of transmission"
                    hidden = false
                )
                asset inputs:geometry_normal_image = @./textures/Hair_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Map Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:geometry_normal_strength = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Strength"
                    hidden = false
                )
                float inputs:geometry_opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity"
                    hidden = false
                )
                asset inputs:geometry_opacity_image = @./textures/Hair_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                int inputs:geometry_opacity_image_alpha_mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image Alpha Mode"
                    hidden = false
                    renderType = "alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                float inputs:geometry_opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Threshold"
                    doc = "If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:specular_reflection_ior = 1.55 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "IOR"
                    hidden = false
                )
                float inputs:specular_reflection_roughness = 0.5 (
                    customData = {
                        float default = 0.2
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness"
                    hidden = false
                )
                float inputs:specular_reflection_weight = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:specular_transmission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Transmission"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:subsurface_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 10
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Scale"
                    hidden = false
                )
                color3f inputs:subsurface_scattering_color = (1, 0.9837925, 0.9471947) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Radius (mfp)"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:subsurface_transmission_color = (0.15020949, 0.098955445, 0.2607261) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color"
                    hidden = false
                    renderType = "color"
                )
                color3f inputs:subsurface_transmission_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                asset inputs:subsurface_transmission_color_image = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:subsurface_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Thin Walled"
                    doc = "Thin surface with no interior."
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-512.9804, 21.023666)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-929.8099, 677.59674)
            }
        }

        def Material "Shirt_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shirt_Formal_Norm.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }

        def Material "Skirt_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Skirt_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Skirt_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Skirt_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Skirt_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Skirt_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Skirt_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "ShoeSole"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeSole/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeSole/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeSole/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.25 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/Shoes_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeSole/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shoes_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "Jewlery"
        {
            token outputs:mdl:surface.connect = </World/Looks/Jewlery/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Jewlery/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Jewlery"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 683.0134 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.2 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor = (0.8, 0.8, 0.8)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior = 1.45
                    float inputs:metallic = 1
                    float inputs:opacity = 1
                    float inputs:roughness = 0.2
                    float inputs:specular = 0.5
                    token outputs:surface
                }
            }
        }

        def Material "Jewlery2"
        {
            token outputs:mdl:surface.connect = </World/Looks/Jewlery2/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Jewlery2/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Jewlery2"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    color3f inputs:diffuse_color_constant = (0.658375, 0.79910296, 0.6172068) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 683.0134 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 1 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    float inputs:metallic_constant = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.2 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @@ (
                        colorSpace = "auto"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor = (0.658375, 0.79910296, 0.6172068)
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior = 1.45
                    float inputs:metallic = 0
                    float inputs:opacity = 1
                    float inputs:roughness = 0.2
                    float inputs:specular = 0.5
                    token outputs:surface
                }
            }
        }

        def Material "HairBase"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HairBase/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HairBase/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HairBase/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/HairBase_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HairBase/data_lookup_color.outputs:out>
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/HairBase_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:opacity_constant = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                int inputs:opacity_mode = 1 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @./textures/HairBase_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.55 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-831.58685, 87.93512)
            }
        }

        def Material "Shirt_Formal_Buttons"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Formal_Buttons/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Formal_Buttons/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Formal_Buttons/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Formal_Buttons/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shirt_Formal_Norm.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }
            def Material "LabCoat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @../_general/Polyester_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Shirt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Shirt/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/LabCoat_Shirt_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-847.7966, 117.52515)
            }
        }

        def Material "LabCoat_Buttons"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Buttons/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_Buttons_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/LabCoat_Buttons_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Pen1"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Pen1/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "LabCoat_Pen2"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.14999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Tie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Tie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Tie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Tie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Tie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "HardHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HardHat/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.9 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/HardHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HardHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/HardHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/HardHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-801.3356, 183.71509)
            }
        }

        def Material "WesternHatMain"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatMain/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatMain/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }

        def Material "WesternHatBand"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatBand/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatBand/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }
    }

    def RectLight "RectLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float height = 100
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        float width = 100
        double3 xformOp:rotateXYZ = (0, -58.44024698680735, -40.09814257589656)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-76.33368903619271, 225.36474984910225, -2.359555120774175)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def RectLight "RectLight_01" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float height = 100
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        float width = 100
        double3 xformOp:rotateXYZ = (-51.57396317594845, 37.44499471708423, -25.12594113990295)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (68.56262565191813, 187.50074054759443, 119.35317374410711)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def "character" (
        instanceable = false
        prepend payload = @./Emma.usd@
    )
    {
        def "character"
        {
            over "GEO_Legs"
            {
                over "GEO_Legs"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "glasses_variants" (
                variants = {
                    string glassesVariant = "glasses1"
                }
                prepend variantSets = "glassesVariant"
            )
            {
                variantSet "glassesVariant" = {
                    "glasses1" {
                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_GlassesFrame2"
                            {
                                over "GEO_GlassesFrame2"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_GlassesFrame"
                            {
                                over "GEO_GlassesFrame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                    }
                    "glasses2" {
                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_GlassesFrame2"
                            {
                                over "GEO_GlassesFrame2"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "visible"

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_GlassesFrame"
                            {
                                over "GEO_GlassesFrame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                    }
                    "glasses3" {
                        over "glasses2"
                        {
                            token visibility = "visible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_GlassesFrame2"
                            {
                                over "GEO_GlassesFrame2"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_GlassesFrame"
                            {
                                over "GEO_GlassesFrame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                    }
                }
            }

            over "GEO_TeethUpper"
            {
                over "GEO_TeethUpper"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Jaw_Group"
            {
                over "GEO_TeethLower"
                {
                    over "GEO_TeethLower"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
       
                over "GEO_Tongue"
                {
                    over "GEO_Tongue"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "Eye_Pivot_l"
            {
                over "GEO_Eye_l"
                {
                    over "GEO_Eye_l"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                    over "GEO_Cornea_l"
                    {
                        over "GEO_Cornea_l"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "GEO_HairBase"
            {
                over "GEO_HairBase"
                {
                    rel material:binding = </World/Looks/HairBase> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_EarRings"
            {
                over "GEO_EarRings"
                {
                    rel material:binding = </World/Looks/Jewlery> (
                        bindMaterialAs = "weakerThanDescendants"
                    )

                    over "Jewlery"
                    {
                        rel material:binding = </World/Looks/Jewlery> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "Jewlery2"
                    {
                        rel material:binding = </World/Looks/Jewlery2> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "GEO_Shoes"
            {
                over "GEO_Shoes"
                {
                    rel material:binding = </World/Looks/Shoes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )

                    over "ShoeMain"
                    {
                        rel material:binding = </World/Looks/Shoes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "ShoeSole"
                    {
                        rel material:binding = </World/Looks/ShoeSole> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "headgear_variants" (
                variants = {
                    string headgearVariant = "headgear1"
                }
                prepend variantSets = "headgearVariant"
            )
            {
                variantSet "headgearVariant" = {
                    "headgear1" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderBaseballCap"
                            {
                                over "GEO_Hair_UnderBaseballCap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "visible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderChefsHat"
                            {
                                over "GEO_Hair_UnderChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderDriversHat"
                            {
                                over "GEO_Hair_UnderDriversHat_001"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderHardHat"
                            {
                                over "GEO_Hair_UnderHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderWesternHat"
                            {
                                over "GEO_Hair_UnderWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear2" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "visible"

                            over "GEO_Hair_UnderBaseballCap"
                            {
                                over "GEO_Hair_UnderBaseballCap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderChefsHat"
                            {
                                over "GEO_Hair_UnderChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderDriversHat"
                            {
                                over "GEO_Hair_UnderDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderWesternHat"
                            {
                                over "GEO_Hair_UnderWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear3" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderBaseballCap"
                            {
                                over "GEO_Hair_UnderBaseballCap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderChefsHat"
                            {
                                over "GEO_Hair_UnderChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "visible"

                            over "GEO_Hair_UnderDriversHat"
                            {
                                over "GEO_Hair_UnderDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderWesternHat"
                            {
                                over "GEO_Hair_UnderWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear4" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderBaseballCap"
                            {
                                over "GEO_Hair_UnderBaseballCap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "visible"

                            over "GEO_Hair_UnderChefsHat"
                            {
                                over "GEO_Hair_UnderChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderDriversHat"
                            {
                                over "GEO_Hair_UnderDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderWesternHat"
                            {
                                over "GEO_Hair_UnderWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear5" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderBaseballCap"
                            {
                                over "GEO_Hair_UnderBaseballCap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderChefsHat"
                            {
                                over "GEO_Hair_UnderChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderDriversHat"
                            {
                                over "GEO_Hair_UnderDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "visible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderHardHat"
                            {
                                over "GEO_Hair_UnderHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderWesternHat"
                            {
                                over "GEO_Hair_UnderWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear6" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderBaseballCap"
                            {
                                over "GEO_Hair_UnderBaseballCap"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair"
                            {
                                over "GEO_Hair"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderChefsHat"
                            {
                                over "GEO_Hair_UnderChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_Hair_UnderDriversHat"
                            {
                                over "GEO_Hair_UnderDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderHardHat"
                            {
                                over "GEO_Hair_UnderHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "visible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Hair_UnderWesternHat"
                            {
                                over "GEO_Hair_UnderWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                }
            }

            over "GEO_Head"
            {
                over "GEO_Head"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_EyebrowsAndEyeLashes"
            {
                over "GEO_EyebrowsAndEyeLashes"
                {
                    rel material:binding = </World/Looks/EyeBrowLashes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_Arms"
            {
                over "GEO_Arms"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "outfit_variants" (
                variants = {
                    string outfitVariant = "outfit2"
                }
                prepend variantSets = "outfitVariant"
            )
            {
                variantSet "outfitVariant" = {
                    "outfit1" {
                        over "outfit_Casual"
                        {
                            token visibility = "visible"

                            over "GEO_Feet"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Decal"
                            {
                                over "GEO_Shirt_Decal"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Skirt_Buttons"
                            {
                                over "GEO_Skirt_Buttons"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Skirt"
                            {
                                over "GEO_Skirt"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Legs"
                            {
                                over "GEO_Legs"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Blouse"
                            {
                                over "GEO_Blouse"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Blouse"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Blouse_Buttons"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal_Buttons> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Feet_Hoodie"
                            {
                                over "GEO_Feet_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit2" {
                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Feet"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Decal"
                            {
                                over "GEO_Shirt_Decal"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Skirt_Buttons"
                            {
                                over "GEO_Skirt_Buttons"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Skirt"
                            {
                                over "GEO_Skirt"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Blouse"
                            {
                                over "GEO_Blouse"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Blouse"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Blouse_Buttons"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal_Buttons> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "GEO_Legs"
                            {
                                over "GEO_Legs"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Feet_Hoodie"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit3" {
                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Feet"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Decal"
                            {
                                over "GEO_Shirt_Decal"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Skirt_Buttons"
                            {
                                over "GEO_Skirt_Buttons"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Skirt"
                            {
                                over "GEO_Skirt"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Blouse"
                            {
                                over "GEO_Blouse"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Blouse"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Blouse_Buttons"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal_Buttons> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "GEO_Legs"
                            {
                                over "GEO_Legs"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "visible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Feet_Hoodie"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "outfit4" {
                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Feet"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt"
                            {
                                over "GEO_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Decal"
                            {
                                over "GEO_Shirt_Decal"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_Skirt_Buttons"
                            {
                                over "GEO_Skirt_Buttons"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Skirt"
                            {
                                over "GEO_Skirt"
                                {
                                    rel material:binding = </World/Looks/Skirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Blouse"
                            {
                                token visibility = "invisible"
                                over "GEO_Blouse"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Blouse"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Blouse_Buttons"
                                    {
                                        rel material:binding = </World/Looks/Shirt_Formal_Buttons> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "GEO_Legs"
                            {
                                over "GEO_Legs"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Feet_Hoodie"
                            {
                                over "GEO_Feet"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "visible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }
            over "Eye_Pivot_r"
            {
                over "GEO_Eye_r"
                {
                    over "GEO_Eye_r"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                    over "GEO_Cornea_r"
                    {
                        over "GEO_Cornea_r"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }
            over "emma_skeleton" (
            prepend apiSchemas = ["ControlRigAPI"]
            )
            {
                uniform token controlRig:forwardAxis = "MINUS Y"
                uniform token[] controlRig:retargetTags = ["", "", "", "Chest", "", "Left_Shoulder", "Left_Elbow", "Left_Hand", "", "", "", "Left_Index", "", "", "Left_Thumb", "", "", "", "Left_Middle", "", "", "", "Left_Ring", "", "", "", "Left_Pinky", "", "", "", "", "", "", "Head", "Left_Eye", "", "", "", "", "", "", "", "", "", "", "", "", "Right_Eye", "", "", "", "", "", "", "", "", "", "Right_Shoulder", "Right_Elbow", "Right_Hand", "", "", "", "Right_Index", "", "", "Right_Thumb", "", "", "", "Right_Middle", "", "", "", "Right_Ring", "", "", "", "Right_Pinky", "", "", "", "", "", "Left_Thigh", "", "", "Left_Knee", "Left_Foot", "Left_Toe", "", "Right_Thigh", "", "", "Right_Knee", "Right_Foot", "Right_Toe", ""]
                uniform matrix4d[] controlRig:retargetTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, -4.371150907900301e-8, -1.7763568394002505e-15, 0), (1.0840928155175789e-10, 0.0024800896644592285, 0.9999969005584717, 0), (-4.3711374075883214e-8, -0.9999969005584717, 0.0024800896644592285, 0), (0, -0.9338769912719727, 79.09075927734375, 1) ), ( (1, 6.736831017966163e-16, 8.883045429059714e-15, 0), (-6.957857912805068e-16, 0.9999969005584717, 0.0024884287267923355, 0), (-8.881341198769838e-15, -0.0024884287267923355, 0.9999969005584717, 0), (3.552713678800501e-15, 15.174720764160156, 0, 1) ), ( (1, 6.282232511978236e-10, -2.3841766960686073e-7, 0), (-3.608224830031759e-16, 0.999996542930603, 0.002634958364069462, 0), (2.384184938364342e-7, -0.002634958364069462, 0.999996542930603, 0), (-3.552713678800501e-15, 15.174674987792969, 0, 1) ), ( (0, -0.999996542930603, 0.0026435418985784054, 0), (1, 0, 1.9476283341646194e-7, 0), (-1.9476283341646194e-7, 0.0026435418985784054, 0.9999964833259583, 0), (1, 14.187919616699219, 1.7881393432617188e-7, 1) ), ( (0.9961774349212646, 0.08715423941612244, -0.005884502083063126, 0), (-0.08715574443340302, 0.9961947202682495, -1.1886004358530045e-7, 0), (0.00586209911853075, 0.0005129865603521466, 0.9999827146530151, 0), (-0.000008106231689453125, 7.205171585083008, 9.5367431640625e-7, 1) ), ( (0.9929705262184143, 0.08687365800142288, 0.08038975298404694, 0), (-0.08715573698282242, 0.9961947202682495, 9.313225746154785e-9, 0), (-0.08008384704589844, -0.0070064375177025795, 0.9967635273933411, 0), (0.000003814697265625, 23.06137466430664, 0.0000019073486328125, 1) ), ( (0.9987121224403381, -0.01838037557899952, -0.04728849232196808, 0), (0.018150148913264275, 0.9998212456703186, -0.00529338326305151, 0), (0.0473773330450058, 0.004428273066878319, 0.9988672733306885, 0), (0.000030517578125, 21.668041229248047, -0.0000019073486328125, 1) ), ( (0.17925721406936646, 0.2696927785873413, -0.9461145401000977, 0), (-0.15209588408470154, 0.9577265977859497, 0.24418571591377258, 0), (0.9719741344451904, 0.10012806206941605, 0.2126985788345337, 0), (-0.28539276123046875, 2.424863815307617, 1.7731904983520508, 1) ), ( (0.9559041261672974, -0.28410130739212036, -0.07438905537128448, 0), (0.2851709723472595, 0.9584685564041138, 0.003951192833483219, 0), (0.07017703354358673, -0.024990558624267578, 0.9972214698791504, 0), (-0.0000019073486328125, 5.273575782775879, 0, 1) ), ( (0.9640953540802002, 1.9726624600480136e-7, -0.26555630564689636, 0), (5.237609457253711e-7, 1, 0.0000026443424303579377, 0), (0.26555630564689636, -0.0000026884861199505394, 0.9640953540802002, 0), (0, 2.2343811988830566, 0.00000762939453125, 1) ), ( (0.9781475067138672, 3.5846926493832143e-7, -0.20791219174861908, 0), (-4.2768647290358786e-7, 1, -2.8796384299312194e-7, 0), (0.20791219174861908, 3.7059234614389425e-7, 0.9781475067138672, 0), (0, 2.6089797019958496, 0.00000762939453125, 1) ), ( (-0.6180812120437622, 0.761838436126709, -0.1938502937555313, 0), (0.6042156219482422, 0.6181429028511047, 0.5028148889541626, 0), (0.502890944480896, 0.19365301728248596, -0.8423771858215332, 0), (0.9486312866210938, 3.190340042114258, 2.35546875, 1) ), ( (0.991603672504425, -0.11105397343635559, -0.06625106930732727, 0), (0.11546172201633453, 0.991057276725769, 0.06688818335533142, 0), (0.05823040381073952, -0.07397602498531342, 0.995558500289917, 0), (-0.000003814697265625, 2.3024139404296875, -0.000003814697265625, 1) ), ( (0.9798133373260498, -0.08400195837020874, -0.18140986561775208, 0), (0.10073280334472656, 0.9912707805633545, 0.08505961298942566, 0), (0.17268112301826477, -0.10161647200584412, 0.9797220826148987, 0), (0, 2.910125732421875, 0.000003814697265625, 1) ), ( (0.20387285947799683, 0.17458035051822662, -0.9633055329322815, 0), (-0.11455859243869781, 0.9814658761024475, 0.15362650156021118, 0), (0.9722716212272644, 0.07903465628623962, 0.2200939655303955, 0), (-0.1823577880859375, 2.829977035522461, 0.7381954193115234, 1) ), ( (0.9826841950416565, -0.14699317514896393, -0.11280430853366852, 0), (0.14714522659778595, 0.9890899658203125, -0.0070225829258561134, 0), (0.11260588467121124, -0.009697635658085346, 0.993592381477356, 0), (0, 5.350588321685791, 0, 1) ), ( (0.9985365867614746, 5.438683388092613e-7, -0.05408083647489548, 0), (-6.229060431905964e-7, 1, -0.0000014446171689996845, 0), (0.05408083647489548, 0.0000014761902775717317, 0.9985365867614746, 0), (0.0000019073486328125, 2.983798027038574, 0, 1) ), ( (0.9999274611473083, -4.154352097884839e-7, 0.012042277492582798, 0), (3.7057245094729296e-7, 1, 0.0000037276677176123485, 0), (-0.012042277492582798, -0.000003722934707184322, 0.9999274611473083, 0), (0, 3.2188525199890137, -0.00000762939453125, 1) ), ( (0.23962873220443726, 0.06421522796154022, -0.9687386155128479, 0), (-0.06543955206871033, 0.9966093301773071, 0.049875468015670776, 0), (0.9686567187309265, 0.0514422208070755, 0.24301844835281372, 0), (0.01943206787109375, 2.9558162689208984, -0.5122432708740234, 1) ), ( (0.9988894462585449, 0.043021608144044876, 0.019209278747439384, 0), (-0.04281355068087578, 0.9990212321281433, -0.01111410278826952, 0), (-0.01966862566769123, 0.010279343463480473, 0.9997537136077881, 0), (-0.0000019073486328125, 5.339704513549805, 0, 1) ), ( (0.9997531771659851, 0.0000017361056734443991, -0.022215930745005608, 0), (-0.0000018857537043004413, 1, -0.000006715119980071904, 0), (0.022215930745005608, 0.0000067553560256783385, 0.9997531771659851, 0), (0, 2.5672383308410645, 0, 1) ), ( (0.9987195730209351, -7.561803272437828e-7, 0.050588712096214294, 0), (6.875531539662916e-7, 1, 0.0000013739737596552004, 0), (-0.050588712096214294, -0.0000013374320815273677, 0.9987195730209351, 0), (0, 2.910460948944092, -0.00000762939453125, 1) ), ( (0.3970831632614136, -0.0385037325322628, -0.916974663734436, 0), (-0.01201795507222414, 0.9988157749176025, -0.04714445024728775, 0), (0.9177039861679077, 0.029740430414676666, 0.39615023136138916, 0), (0.29004669189453125, 2.874227523803711, -1.6937634944915771, 1) ), ( (0.9685412645339966, 0.23329468071460724, -0.08661085367202759, 0), (-0.23309527337551117, 0.9723728895187378, 0.012550906278192997, 0), (0.0871461033821106, 0.008032510988414288, 0.9961631298065186, 0), (0, 5.29896354675293, -0.00000762939453125, 1) ), ( (0.9953965544700623, 1.5535889019702154e-8, 0.09584233164787292, 0), (1.7764327253644296e-7, 1, -0.0000020070608570676995, 0), (-0.09584233164787292, 0.0000020148470412095776, 0.9953965544700623, 0), (0, 1.8266615867614746, -0.00000762939453125, 1) ), ( (0.9961950182914734, 0.000004375955541036092, 0.08715211600065231, 0), (-0.000003833249138551764, 1, -0.000006394475803972455, 0), (-0.08715211600065231, 0.000006036069407855393, 0.9961950182914734, 0), (0, 2.6370131969451904, 0.00000762939453125, 1) ), ( (1, -7.301830464712111e-7, 4.3959997242382087e-7, 0), (7.301830464712111e-7, 1, 3.166626072470535e-8, 0), (-4.3959997242382087e-7, -3.166594098047426e-8, 1, 0), (0, 7.222675323486328, 0, 1) ), ( (1, -8.983897004100072e-8, 2.0213769857946318e-7, 0), (8.983898425185544e-8, 1, -4.1176186016400607e-8, 0), (-2.0213769857946318e-7, 4.117620733268268e-8, 1, 0), (0.00000762939453125, 14.44534683227539, 0, 1) ), ( (1, -7.003562814134057e-7, 0.0000016335437749148696, 0), (7.003561677265679e-7, 1, 9.575244774850944e-8, 0), (-0.0000016335437749148696, -9.575129666927751e-8, 1, 0), (0, 7.687122344970703, -1.1920928955078125e-7, 1) ), ( (1, 0.000001162228954854072, 0.0000016079018223535968, 0), (-0.0000011622291822277475, 1, 1.3433528067707812e-7, 0), (-0.0000016079015949799214, -1.3433715650990052e-7, 1, 0), (0.00000762939453125, 15.374248504638672, 6.556510925292969e-7, 1) ), ( (0.9961920976638794, -0.06103530153632164, 0.06225712597370148, 0), (0.061039458960294724, -0.021617650985717773, -0.9979012608528137, 0), (0.06225305050611496, 0.9979014992713928, -0.017809748649597168, 0), (0, 23.06137466430664, 0.0000016689300537109375, 1) ), ( (1, -6.3878804468231465e-9, 2.3748211219754012e-7, 0), (-2.813470523221895e-8, 0.9894192814826965, 0.14508458971977234, 0), (-2.3589615238961414e-7, -0.14508458971977234, 0.9894192814826965, 0), (7.105427357601002e-15, 14.187919616699219, 0, 1) ), ( (1, -1.8207657603852567e-14, -4.3232383006852615e-8, 0), (-6.385384665463789e-9, 0.9890322685241699, -0.1476995348930359, 0), (4.2758223628425185e-8, 0.1476995348930359, 0.9890322685241699, 0), (0, 11.467201232910156, 0, 1) ), ( (-0.999781608581543, 0.02089150995016098, -0.000291554257273674, 0), (-1.4528632164001465e-7, 0.013947367668151855, 0.9999026656150818, 0), (0.02089354395866394, 0.9996843934059143, -0.013944268226623535, 0), (5.003923416137695, 14.367965698242188, 8.19423770904541, 1) ), ( (0.9345236420631409, 0.15614764392375946, -0.3198178708553314, 0), (0.22760726511478424, 0.4286165237426758, 0.8743470311164856, 0), (0.27360644936561584, -0.8898908495903015, 0.36501193046569824, 0), (5.003925323486328, 14.367965698242188, 8.19423770904541, 1) ), ( (-0.9298310279846191, -0.17418831586837769, 0.32414913177490234, 0), (0.35929441452026367, -0.6200695037841797, 0.6974390149116516, 0), (0.07950927317142487, 0.7649654746055603, 0.6391448378562927, 0), (5.0039238929748535, 14.367965698242188, 8.194236755371094, 1) ), ( (-0.6822261810302734, -0.015592098236083984, 0.7309749126434326, 0), (0.6891158819198608, -0.3477839231491089, 0.6357402801513672, 0), (0.24430879950523376, 0.9374450445175171, 0.2480120062828064, 0), (5.003923416137695, 14.36798095703125, 8.19423770904541, 1) ), ( (-0.9475773572921753, -0.07257439196109772, -0.3111751079559326, 0), (-0.24058710038661957, -0.47882556915283203, 0.8443007469177246, 0), (-0.21027322113513947, 0.8749051094055176, 0.43626391887664795, 0), (5.0039238929748535, 14.36798095703125, 8.194236755371094, 1) ), ( (0.6826051473617554, 0.010150939226150513, -0.7307169437408447, 0), (0.6925586462020874, 0.3101810812950134, 0.6512681841850281, 0), (0.23326559364795685, -0.9506233334541321, 0.20470106601715088, 0), (5.003923416137695, 14.367965698242188, 8.194236755371094, 1) ), ( (0.950042188167572, 0.05462139844894409, 0.3073049485683441, 0), (-0.31211549043655396, 0.1723569631576538, 0.9342788457870483, 0), (-0.0019344985485076904, -0.9835189580917358, 0.18079453706741333, 0), (5.003923416137695, 14.367965698242188, 8.194236755371094, 1) ), ( (1, 0.0000018841710698325187, 2.9659020128747215e-7, 0), (5.684341886080802e-14, -0.15549683570861816, 0.9878363609313965, 0), (0.000001907371824927395, -0.9878363609313965, -0.15549683570861816, 0), (4.364225452378745e-15, 5.66400146484375, 4.386661529541016, 1) ), ( (1, -7.100626362444018e-7, 8.599650413998461e-8, 0), (-5.684341886080802e-14, 0.1202324628829956, 0.9927457571029663, 0), (-7.152513035180164e-7, -0.9927457571029663, 0.1202324628829956, 0), (1.6459950806860246e-15, 4.4482269287109375, 3.8489179611206055, 1) ), ( (1, 8.380350209336029e-7, -0.000004436953076947248, 0), (1.571228267494007e-7, 0.9755731225013733, 0.21967491507530212, 0), (0.000004512667601375142, -0.21967491507530212, 0.9755731225013733, 0), (7.275957614183426e-12, 2.5734939575195312, 0, 1) ), ( (1, -1.7965450638257607e-7, 0.0000049933692025661, 0), (-5.749202500737738e-7, 0.9885788559913635, 0.15070444345474243, 0), (-0.000004963414085068507, -0.15070444345474243, 0.9885788559913635, 0), (0, 2.585735321044922, -0.0000152587890625, 1) ), ( (0.18396854400634766, -0.9821153283119202, 0.04006260633468628, 0), (0.13685518503189087, 0.06595420837402344, 0.9883929491043091, 0), (-0.9733582139015198, -0.1763504445552826, 0.1465410590171814, 0), (3.1204826831817627, 18.917007446289062, 5.696301460266113, 1) ), ( (0.1011284589767456, 0.9939825534820557, -0.04209280014038086, 0), (0.16042116284370422, 0.025463879108428955, 0.986720085144043, 0), (0.9818544387817383, -0.10653802752494812, -0.15688061714172363, 0), (9.179120063781738, 18.182022094726562, 2.685633659362793, 1) ), ( (-0.999781608581543, -0.02089150995016098, 0.000291554257273674, 0), (1.4528632164001465e-7, 0.013947367668151855, 0.9999026656150818, 0), (-0.02089354395866394, 0.9996843934059143, -0.013944268226623535, 0), (-5.003923416137695, 14.367965698242188, 8.19423770904541, 1) ), ( (0.9345236420631409, -0.15614764392375946, 0.3198178708553314, 0), (-0.22760726511478424, 0.4286165237426758, 0.8743470311164856, 0), (-0.27360644936561584, -0.8898908495903015, 0.36501193046569824, 0), (-5.003925323486328, 14.367965698242188, 8.19423770904541, 1) ), ( (-0.9298310279846191, 0.17418831586837769, -0.32414913177490234, 0), (-0.35929441452026367, -0.6200695037841797, 0.6974390149116516, 0), (-0.07950927317142487, 0.7649654746055603, 0.6391448378562927, 0), (-5.0039238929748535, 14.367965698242188, 8.194236755371094, 1) ), ( (-0.6822261810302734, 0.015592098236083984, -0.7309749126434326, 0), (-0.6891158819198608, -0.3477839231491089, 0.6357402801513672, 0), (-0.24430879950523376, 0.9374450445175171, 0.2480120062828064, 0), (-5.003923416137695, 14.36798095703125, 8.19423770904541, 1) ), ( (-0.9475773572921753, 0.07257439196109772, 0.3111751079559326, 0), (0.24058710038661957, -0.47882556915283203, 0.8443007469177246, 0), (0.21027322113513947, 0.8749051094055176, 0.43626391887664795, 0), (-5.0039238929748535, 14.36798095703125, 8.194236755371094, 1) ), ( (0.6826051473617554, -0.010150939226150513, 0.7307169437408447, 0), (-0.6925586462020874, 0.3101810812950134, 0.6512681841850281, 0), (-0.23326559364795685, -0.9506233334541321, 0.20470106601715088, 0), (-5.003923416137695, 14.367965698242188, 8.194236755371094, 1) ), ( (0.950042188167572, -0.05462139844894409, -0.3073049485683441, 0), (0.31211549043655396, 0.1723569631576538, 0.9342788457870483, 0), (0.0019344985485076904, -0.9835189580917358, 0.18079453706741333, 0), (-5.003923416137695, 14.367965698242188, 8.194236755371094, 1) ), ( (0.18396854400634766, 0.9821153283119202, -0.04006260633468628, 0), (-0.13685518503189087, 0.06595420837402344, 0.9883929491043091, 0), (0.9733582139015198, -0.1763504445552826, 0.1465410590171814, 0), (-3.1204826831817627, 18.917007446289062, 5.696301460266113, 1) ), ( (0.1011284589767456, -0.9939825534820557, 0.04209280014038086, 0), (-0.16042116284370422, 0.025463879108428955, 0.986720085144043, 0), (-0.9818544387817383, -0.10653802752494812, -0.15688061714172363, 0), (-9.179120063781738, 18.182022094726562, 2.685633659362793, 1) ), ( (0, 0.999996542930603, -0.0026435418985784054, 0), (-1, 0, -1.94646418094635e-7, 0), (-1.94646418094635e-7, 0.0026435418985784054, 0.9999964833259583, 0), (-1, 14.187919616699219, -1.7881393432617188e-7, 1) ), ( (0.9961773157119751, -0.08715422451496124, 0.005903754848986864, 0), (0.08715614676475525, 0.9961946606636047, -0.0000686120183672756, 0), (-0.0058753094635903835, 0.0005828982684761286, 0.9999825954437256, 0), (0.00000858306884765625, 7.205171585083008, 7.152557373046875e-7, 1) ), ( (0.9929671883583069, -0.0868733748793602, -0.08043107390403748, 0), (0.08716713637113571, 0.9961937069892883, 0.00014173658564686775, 0), (0.08011262118816376, -0.0071516865864396095, 0.9967601895332336, 0), (0.00000858306884765625, 23.06139373779297, -9.5367431640625e-7, 1) ), ( (0.9987121224403381, 0.018381722271442413, 0.04728861153125763, 0), (-0.018151570111513138, 0.9998212456703186, -0.005291854031383991, 0), (-0.04737742990255356, 0.004426675848662853, 0.9988672733306885, 0), (-0.0000152587890625, 21.66802978515625, -0.000003814697265625, 1) ), ( (0.17925715446472168, -0.26969265937805176, 0.9461145401000977, 0), (0.15209639072418213, 0.9577265381813049, 0.24418550729751587, 0), (-0.9719740152359009, 0.10012859851121902, 0.21269863843917847, 0), (0.28539276123046875, 2.424867630004883, 1.7731895446777344, 1) ), ( (0.955904483795166, 0.28410059213638306, 0.07438749819993973, 0), (-0.2851702570915222, 0.9584687352180481, 0.003952356055378914, 0), (-0.07017522305250168, -0.024991178885102272, 0.9972215890884399, 0), (0, 5.27357292175293, 0, 1) ), ( (0.9640949368476868, 5.999245900056849e-7, 0.26555773615837097, 0), (-0.00000106704260360857, 1, 0.0000016147366750374204, 0), (-0.26555773615837097, -0.0000018401208308205241, 0.9640949368476868, 0), (0, 2.2343735694885254, -0.00000762939453125, 1) ), ( (0.978147029876709, 0.0000012875819948021672, 0.2079143524169922, 0), (-9.995386562877684e-7, 1, -0.0000014904510408086935, 0), (-0.2079143524169922, 0.0000012500618140620645, 0.978147029876709, 0), (0, 2.6089768409729004, 0, 1) ), ( (-0.6180814504623413, -0.7618380784988403, 0.19385038316249847, 0), (-0.6042153835296631, 0.6181433200836182, 0.5028146505355835, 0), (-0.5028907060623169, 0.19365307688713074, -0.8423771858215332, 0), (-0.9486312866210938, 3.190336227416992, 2.355470657348633, 1) ), ( (0.991603434085846, 0.11105519533157349, 0.06625275313854218, 0), (-0.11546304821968079, 0.9910571575164795, 0.0668879896402359, 0), (-0.058232005685567856, -0.07397609949111938, 0.9955584406852722, 0), (0, 2.3024215698242188, -0.000003814697265625, 1) ), ( (0.9798142910003662, 0.0839991420507431, 0.18140603601932526, 0), (-0.10072952508926392, 0.9912711381912231, 0.08505944162607193, 0), (-0.1726776510477066, -0.10161539167165756, 0.979722797870636, 0), (0, 2.9101181030273438, 0, 1) ), ( (0.20387297868728638, -0.174580380320549, 0.9633055329322815, 0), (0.1145591288805008, 0.9814658164978027, 0.15362639725208282, 0), (-0.9722716212272644, 0.07903516292572021, 0.22009414434432983, 0), (0.1823577880859375, 2.829977035522461, 0.7381963729858398, 1) ), ( (0.9826841950416565, 0.14699287712574005, 0.11280441284179688, 0), (-0.14714495837688446, 0.9890900254249573, -0.007022436708211899, 0), (-0.11260595917701721, -0.009697763249278069, 0.993592381477356, 0), (0, 5.350589275360107, 0.00000762939453125, 1) ), ( (0.9985365867614746, -3.5532795550352603e-7, 0.05408083647489548, 0), (4.3596648424681916e-7, 1, -0.0000014792764204685227, 0), (-0.05408083647489548, 0.0000015006891089797136, 0.9985365867614746, 0), (0, 2.983797550201416, 0, 1) ), ( (0.9999274611473083, 9.237394351657713e-7, -0.012042269110679626, 0), (-8.792360404186184e-7, 1, 0.000003700894467328908, 0), (0.012042269110679626, -0.0000036900382838211954, 0.9999274611473083, 0), (9.5367431640625e-7, 3.2188544273376465, 0, 1) ), ( (0.23962867259979248, -0.06421522796154022, 0.9687386751174927, 0), (0.06544004380702972, 0.9966092705726624, 0.049875352531671524, 0), (-0.9686566591262817, 0.05144273117184639, 0.24301844835281372, 0), (-0.019439697265625, 2.955812454223633, -0.5122413635253906, 1) ), ( (0.9988895058631897, -0.04302177205681801, -0.019207710400223732, 0), (0.04281371459364891, 0.9990212321281433, -0.011114890687167645, 0), (0.019667094573378563, 0.010280194692313671, 0.9997537136077881, 0), (0, 5.339698791503906, 0, 1) ), ( (0.9997532367706299, -0.0000017078031078199274, 0.02221442200243473, 0), (0.000001838236244111613, 1, -0.00000585113457418629, 0), (-0.02221442200243473, 0.000005890525699214777, 0.9997532367706299, 0), (0, 2.56724214553833, 0, 1) ), ( (0.9987194538116455, 0.000001380902517666982, -0.05059075728058815, 0), (-0.0000011983632930423482, 1, 0.0000036384878967510303, 0), (0.05059075728058815, -0.000003573202548068366, 0.9987194538116455, 0), (0, 2.91045880317688, 0, 1) ), ( (0.3970831632614136, 0.03850365802645683, 0.9169745445251465, 0), (0.01201851386576891, 0.9988157749176025, -0.047144606709480286, 0), (-0.9177038669586182, 0.02974100224673748, 0.3961501717567444, 0), (-0.2900390625, 2.8742237091064453, -1.6937642097473145, 1) ), ( (0.9685410261154175, -0.2332955300807953, 0.08661084622144699, 0), (0.23309609293937683, 0.9723727107048035, 0.01255122758448124, 0), (-0.08714617043733597, 0.008032271638512611, 0.9961631298065186, 0), (0, 5.298969268798828, -0.00000762939453125, 1) ), ( (0.9953965544700623, 6.328589847726107e-7, -0.09584232419729233, 0), (-8.446729111710738e-7, 1, -0.0000021694536371796858, 0), (0.09584232419729233, 0.0000022404219635063782, 0.9953965544700623, 0), (-0.000003814697265625, 1.8266558647155762, 0, 1) ), ( (0.9961950182914734, -0.0000031923789265420055, -0.08715231716632843, 0), (0.0000025886618004733464, 1, -0.00000704016883901204, 0), (0.08715231716632843, 0.000006787773145333631, 0.9961950182914734, 0), (-0.000003814697265625, 2.637011766433716, 0, 1) ), ( (1, 6.109190735514858e-7, -4.6191439651011024e-7, 0), (-6.109190735514858e-7, 1, -8.195241463226921e-8, 0), (4.619143396666914e-7, 8.195269884936351e-8, 1, 0), (0, 7.222675323486328, -9.5367431640625e-7, 1) ), ( (1, 5.961119313724339e-7, -2.645246865995432e-7, 0), (-5.961119313724339e-7, 1, -3.166837103663056e-8, 0), (2.645246865995432e-7, 3.166852735603243e-8, 1, 0), (-0.00000762939453125, 14.445354461669922, -9.5367431640625e-7, 1) ), ( (1, -4.1728867472556885e-7, -2.510252272713842e-7, 0), (4.1728867472556885e-7, 1, -3.4934524717478155e-10, 0), (2.510252272713842e-7, 3.4924049763240816e-10, 1, 0), (0.00000762939453125, 7.687126159667969, -5.960464477539063e-8, 1) ), ( (1, 4.6166184120011167e-7, -1.5881266079986744e-8, 0), (-4.6166184120011167e-7, 1, -2.582885905155763e-8, 0), (1.5881255421845708e-8, 2.5828866156984986e-8, 1, 0), (0.00000762939453125, 15.374259948730469, -1.1920928955078125e-7, 1) ), ( (0.996192455291748, 0.061034590005874634, -0.062252871692180634, 0), (-0.061035074293613434, -0.021619677543640137, -0.997901439666748, 0), (-0.06225239485502243, 0.997901439666748, -0.017812132835388184, 0), (0.00000762939453125, 23.06139373779297, -2.384185791015625e-7, 1) ), ( (-1, -0.000004261057711119065, -1.616397895531918e-7, 0), (0.00000426144515586202, -0.9999969005584717, -0.0024749618023633957, 0), (-1.510933458348518e-7, -0.0024749618023633957, 0.9999969601631165, 0), (8.176413536071777, 4.41273832321167, 2.7606897354125977, 1) ), ( (0.9995935559272766, -0.0000011640215689112665, -0.028507649898529053, 0), (0.0000011249362614762504, 1, -0.0000013870840120944194, 0), (0.028507649898529053, 0.000001354450887447456, 0.9995935559272766, 0), (2.7284841053187847e-11, 7.0143351554870605, 9.5367431640625e-7, 1) ), ( (0.988358736038208, -0.15009866654872894, 0.024848442524671555, 0), (-0.0285007543861866, -0.02223050594329834, 0.9993465542793274, 0), (-0.1494481861591339, -0.9884210228919983, -0.02624964714050293, 0), (9.5367431640625e-7, 35.482330322265625, 0, 1) ), ( (0.9715247750282288, -0.0000053404291975311935, 0.2369379848241806, 0), (0.000007530959919677116, 1, -0.000008340093700098805, 0), (-0.2369379848241806, 0.000009886978659778833, 0.9715247750282288, 0), (8.344650268554688e-7, 35.482322692871094, 0.00000762939453125, 1) ), ( (0.976923942565918, 0.00983111560344696, -0.21336118876934052, 0), (0.1914510279893875, 0.4025542140007019, 0.895151674747467, 0), (0.09468977153301239, -0.9153433442115784, 0.39138263463974, 0), (-9.5367431640625e-7, 36.136844635009766, 1.1920928955078125e-7, 1) ), ( (0.9999844431877136, 0.005581769160926342, -0.00004716427065432072, 0), (-0.004935777746140957, 0.8881368637084961, 0.45955249667167664, 0), (0.0026070044841617346, -0.4595451056957245, 0.8881505727767944, 0), (0, 7.480244159698486, 0, 1) ), ( (-0.999396562576294, -0.03142334148287773, 0.014797068201005459, 0), (3.3527612686157227e-8, -0.42602455615997314, -0.9047116041183472, 0), (0.03473297506570816, -0.9041657447814941, 0.4257674813270569, 0), (8.176414489746094, 4.4127349853515625, 2.7606899738311768, 1) ), ( (-1, -7.989482924131153e-7, 1.4893501543156162e-7, 0), (7.985772185747919e-7, -0.9999969005584717, -0.0024752002209424973, 0), (1.5091211480466882e-7, -0.0024752002209424973, 0.9999969601631165, 0), (-8.176413536071777, 4.412737846374512, 2.760690212249756, 1) ), ( (0.9995935559272766, -2.3755775657718914e-7, 0.028507690876722336, 0), (2.783424690733227e-7, 1, -0.0000014266882999436348, 0), (-0.028507690876722336, 0.0000014340433835968724, 0.9995935559272766, 0), (2.9103830456733704e-11, 7.014335632324219, 0, 1) ), ( (0.988358736038208, 0.15009866654872894, -0.024848442524671555, 0), (0.0285007543861866, -0.02223050594329834, 0.9993465542793274, 0), (0.1494481861591339, -0.9884210228919983, -0.02624964714050293, 0), (-9.5367431640625e-7, 35.482330322265625, 0, 1) ), ( (0.9715248346328735, -0.000002699082187973545, -0.2369377613067627, 0), (8.072618697951839e-7, 1, -0.00000808147706266027, 0), (0.2369377613067627, 0.000007660084520466626, 0.9715248346328735, 0), (-8.344650268554688e-7, 35.482322692871094, 0.0000152587890625, 1) ), ( (0.976923942565918, -0.00983111560344696, 0.21336118876934052, 0), (-0.1914510279893875, 0.4025542140007019, 0.895151674747467, 0), (-0.09468977153301239, -0.9153433442115784, 0.39138263463974, 0), (0, 36.136844635009766, 0, 1) ), ( (0.9999844431877136, -0.005581769160926342, 0.00004716427065432072, 0), (0.004935777746140957, 0.8881368637084961, 0.45955249667167664, 0), (-0.0026070044841617346, -0.4595451056957245, 0.8881505727767944, 0), (0, 7.480243682861328, 0, 1) ), ( (-0.999396562576294, 0.03142334148287773, -0.014797068201005459, 0), (-3.3527612686157227e-8, -0.42602455615997314, -0.9047116041183472, 0), (-0.03473297506570816, -0.9041657447814941, 0.4257674813270569, 0), (-8.176414489746094, 4.4127349853515625, 2.760690212249756, 1) )]
                uniform token controlRig:upAxis = "Z"
            }
        }
    }
}

