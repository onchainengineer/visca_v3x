#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 500)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (500, 500, 500)
                double3 target = (-0.00000397803842133726, 0.000007956076785831101, -0.000003978038307650422)
            }
            dictionary Right = {
                double3 position = (-500, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 500, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./FPS_Wheel.usda"
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "root"
    endTimeCode = 1200
    metersPerUnit = 1
    startTimeCode = 0
    timeCodesPerSecond = 30
    upAxis = "Y"
)

def Xform "root"
{
    def Scope "Looks"
    {
        def Material "ColorWheel_30_Smooth"
        {
            token outputs:mdl:displacement.connect = </root/Looks/ColorWheel_30_Smooth/Shader.outputs:out>
            token outputs:mdl:surface.connect = </root/Looks/ColorWheel_30_Smooth/Shader.outputs:out>
            token outputs:mdl:volume.connect = </root/Looks/ColorWheel_30_Smooth/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurfaceLite.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurfaceLite"
                float inputs:diffuse_reflection_weight = 0 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:emission_color_image = @./30FramesColorWheel.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Color Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emission_intensity = 2000 (
                    customData = {
                        float default = 1
                        dictionary omni = {
                            dictionary kit = {
                                dictionary property = {
                                    dictionary usd = {
                                        float2 soft_range_ui = (0, 5000)
                                    }
                                }
                            }
                        }
                        dictionary soft_range = {
                            float max = 1000
                            float min = 0
                        }
                    }
                    displayGroup = "Emission"
                    displayName = "Intensity"
                    hidden = false
                )
                asset inputs:emission_intensity_image = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Intensity Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Emission"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:emission_weight_image = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Weight Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:specular_reflection_weight = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:uvw_s_offset = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Offset U"
                    hidden = false
                )
                float inputs:uvw_s_offset.connect = </root/Looks/ColorWheel_30_Smooth/fmod.outputs:out>
                float inputs:uvw_t_offset = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Offset V"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "animation_time" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "animation_time"
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1061.7205, 2029.9725)
            }

            def Shader "fmod" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "fmod(float,float)"
                float inputs:a (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float inputs:a.connect = </root/Looks/ColorWheel_30_Smooth/animation_time.outputs:out>
                float inputs:b (
                    customData = {
                        float default = 1
                    }
                    hidden = false
                    renderType = "float"
                )
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-786.15283, 2017.8234)
            }
        }

        def Material "ColorWheel_30_Rounded"
        {
            token outputs:mdl:displacement.connect = </root/Looks/ColorWheel_30_Rounded/Shader.outputs:out>
            token outputs:mdl:surface.connect = </root/Looks/ColorWheel_30_Rounded/Shader.outputs:out>
            token outputs:mdl:volume.connect = </root/Looks/ColorWheel_30_Rounded/Shader.outputs:out>
            uniform token ui:nodegraph:node:expansionState = "open"

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurfaceLite.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurfaceLite"
                float inputs:diffuse_reflection_weight = 0 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:emission_color_image = @./30FramesColorWheel.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Color Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emission_intensity = 2000 (
                    customData = {
                        float default = 1
                        dictionary omni = {
                            dictionary kit = {
                                dictionary property = {
                                    dictionary usd = {
                                        float2 soft_range_ui = (0, 5000)
                                    }
                                }
                            }
                        }
                        dictionary soft_range = {
                            float max = 1000
                            float min = 0
                        }
                    }
                    displayGroup = "Emission"
                    displayName = "Intensity"
                    hidden = false
                )
                asset inputs:emission_intensity_image = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Intensity Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:emission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Emission"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:emission_weight_image = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Emission"
                    displayName = "Weight Image"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:specular_reflection_weight = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:uvw_s_offset = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Offset U"
                    hidden = false
                )
                float inputs:uvw_s_offset.connect = </root/Looks/ColorWheel_30_Rounded/divide.outputs:out>
                float inputs:uvw_t_offset = 0 (
                    customData = {
                        float default = 0
                        dictionary soft_range = {
                            float max = 1
                            float min = -1
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Offset V"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "divide" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "divide(float,float)"
                float inputs:a (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float inputs:a.connect = </root/Looks/ColorWheel_30_Rounded/floor.outputs:out>
                float inputs:b = 30 (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-731.1688, 2044.6626)
            }

            def Shader "floor" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "floor(float)"
                float inputs:a (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float inputs:a.connect = </root/Looks/ColorWheel_30_Rounded/multiply.outputs:out>
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-952.3615, 2038.6685)
            }

            def Shader "multiply" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "multiply(float,float)"
                float inputs:a (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float inputs:a.connect = </root/Looks/ColorWheel_30_Rounded/fmod.outputs:out>
                float inputs:b = 30 (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1165.5754, 2030.5554)
            }

            def Shader "animation_time" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "animation_time"
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1640.456, 2045.8672)
            }

            def Shader "fmod" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:a", "inputs:b"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "fmod(float,float)"
                float inputs:a (
                    customData = {
                        float default = 0
                    }
                    hidden = false
                    renderType = "float"
                )
                float inputs:a.connect = </root/Looks/ColorWheel_30_Rounded/animation_time.outputs:out>
                float inputs:b (
                    customData = {
                        float default = 1
                    }
                    hidden = false
                    renderType = "float"
                )
                float outputs:out (
                    renderType = "float"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-1404.6265, 2046.9282)
            }
        }
    }

    def Xform "ColorWheel_Rounded" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </root/Looks/ColorWheel_30_Rounded> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (0.5, 0.5, 0.5)
        double3 xformOp:translate = (0, 105, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "ColorWheel" (
            active = true
        )
        {
            float3[] extent = [(-50, -50, -0.0000019073486), (50, 50, 0.0000019073486)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 3, 2, 3, 4, 2, 4, 7, 6, 7, 8, 6, 8, 11, 10, 11, 12, 10, 12, 15, 14, 15, 16, 14, 16, 19, 18, 19, 20, 18, 20, 23, 22, 23, 24, 22, 24, 27, 26, 27, 28, 26, 28, 31, 30, 31, 32, 30, 32, 35, 34, 35, 36, 34, 36, 39, 38, 39, 40, 38, 40, 43, 42, 43, 44, 42, 44, 47, 46, 47, 48, 46, 48, 51, 50, 51, 52, 50, 52, 55, 54, 55, 56, 54, 56, 59, 58, 59, 60, 58, 60, 63, 62, 63, 64, 62, 64, 67, 66, 67, 68, 66, 68, 71, 70, 71, 72, 70, 72, 75, 74, 75, 76, 74, 76, 79, 78, 79, 80, 78, 80, 83, 82, 83, 84, 82, 84, 87, 86, 87, 88, 86, 88, 91, 90, 91, 92, 90, 92, 95, 94, 95, 96, 94, 96, 99, 98, 99, 100, 98, 100, 103, 102, 103, 104, 102, 104, 107, 106, 107, 108, 106, 108, 111, 110, 111, 112, 110, 112, 115, 114, 115, 116, 114, 116, 119, 118, 119, 0, 118, 0, 1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 3, 5, 4, 7, 9, 8, 11, 13, 12, 15, 17, 16, 19, 21, 20, 23, 25, 24, 27, 29, 28, 31, 33, 32, 35, 37, 36, 39, 41, 40, 43, 45, 44, 47, 49, 48, 51, 53, 52, 55, 57, 56, 59, 61, 60, 63, 65, 64, 67, 69, 68, 71, 73, 72, 75, 77, 76, 79, 81, 80, 83, 85, 84, 87, 89, 88, 91, 93, 92, 95, 97, 96, 99, 101, 100, 103, 105, 104, 107, 109, 108, 111, 113, 112, 115, 117, 116, 119, 1, 0]
            normal3f[] normals = [(3.998362e-9, 7.629396e-8, 1), (3.998362e-9, 7.629396e-8, 1), (3.998362e-9, 7.629396e-8, 1), (1.19513714e-8, 7.545804e-8, 1), (1.19513714e-8, 7.545804e-8, 1), (1.19513714e-8, 7.545804e-8, 1), (1.9773465e-8, 7.379543e-8, 1), (1.9773465e-8, 7.379543e-8, 1), (1.9773465e-8, 7.379543e-8, 1), (2.7378832e-8, 7.132427e-8, 1), (2.7378832e-8, 7.132427e-8, 1), (2.7378832e-8, 7.132427e-8, 1), (3.4684284e-8, 6.80717e-8, 1), (3.4684284e-8, 6.80717e-8, 1), (3.4684284e-8, 6.80717e-8, 1), (4.160965e-8, 6.4073305e-8, 1), (4.160965e-8, 6.4073305e-8, 1), (4.160965e-8, 6.4073305e-8, 1), (4.8079244e-8, 5.937291e-8, 1), (4.8079244e-8, 5.937291e-8, 1), (4.8079244e-8, 5.937291e-8, 1), (5.4022003e-8, 5.4022003e-8, 1), (5.4022003e-8, 5.4022003e-8, 1), (5.4022003e-8, 5.4022003e-8, 1), (5.937288e-8, 4.807922e-8, 1), (5.937288e-8, 4.807922e-8, 1), (5.937288e-8, 4.807922e-8, 1), (6.4073326e-8, 4.1609663e-8, 1), (6.4073326e-8, 4.1609663e-8, 1), (6.4073326e-8, 4.1609663e-8, 1), (6.807168e-8, 3.4684277e-8, 1), (6.807168e-8, 3.4684277e-8, 1), (6.807168e-8, 3.4684277e-8, 1), (7.1324294e-8, 2.7378828e-8, 1), (7.1324294e-8, 2.7378828e-8, 1), (7.1324294e-8, 2.7378828e-8, 1), (7.37954e-8, 1.9773461e-8, 1), (7.37954e-8, 1.9773461e-8, 1), (7.37954e-8, 1.9773461e-8, 1), (7.545807e-8, 1.1951374e-8, 1), (7.545807e-8, 1.1951374e-8, 1), (7.545807e-8, 1.1951374e-8, 1), (7.629395e-8, 3.9983625e-9, 1), (7.629395e-8, 3.9983625e-9, 1), (7.629395e-8, 3.9983625e-9, 1), (7.6293944e-8, -3.9983616e-9, 1), (7.6293944e-8, -3.9983616e-9, 1), (7.6293944e-8, -3.9983616e-9, 1), (7.545805e-8, -1.195137e-8, 1), (7.545805e-8, -1.195137e-8, 1), (7.545805e-8, -1.195137e-8, 1), (7.379541e-8, -1.9773461e-8, 1), (7.379541e-8, -1.9773461e-8, 1), (7.379541e-8, -1.9773461e-8, 1), (7.1324294e-8, -2.7378828e-8, 1), (7.1324294e-8, -2.7378828e-8, 1), (7.1324294e-8, -2.7378828e-8, 1), (6.807168e-8, -3.4684277e-8, 1), (6.807168e-8, -3.4684277e-8, 1), (6.807168e-8, -3.4684277e-8, 1), (6.407333e-8, -4.160967e-8, 1), (6.407333e-8, -4.160967e-8, 1), (6.407333e-8, -4.160967e-8, 1), (5.937288e-8, -4.807922e-8, 1), (5.937288e-8, -4.807922e-8, 1), (5.937288e-8, -4.807922e-8, 1), (5.4022003e-8, -5.4022003e-8, 1), (5.4022003e-8, -5.4022003e-8, 1), (5.4022003e-8, -5.4022003e-8, 1), (4.8079244e-8, -5.937291e-8, 1), (4.8079244e-8, -5.937291e-8, 1), (4.8079244e-8, -5.937291e-8, 1), (4.160965e-8, -6.4073305e-8, 1), (4.160965e-8, -6.4073305e-8, 1), (4.160965e-8, -6.4073305e-8, 1), (3.468428e-8, -6.807169e-8, 1), (3.468428e-8, -6.807169e-8, 1), (3.468428e-8, -6.807169e-8, 1), (2.7378832e-8, -7.132427e-8, 1), (2.7378832e-8, -7.132427e-8, 1), (2.7378832e-8, -7.132427e-8, 1), (1.9773463e-8, -7.379542e-8, 1), (1.9773463e-8, -7.379542e-8, 1), (1.9773463e-8, -7.379542e-8, 1), (1.19513714e-8, -7.545804e-8, 1), (1.19513714e-8, -7.545804e-8, 1), (1.19513714e-8, -7.545804e-8, 1), (3.998362e-9, -7.629396e-8, 1), (3.998362e-9, -7.629396e-8, 1), (3.998362e-9, -7.629396e-8, 1), (-3.998362e-9, -7.629394e-8, 1), (-3.998362e-9, -7.629394e-8, 1), (-3.998362e-9, -7.629394e-8, 1), (-1.1951368e-8, -7.545804e-8, 1), (-1.1951368e-8, -7.545804e-8, 1), (-1.1951368e-8, -7.545804e-8, 1), (-1.977347e-8, -7.3795434e-8, 1), (-1.977347e-8, -7.3795434e-8, 1), (-1.977347e-8, -7.3795434e-8, 1), (-2.7378812e-8, -7.132428e-8, 1), (-2.7378812e-8, -7.132428e-8, 1), (-2.7378812e-8, -7.132428e-8, 1), (-3.4684266e-8, -6.8071664e-8, 1), (-3.4684266e-8, -6.8071664e-8, 1), (-3.4684266e-8, -6.8071664e-8, 1), (-4.160967e-8, -6.407333e-8, 1), (-4.160967e-8, -6.407333e-8, 1), (-4.160967e-8, -6.407333e-8, 1), (-4.8079244e-8, -5.937291e-8, 1), (-4.8079244e-8, -5.937291e-8, 1), (-4.8079244e-8, -5.937291e-8, 1), (-5.4022003e-8, -5.4022003e-8, 1), (-5.4022003e-8, -5.4022003e-8, 1), (-5.4022003e-8, -5.4022003e-8, 1), (-5.937288e-8, -4.807922e-8, 1), (-5.937288e-8, -4.807922e-8, 1), (-5.937288e-8, -4.807922e-8, 1), (-6.4073326e-8, -4.1609663e-8, 1), (-6.4073326e-8, -4.1609663e-8, 1), (-6.4073326e-8, -4.1609663e-8, 1), (-6.807168e-8, -3.4684277e-8, 1), (-6.807168e-8, -3.4684277e-8, 1), (-6.807168e-8, -3.4684277e-8, 1), (-7.1324294e-8, -2.7378828e-8, 1), (-7.1324294e-8, -2.7378828e-8, 1), (-7.1324294e-8, -2.7378828e-8, 1), (-7.37954e-8, -1.9773458e-8, 1), (-7.37954e-8, -1.9773458e-8, 1), (-7.37954e-8, -1.9773458e-8, 1), (-7.545805e-8, -1.195137e-8, 1), (-7.545805e-8, -1.195137e-8, 1), (-7.545805e-8, -1.195137e-8, 1), (-7.6293944e-8, -3.9983616e-9, 1), (-7.6293944e-8, -3.9983616e-9, 1), (-7.6293944e-8, -3.9983616e-9, 1), (-7.629395e-8, 3.9983625e-9, 1), (-7.629395e-8, 3.9983625e-9, 1), (-7.629395e-8, 3.9983625e-9, 1), (-7.5458054e-8, 1.1951372e-8, 1), (-7.5458054e-8, 1.1951372e-8, 1), (-7.5458054e-8, 1.1951372e-8, 1), (-7.3795405e-8, 1.9773463e-8, 1), (-7.3795405e-8, 1.9773463e-8, 1), (-7.3795405e-8, 1.9773463e-8, 1), (-7.1324294e-8, 2.7378828e-8, 1), (-7.1324294e-8, 2.7378828e-8, 1), (-7.1324294e-8, 2.7378828e-8, 1), (-6.807168e-8, 3.4684277e-8, 1), (-6.807168e-8, 3.4684277e-8, 1), (-6.807168e-8, 3.4684277e-8, 1), (-6.407333e-8, 4.160967e-8, 1), (-6.407333e-8, 4.160967e-8, 1), (-6.407333e-8, 4.160967e-8, 1), (-5.937288e-8, 4.807922e-8, 1), (-5.937288e-8, 4.807922e-8, 1), (-5.937288e-8, 4.807922e-8, 1), (-5.4022003e-8, 5.4022003e-8, 1), (-5.4022003e-8, 5.4022003e-8, 1), (-5.4022003e-8, 5.4022003e-8, 1), (-4.8079244e-8, 5.937291e-8, 1), (-4.8079244e-8, 5.937291e-8, 1), (-4.8079244e-8, 5.937291e-8, 1), (-4.160967e-8, 6.407333e-8, 1), (-4.160967e-8, 6.407333e-8, 1), (-4.160967e-8, 6.407333e-8, 1), (-3.468427e-8, 6.807167e-8, 1), (-3.468427e-8, 6.807167e-8, 1), (-3.468427e-8, 6.807167e-8, 1), (-2.7378812e-8, 7.132428e-8, 1), (-2.7378812e-8, 7.132428e-8, 1), (-2.7378812e-8, 7.132428e-8, 1), (-1.9773468e-8, 7.379542e-8, 1), (-1.9773468e-8, 7.379542e-8, 1), (-1.9773468e-8, 7.379542e-8, 1), (-1.1951368e-8, 7.545804e-8, 1), (-1.1951368e-8, 7.545804e-8, 1), (-1.1951368e-8, 7.545804e-8, 1), (-3.998362e-9, 7.629394e-8, 1), (-3.998362e-9, 7.629394e-8, 1), (-3.998362e-9, 7.629394e-8, 1), (0, 7.629401e-8, 1), (0, 7.629401e-8, 1), (0, 7.629401e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 5.9604645e-8, 1), (0, 5.9604645e-8, 1), (0, 5.9604645e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-5.9604645e-8, 0, -1), (-5.9604645e-8, 0, -1), (-5.9604645e-8, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 7.629401e-8, -1), (0, 7.629401e-8, -1), (0, 7.629401e-8, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0.98650473, -0.1637324), (0, 0.98650473, -0.1637324), (0, 0.98650473, -0.1637324), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-5.9604645e-8, 0, 1), (-5.9604645e-8, 0, 1), (-5.9604645e-8, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (5.9604645e-8, 0, 1), (5.9604645e-8, 0, 1), (5.9604645e-8, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -5.9604645e-8, 1), (0, -5.9604645e-8, 1), (0, -5.9604645e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -7.629401e-8, 1), (0, -7.629401e-8, 1), (0, -7.629401e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (5.9604645e-8, 0, -1), (5.9604645e-8, 0, -1), (5.9604645e-8, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -7.629401e-8, -1), (0, -7.629401e-8, -1), (0, -7.629401e-8, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(2.8175612e-7, 50, -0.0000019073486), (-6.6757207e-7, 3.165669e-7, 0.0000019073486), (5.226424, 49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486), (10.395586, 48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (15.450851, 47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (20.336834, 45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (25, 43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (29.389263, 40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (33.45653, 37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (37.15724, 33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (40.45085, 29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (43.30127, 25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (45.677273, 20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (47.552826, 15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (48.907383, 10.395586, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (49.726097, 5.226424, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (50, 9.980467e-7, -0.0000019073486), (7.8678136e-7, -1.3245653e-9, 0.0000019073486), (49.726097, -5.226423, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (48.907383, -10.395585, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (47.552826, -15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (45.677273, -20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (43.30127, -25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (40.45085, -29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (37.15724, -33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (33.45653, -37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (29.389263, -40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (25, -43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (20.336834, -45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (15.450851, -47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (10.395586, -48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (5.226424, -49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486), (2.8175612e-7, -50, -0.0000019073486), (-6.6757207e-7, 3.165669e-7, 0.0000019073486), (-5.226423, -49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486), (-10.395585, -48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-15.45085, -47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-20.336834, -45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-25, -43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-29.389263, -40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-33.45653, -37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-37.15724, -33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-40.45085, -29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-43.30127, -25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-45.677273, -20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-47.552826, -15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-48.907383, -10.395585, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-49.726097, -5.226423, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (-50, 9.980467e-7, -0.0000019073486), (7.8678136e-7, -1.3245653e-9, 0.0000019073486), (-49.726097, 5.226424, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (-48.907383, 10.395586, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-47.552826, 15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-45.677273, 20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-43.30127, 25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-40.45085, 29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-37.15724, 33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-33.45653, 37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-29.389263, 40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-25, 43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-20.336834, 45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-15.45085, 47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-10.395585, 48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-5.226423, 49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486)]
            bool primvars:disableRtSssTransmission = 1
            bool primvars:doNotCastShadows = 1
            bool primvars:invisibleToSecondaryRays = 1
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:st = [(1, 0.00999999), (0.98333335, 0.99), (0.98333335, 0.00999999), (0.98333335, 0.99), (0.9666667, 0.00999999), (0.98333335, 0.00999999), (0.9666667, 0.00999999), (0.95000005, 0.99), (0.95000005, 0.00999999), (0.95000005, 0.99), (0.9333334, 0.00999999), (0.95000005, 0.00999999), (0.9333334, 0.00999999), (0.91666675, 0.99), (0.91666675, 0.00999999), (0.91666675, 0.99), (0.9000001, 0.00999999), (0.91666675, 0.00999999), (0.9000001, 0.00999999), (0.88333344, 0.99), (0.88333344, 0.00999999), (0.88333344, 0.99), (0.8666668, 0.00999999), (0.88333344, 0.00999999), (0.8666668, 0.00999999), (0.85000014, 0.99), (0.85000014, 0.00999999), (0.85000014, 0.99), (0.8333335, 0.00999999), (0.85000014, 0.00999999), (0.8333335, 0.00999999), (0.81666684, 0.99), (0.81666684, 0.00999999), (0.81666684, 0.99), (0.8000002, 0.00999999), (0.81666684, 0.00999999), (0.8000002, 0.00999999), (0.78333354, 0.99), (0.78333354, 0.00999999), (0.78333354, 0.99), (0.7666669, 0.00999999), (0.78333354, 0.00999999), (0.7666669, 0.00999999), (0.75000024, 0.99), (0.75000024, 0.00999999), (0.75000024, 0.99), (0.7333336, 0.00999999), (0.75000024, 0.00999999), (0.7333336, 0.00999999), (0.71666694, 0.99), (0.71666694, 0.00999999), (0.71666694, 0.99), (0.7000003, 0.00999999), (0.71666694, 0.00999999), (0.7000003, 0.00999999), (0.68333364, 0.99), (0.68333364, 0.00999999), (0.68333364, 0.99), (0.666667, 0.00999999), (0.68333364, 0.00999999), (0.666667, 0.00999999), (0.65000033, 0.99), (0.65000033, 0.00999999), (0.65000033, 0.99), (0.6333337, 0.00999999), (0.65000033, 0.00999999), (0.6333337, 0.00999999), (0.61666703, 0.99), (0.61666703, 0.00999999), (0.61666703, 0.99), (0.6000004, 0.00999999), (0.61666703, 0.00999999), (0.6000004, 0.00999999), (0.58333373, 0.99), (0.58333373, 0.00999999), (0.58333373, 0.99), (0.5666671, 0.00999999), (0.58333373, 0.00999999), (0.5666671, 0.00999999), (0.5500004, 0.99), (0.5500004, 0.00999999), (0.5500004, 0.99), (0.5333338, 0.00999999), (0.5500004, 0.00999999), (0.5333338, 0.00999999), (0.5166671, 0.99), (0.5166671, 0.00999999), (0.5166671, 0.99), (0.5000005, 0.00999999), (0.5166671, 0.00999999), (0.5000005, 0.00999999), (0.4833338, 0.99), (0.4833338, 0.00999999), (0.4833338, 0.99), (0.46666712, 0.00999999), (0.4833338, 0.00999999), (0.46666712, 0.00999999), (0.45000044, 0.99), (0.45000044, 0.00999999), (0.45000044, 0.99), (0.43333375, 0.00999999), (0.45000044, 0.00999999), (0.43333375, 0.00999999), (0.41666707, 0.99), (0.41666707, 0.00999999), (0.41666707, 0.99), (0.4000004, 0.00999999), (0.41666707, 0.00999999), (0.4000004, 0.00999999), (0.3833337, 0.99), (0.3833337, 0.00999999), (0.3833337, 0.99), (0.36666703, 0.00999999), (0.3833337, 0.00999999), (0.36666703, 0.00999999), (0.35000035, 0.99), (0.35000035, 0.00999999), (0.35000035, 0.99), (0.33333367, 0.00999999), (0.35000035, 0.00999999), (0.33333367, 0.00999999), (0.316667, 0.99), (0.316667, 0.00999999), (0.316667, 0.99), (0.3000003, 0.00999999), (0.316667, 0.00999999), (0.3000003, 0.00999999), (0.28333363, 0.99), (0.28333363, 0.00999999), (0.28333363, 0.99), (0.26666695, 0.00999999), (0.28333363, 0.00999999), (0.26666695, 0.00999999), (0.25000027, 0.99), (0.25000027, 0.00999999), (0.25000027, 0.99), (0.2333336, 0.00999999), (0.25000027, 0.00999999), (0.2333336, 0.00999999), (0.21666694, 0.99), (0.21666694, 0.00999999), (0.21666694, 0.99), (0.20000027, 0.00999999), (0.21666694, 0.00999999), (0.20000027, 0.00999999), (0.1833336, 0.99), (0.1833336, 0.00999999), (0.1833336, 0.99), (0.16666694, 0.00999999), (0.1833336, 0.00999999), (0.16666694, 0.00999999), (0.15000027, 0.99), (0.15000027, 0.00999999), (0.15000027, 0.99), (0.13333361, 0.00999999), (0.15000027, 0.00999999), (0.13333361, 0.00999999), (0.11666694, 0.99), (0.11666694, 0.00999999), (0.11666694, 0.99), (0.10000028, 0.00999999), (0.11666694, 0.00999999), (0.10000028, 0.00999999), (0.08333361, 0.99), (0.08333361, 0.00999999), (0.08333361, 0.99), (0.066666946, 0.00999999), (0.08333361, 0.00999999), (0.066666946, 0.00999999), (0.05000028, 0.99), (0.05000028, 0.00999999), (0.05000028, 0.99), (0.033333614, 0.00999999), (0.05000028, 0.00999999), (0.033333614, 0.00999999), (0.016666947, 0.99), (0.016666947, 0.00999999), (0.016666947, 0.99), (2.7939677e-7, 0.00999999), (0.016666947, 0.00999999), (1, 0.00999999), (1, 0.99), (0.98333335, 0.99), (0.9666667, 0.00999999), (0.9666667, 0.99), (0.95000005, 0.99), (0.9333334, 0.00999999), (0.9333334, 0.99), (0.91666675, 0.99), (0.9000001, 0.00999999), (0.9000001, 0.99), (0.88333344, 0.99), (0.8666668, 0.00999999), (0.8666668, 0.99), (0.85000014, 0.99), (0.8333335, 0.00999999), (0.8333335, 0.99), (0.81666684, 0.99), (0.8000002, 0.00999999), (0.8000002, 0.99), (0.78333354, 0.99), (0.7666669, 0.00999999), (0.7666669, 0.99), (0.75000024, 0.99), (0.7333336, 0.00999999), (0.7333336, 0.99), (0.71666694, 0.99), (0.7000003, 0.00999999), (0.7000003, 0.99), (0.68333364, 0.99), (0.666667, 0.00999999), (0.666667, 0.99), (0.65000033, 0.99), (0.6333337, 0.00999999), (0.6333337, 0.99), (0.61666703, 0.99), (0.6000004, 0.00999999), (0.6000004, 0.99), (0.58333373, 0.99), (0.5666671, 0.00999999), (0.5666671, 0.99), (0.5500004, 0.99), (0.5333338, 0.00999999), (0.5333338, 0.99), (0.5166671, 0.99), (0.5000005, 0.00999999), (0.5000005, 0.99), (0.4833338, 0.99), (0.46666712, 0.00999999), (0.46666712, 0.99), (0.45000044, 0.99), (0.43333375, 0.00999999), (0.43333375, 0.99), (0.41666707, 0.99), (0.4000004, 0.00999999), (0.4000004, 0.99), (0.3833337, 0.99), (0.36666703, 0.00999999), (0.36666703, 0.99), (0.35000035, 0.99), (0.33333367, 0.00999999), (0.33333367, 0.99), (0.316667, 0.99), (0.3000003, 0.00999999), (0.3000003, 0.99), (0.28333363, 0.99), (0.26666695, 0.00999999), (0.26666695, 0.99), (0.25000027, 0.99), (0.2333336, 0.00999999), (0.2333336, 0.99), (0.21666694, 0.99), (0.20000027, 0.00999999), (0.20000027, 0.99), (0.1833336, 0.99), (0.16666694, 0.00999999), (0.16666694, 0.99), (0.15000027, 0.99), (0.13333361, 0.00999999), (0.13333361, 0.99), (0.11666694, 0.99), (0.10000028, 0.00999999), (0.10000028, 0.99), (0.08333361, 0.99), (0.066666946, 0.00999999), (0.066666946, 0.99), (0.05000028, 0.99), (0.033333614, 0.00999999), (0.033333614, 0.99), (0.016666947, 0.99), (0.98333335, 0.99), (0.9666667, 0.99), (0.9666667, 0.00999999), (0.95000005, 0.99), (0.9333334, 0.99), (0.9333334, 0.00999999), (0.91666675, 0.99), (0.9000001, 0.99), (0.9000001, 0.00999999), (0.88333344, 0.99), (0.8666668, 0.99), (0.8666668, 0.00999999), (0.85000014, 0.99), (0.8333335, 0.99), (0.8333335, 0.00999999), (0.81666684, 0.99), (0.8000002, 0.99), (0.8000002, 0.00999999), (0.78333354, 0.99), (0.7666669, 0.99), (0.7666669, 0.00999999), (0.75000024, 0.99), (0.7333336, 0.99), (0.7333336, 0.00999999), (0.71666694, 0.99), (0.7000003, 0.99), (0.7000003, 0.00999999), (0.68333364, 0.99), (0.666667, 0.99), (0.666667, 0.00999999), (0.65000033, 0.99), (0.6333337, 0.99), (0.6333337, 0.00999999), (0.61666703, 0.99), (0.6000004, 0.99), (0.6000004, 0.00999999), (0.58333373, 0.99), (0.5666671, 0.99), (0.5666671, 0.00999999), (0.5500004, 0.99), (0.5333338, 0.99), (0.5333338, 0.00999999), (0.5166671, 0.99), (0.5000005, 0.99), (0.5000005, 0.00999999), (0.4833338, 0.99), (0.46666712, 0.99), (0.46666712, 0.00999999), (0.45000044, 0.99), (0.43333375, 0.99), (0.43333375, 0.00999999), (0.41666707, 0.99), (0.4000004, 0.99), (0.4000004, 0.00999999), (0.3833337, 0.99), (0.36666703, 0.99), (0.36666703, 0.00999999), (0.35000035, 0.99), (0.33333367, 0.99), (0.33333367, 0.00999999), (0.316667, 0.99), (0.3000003, 0.99), (0.3000003, 0.00999999), (0.28333363, 0.99), (0.26666695, 0.99), (0.26666695, 0.00999999), (0.25000027, 0.99), (0.2333336, 0.99), (0.2333336, 0.00999999), (0.21666694, 0.99), (0.20000027, 0.99), (0.20000027, 0.00999999), (0.1833336, 0.99), (0.16666694, 0.99), (0.16666694, 0.00999999), (0.15000027, 0.99), (0.13333361, 0.99), (0.13333361, 0.00999999), (0.11666694, 0.99), (0.10000028, 0.99), (0.10000028, 0.00999999), (0.08333361, 0.99), (0.066666946, 0.99), (0.066666946, 0.00999999), (0.05000028, 0.99), (0.033333614, 0.99), (0.033333614, 0.00999999), (0.016666947, 0.99), (2.7939677e-7, 0.99), (2.7939677e-7, 0.00999999)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            custom string userProperties:blenderName:data = "ColorWheel"
        }
    }

    def Xform "ColorWheel_Smooth" (
        prepend apiSchemas = ["MaterialBindingAPI"]
    )
    {
        rel material:binding = </root/Looks/ColorWheel_30_Smooth> (
            bindMaterialAs = "weakerThanDescendants"
        )
        float3 xformOp:rotateXYZ = (0, 0, 0)
        float3 xformOp:scale = (0.5, 0.5, 0.5)
        double3 xformOp:translate = (0, 50, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def Mesh "ColorWheel" (
            active = true
        )
        {
            float3[] extent = [(-50, -50, -0.0000019073486), (50, 50, 0.0000019073486)]
            int[] faceVertexCounts = [3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3, 3]
            int[] faceVertexIndices = [0, 3, 2, 3, 4, 2, 4, 7, 6, 7, 8, 6, 8, 11, 10, 11, 12, 10, 12, 15, 14, 15, 16, 14, 16, 19, 18, 19, 20, 18, 20, 23, 22, 23, 24, 22, 24, 27, 26, 27, 28, 26, 28, 31, 30, 31, 32, 30, 32, 35, 34, 35, 36, 34, 36, 39, 38, 39, 40, 38, 40, 43, 42, 43, 44, 42, 44, 47, 46, 47, 48, 46, 48, 51, 50, 51, 52, 50, 52, 55, 54, 55, 56, 54, 56, 59, 58, 59, 60, 58, 60, 63, 62, 63, 64, 62, 64, 67, 66, 67, 68, 66, 68, 71, 70, 71, 72, 70, 72, 75, 74, 75, 76, 74, 76, 79, 78, 79, 80, 78, 80, 83, 82, 83, 84, 82, 84, 87, 86, 87, 88, 86, 88, 91, 90, 91, 92, 90, 92, 95, 94, 95, 96, 94, 96, 99, 98, 99, 100, 98, 100, 103, 102, 103, 104, 102, 104, 107, 106, 107, 108, 106, 108, 111, 110, 111, 112, 110, 112, 115, 114, 115, 116, 114, 116, 119, 118, 119, 0, 118, 0, 1, 3, 4, 5, 7, 8, 9, 11, 12, 13, 15, 16, 17, 19, 20, 21, 23, 24, 25, 27, 28, 29, 31, 32, 33, 35, 36, 37, 39, 40, 41, 43, 44, 45, 47, 48, 49, 51, 52, 53, 55, 56, 57, 59, 60, 61, 63, 64, 65, 67, 68, 69, 71, 72, 73, 75, 76, 77, 79, 80, 81, 83, 84, 85, 87, 88, 89, 91, 92, 93, 95, 96, 97, 99, 100, 101, 103, 104, 105, 107, 108, 109, 111, 112, 113, 115, 116, 117, 119, 3, 5, 4, 7, 9, 8, 11, 13, 12, 15, 17, 16, 19, 21, 20, 23, 25, 24, 27, 29, 28, 31, 33, 32, 35, 37, 36, 39, 41, 40, 43, 45, 44, 47, 49, 48, 51, 53, 52, 55, 57, 56, 59, 61, 60, 63, 65, 64, 67, 69, 68, 71, 73, 72, 75, 77, 76, 79, 81, 80, 83, 85, 84, 87, 89, 88, 91, 93, 92, 95, 97, 96, 99, 101, 100, 103, 105, 104, 107, 109, 108, 111, 113, 112, 115, 117, 116, 119, 1, 0]
            normal3f[] normals = [(3.998362e-9, 7.629396e-8, 1), (3.998362e-9, 7.629396e-8, 1), (3.998362e-9, 7.629396e-8, 1), (1.19513714e-8, 7.545804e-8, 1), (1.19513714e-8, 7.545804e-8, 1), (1.19513714e-8, 7.545804e-8, 1), (1.9773465e-8, 7.379543e-8, 1), (1.9773465e-8, 7.379543e-8, 1), (1.9773465e-8, 7.379543e-8, 1), (2.7378832e-8, 7.132427e-8, 1), (2.7378832e-8, 7.132427e-8, 1), (2.7378832e-8, 7.132427e-8, 1), (3.4684284e-8, 6.80717e-8, 1), (3.4684284e-8, 6.80717e-8, 1), (3.4684284e-8, 6.80717e-8, 1), (4.160965e-8, 6.4073305e-8, 1), (4.160965e-8, 6.4073305e-8, 1), (4.160965e-8, 6.4073305e-8, 1), (4.8079244e-8, 5.937291e-8, 1), (4.8079244e-8, 5.937291e-8, 1), (4.8079244e-8, 5.937291e-8, 1), (5.4022003e-8, 5.4022003e-8, 1), (5.4022003e-8, 5.4022003e-8, 1), (5.4022003e-8, 5.4022003e-8, 1), (5.937288e-8, 4.807922e-8, 1), (5.937288e-8, 4.807922e-8, 1), (5.937288e-8, 4.807922e-8, 1), (6.4073326e-8, 4.1609663e-8, 1), (6.4073326e-8, 4.1609663e-8, 1), (6.4073326e-8, 4.1609663e-8, 1), (6.807168e-8, 3.4684277e-8, 1), (6.807168e-8, 3.4684277e-8, 1), (6.807168e-8, 3.4684277e-8, 1), (7.1324294e-8, 2.7378828e-8, 1), (7.1324294e-8, 2.7378828e-8, 1), (7.1324294e-8, 2.7378828e-8, 1), (7.37954e-8, 1.9773461e-8, 1), (7.37954e-8, 1.9773461e-8, 1), (7.37954e-8, 1.9773461e-8, 1), (7.545807e-8, 1.1951374e-8, 1), (7.545807e-8, 1.1951374e-8, 1), (7.545807e-8, 1.1951374e-8, 1), (7.629395e-8, 3.9983625e-9, 1), (7.629395e-8, 3.9983625e-9, 1), (7.629395e-8, 3.9983625e-9, 1), (7.6293944e-8, -3.9983616e-9, 1), (7.6293944e-8, -3.9983616e-9, 1), (7.6293944e-8, -3.9983616e-9, 1), (7.545805e-8, -1.195137e-8, 1), (7.545805e-8, -1.195137e-8, 1), (7.545805e-8, -1.195137e-8, 1), (7.379541e-8, -1.9773461e-8, 1), (7.379541e-8, -1.9773461e-8, 1), (7.379541e-8, -1.9773461e-8, 1), (7.1324294e-8, -2.7378828e-8, 1), (7.1324294e-8, -2.7378828e-8, 1), (7.1324294e-8, -2.7378828e-8, 1), (6.807168e-8, -3.4684277e-8, 1), (6.807168e-8, -3.4684277e-8, 1), (6.807168e-8, -3.4684277e-8, 1), (6.407333e-8, -4.160967e-8, 1), (6.407333e-8, -4.160967e-8, 1), (6.407333e-8, -4.160967e-8, 1), (5.937288e-8, -4.807922e-8, 1), (5.937288e-8, -4.807922e-8, 1), (5.937288e-8, -4.807922e-8, 1), (5.4022003e-8, -5.4022003e-8, 1), (5.4022003e-8, -5.4022003e-8, 1), (5.4022003e-8, -5.4022003e-8, 1), (4.8079244e-8, -5.937291e-8, 1), (4.8079244e-8, -5.937291e-8, 1), (4.8079244e-8, -5.937291e-8, 1), (4.160965e-8, -6.4073305e-8, 1), (4.160965e-8, -6.4073305e-8, 1), (4.160965e-8, -6.4073305e-8, 1), (3.468428e-8, -6.807169e-8, 1), (3.468428e-8, -6.807169e-8, 1), (3.468428e-8, -6.807169e-8, 1), (2.7378832e-8, -7.132427e-8, 1), (2.7378832e-8, -7.132427e-8, 1), (2.7378832e-8, -7.132427e-8, 1), (1.9773463e-8, -7.379542e-8, 1), (1.9773463e-8, -7.379542e-8, 1), (1.9773463e-8, -7.379542e-8, 1), (1.19513714e-8, -7.545804e-8, 1), (1.19513714e-8, -7.545804e-8, 1), (1.19513714e-8, -7.545804e-8, 1), (3.998362e-9, -7.629396e-8, 1), (3.998362e-9, -7.629396e-8, 1), (3.998362e-9, -7.629396e-8, 1), (-3.998362e-9, -7.629394e-8, 1), (-3.998362e-9, -7.629394e-8, 1), (-3.998362e-9, -7.629394e-8, 1), (-1.1951368e-8, -7.545804e-8, 1), (-1.1951368e-8, -7.545804e-8, 1), (-1.1951368e-8, -7.545804e-8, 1), (-1.977347e-8, -7.3795434e-8, 1), (-1.977347e-8, -7.3795434e-8, 1), (-1.977347e-8, -7.3795434e-8, 1), (-2.7378812e-8, -7.132428e-8, 1), (-2.7378812e-8, -7.132428e-8, 1), (-2.7378812e-8, -7.132428e-8, 1), (-3.4684266e-8, -6.8071664e-8, 1), (-3.4684266e-8, -6.8071664e-8, 1), (-3.4684266e-8, -6.8071664e-8, 1), (-4.160967e-8, -6.407333e-8, 1), (-4.160967e-8, -6.407333e-8, 1), (-4.160967e-8, -6.407333e-8, 1), (-4.8079244e-8, -5.937291e-8, 1), (-4.8079244e-8, -5.937291e-8, 1), (-4.8079244e-8, -5.937291e-8, 1), (-5.4022003e-8, -5.4022003e-8, 1), (-5.4022003e-8, -5.4022003e-8, 1), (-5.4022003e-8, -5.4022003e-8, 1), (-5.937288e-8, -4.807922e-8, 1), (-5.937288e-8, -4.807922e-8, 1), (-5.937288e-8, -4.807922e-8, 1), (-6.4073326e-8, -4.1609663e-8, 1), (-6.4073326e-8, -4.1609663e-8, 1), (-6.4073326e-8, -4.1609663e-8, 1), (-6.807168e-8, -3.4684277e-8, 1), (-6.807168e-8, -3.4684277e-8, 1), (-6.807168e-8, -3.4684277e-8, 1), (-7.1324294e-8, -2.7378828e-8, 1), (-7.1324294e-8, -2.7378828e-8, 1), (-7.1324294e-8, -2.7378828e-8, 1), (-7.37954e-8, -1.9773458e-8, 1), (-7.37954e-8, -1.9773458e-8, 1), (-7.37954e-8, -1.9773458e-8, 1), (-7.545805e-8, -1.195137e-8, 1), (-7.545805e-8, -1.195137e-8, 1), (-7.545805e-8, -1.195137e-8, 1), (-7.6293944e-8, -3.9983616e-9, 1), (-7.6293944e-8, -3.9983616e-9, 1), (-7.6293944e-8, -3.9983616e-9, 1), (-7.629395e-8, 3.9983625e-9, 1), (-7.629395e-8, 3.9983625e-9, 1), (-7.629395e-8, 3.9983625e-9, 1), (-7.5458054e-8, 1.1951372e-8, 1), (-7.5458054e-8, 1.1951372e-8, 1), (-7.5458054e-8, 1.1951372e-8, 1), (-7.3795405e-8, 1.9773463e-8, 1), (-7.3795405e-8, 1.9773463e-8, 1), (-7.3795405e-8, 1.9773463e-8, 1), (-7.1324294e-8, 2.7378828e-8, 1), (-7.1324294e-8, 2.7378828e-8, 1), (-7.1324294e-8, 2.7378828e-8, 1), (-6.807168e-8, 3.4684277e-8, 1), (-6.807168e-8, 3.4684277e-8, 1), (-6.807168e-8, 3.4684277e-8, 1), (-6.407333e-8, 4.160967e-8, 1), (-6.407333e-8, 4.160967e-8, 1), (-6.407333e-8, 4.160967e-8, 1), (-5.937288e-8, 4.807922e-8, 1), (-5.937288e-8, 4.807922e-8, 1), (-5.937288e-8, 4.807922e-8, 1), (-5.4022003e-8, 5.4022003e-8, 1), (-5.4022003e-8, 5.4022003e-8, 1), (-5.4022003e-8, 5.4022003e-8, 1), (-4.8079244e-8, 5.937291e-8, 1), (-4.8079244e-8, 5.937291e-8, 1), (-4.8079244e-8, 5.937291e-8, 1), (-4.160967e-8, 6.407333e-8, 1), (-4.160967e-8, 6.407333e-8, 1), (-4.160967e-8, 6.407333e-8, 1), (-3.468427e-8, 6.807167e-8, 1), (-3.468427e-8, 6.807167e-8, 1), (-3.468427e-8, 6.807167e-8, 1), (-2.7378812e-8, 7.132428e-8, 1), (-2.7378812e-8, 7.132428e-8, 1), (-2.7378812e-8, 7.132428e-8, 1), (-1.9773468e-8, 7.379542e-8, 1), (-1.9773468e-8, 7.379542e-8, 1), (-1.9773468e-8, 7.379542e-8, 1), (-1.1951368e-8, 7.545804e-8, 1), (-1.1951368e-8, 7.545804e-8, 1), (-1.1951368e-8, 7.545804e-8, 1), (-3.998362e-9, 7.629394e-8, 1), (-3.998362e-9, 7.629394e-8, 1), (-3.998362e-9, 7.629394e-8, 1), (0, 7.629401e-8, 1), (0, 7.629401e-8, 1), (0, 7.629401e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 5.9604645e-8, 1), (0, 5.9604645e-8, 1), (0, 5.9604645e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-5.9604645e-8, 0, -1), (-5.9604645e-8, 0, -1), (-5.9604645e-8, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 7.629401e-8, -1), (0, 7.629401e-8, -1), (0, 7.629401e-8, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0.98650473, -0.1637324), (0, 0.98650473, -0.1637324), (0, 0.98650473, -0.1637324), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (-1, 0, 0), (-1, 0, 0), (-1, 0, 0), (-5.9604645e-8, 0, 1), (-5.9604645e-8, 0, 1), (-5.9604645e-8, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, -1), (0, 0, -1), (0, 0, -1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (5.9604645e-8, 0, 1), (5.9604645e-8, 0, 1), (5.9604645e-8, 0, 1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -5.9604645e-8, 1), (0, -5.9604645e-8, 1), (0, -5.9604645e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -7.629401e-8, 1), (0, -7.629401e-8, 1), (0, -7.629401e-8, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (5.9604645e-8, 0, -1), (5.9604645e-8, 0, -1), (5.9604645e-8, 0, -1), (1, 0, 0), (1, 0, 0), (1, 0, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -1, 0), (0, -1, 0), (0, -1, 0), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, 0, 1), (0, -7.629401e-8, -1), (0, -7.629401e-8, -1), (0, -7.629401e-8, -1)] (
                interpolation = "faceVarying"
            )
            point3f[] points = [(2.8175612e-7, 50, -0.0000019073486), (-6.6757207e-7, 3.165669e-7, 0.0000019073486), (5.226424, 49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486), (10.395586, 48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (15.450851, 47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (20.336834, 45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (25, 43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (29.389263, 40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (33.45653, 37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (37.15724, 33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (40.45085, 29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (43.30127, 25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (45.677273, 20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (47.552826, 15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (48.907383, 10.395586, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (49.726097, 5.226424, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (50, 9.980467e-7, -0.0000019073486), (7.8678136e-7, -1.3245653e-9, 0.0000019073486), (49.726097, -5.226423, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (48.907383, -10.395585, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (47.552826, -15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (45.677273, -20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (43.30127, -25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (40.45085, -29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (37.15724, -33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (33.45653, -37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (29.389263, -40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (25, -43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (20.336834, -45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (15.450851, -47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (10.395586, -48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (5.226424, -49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486), (2.8175612e-7, -50, -0.0000019073486), (-6.6757207e-7, 3.165669e-7, 0.0000019073486), (-5.226423, -49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486), (-10.395585, -48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-15.45085, -47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-20.336834, -45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-25, -43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-29.389263, -40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-33.45653, -37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-37.15724, -33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-40.45085, -29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-43.30127, -25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-45.677273, -20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-47.552826, -15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-48.907383, -10.395585, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-49.726097, -5.226423, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (-50, 9.980467e-7, -0.0000019073486), (7.8678136e-7, -1.3245653e-9, 0.0000019073486), (-49.726097, 5.226424, -0.0000019073486), (7.8678136e-7, -1.6027023e-7, 0.0000019073486), (-48.907383, 10.395586, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-47.552826, 15.4508505, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-45.677273, 20.336834, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-43.30127, 25, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-40.45085, 29.389263, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-37.15724, 33.45653, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-33.45653, 37.15724, -0.0000019073486), (7.8678136e-7, 3.165669e-7, 0.0000019073486), (-29.389263, 40.45085, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-25, 43.30127, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-20.336834, 45.677273, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-15.45085, 47.552826, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-10.395585, 48.907383, -0.0000019073486), (-0.0000011205673, 3.165669e-7, 0.0000019073486), (-5.226423, 49.726097, -0.0000019073486), (-6.437301e-7, 3.165669e-7, 0.0000019073486)]
            bool primvars:disableRtSssTransmission = 1
            bool primvars:doNotCastShadows = 1
            bool primvars:enableShadowTerminatorFix = 1
            bool primvars:invisibleToSecondaryRays = 1
            bool[] primvars:sharp_face = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1] (
                interpolation = "uniform"
            )
            texCoord2f[] primvars:st = [(1, 0.00999999), (0.98333335, 0.99), (0.98333335, 0.00999999), (0.98333335, 0.99), (0.9666667, 0.00999999), (0.98333335, 0.00999999), (0.9666667, 0.00999999), (0.95000005, 0.99), (0.95000005, 0.00999999), (0.95000005, 0.99), (0.9333334, 0.00999999), (0.95000005, 0.00999999), (0.9333334, 0.00999999), (0.91666675, 0.99), (0.91666675, 0.00999999), (0.91666675, 0.99), (0.9000001, 0.00999999), (0.91666675, 0.00999999), (0.9000001, 0.00999999), (0.88333344, 0.99), (0.88333344, 0.00999999), (0.88333344, 0.99), (0.8666668, 0.00999999), (0.88333344, 0.00999999), (0.8666668, 0.00999999), (0.85000014, 0.99), (0.85000014, 0.00999999), (0.85000014, 0.99), (0.8333335, 0.00999999), (0.85000014, 0.00999999), (0.8333335, 0.00999999), (0.81666684, 0.99), (0.81666684, 0.00999999), (0.81666684, 0.99), (0.8000002, 0.00999999), (0.81666684, 0.00999999), (0.8000002, 0.00999999), (0.78333354, 0.99), (0.78333354, 0.00999999), (0.78333354, 0.99), (0.7666669, 0.00999999), (0.78333354, 0.00999999), (0.7666669, 0.00999999), (0.75000024, 0.99), (0.75000024, 0.00999999), (0.75000024, 0.99), (0.7333336, 0.00999999), (0.75000024, 0.00999999), (0.7333336, 0.00999999), (0.71666694, 0.99), (0.71666694, 0.00999999), (0.71666694, 0.99), (0.7000003, 0.00999999), (0.71666694, 0.00999999), (0.7000003, 0.00999999), (0.68333364, 0.99), (0.68333364, 0.00999999), (0.68333364, 0.99), (0.666667, 0.00999999), (0.68333364, 0.00999999), (0.666667, 0.00999999), (0.65000033, 0.99), (0.65000033, 0.00999999), (0.65000033, 0.99), (0.6333337, 0.00999999), (0.65000033, 0.00999999), (0.6333337, 0.00999999), (0.61666703, 0.99), (0.61666703, 0.00999999), (0.61666703, 0.99), (0.6000004, 0.00999999), (0.61666703, 0.00999999), (0.6000004, 0.00999999), (0.58333373, 0.99), (0.58333373, 0.00999999), (0.58333373, 0.99), (0.5666671, 0.00999999), (0.58333373, 0.00999999), (0.5666671, 0.00999999), (0.5500004, 0.99), (0.5500004, 0.00999999), (0.5500004, 0.99), (0.5333338, 0.00999999), (0.5500004, 0.00999999), (0.5333338, 0.00999999), (0.5166671, 0.99), (0.5166671, 0.00999999), (0.5166671, 0.99), (0.5000005, 0.00999999), (0.5166671, 0.00999999), (0.5000005, 0.00999999), (0.4833338, 0.99), (0.4833338, 0.00999999), (0.4833338, 0.99), (0.46666712, 0.00999999), (0.4833338, 0.00999999), (0.46666712, 0.00999999), (0.45000044, 0.99), (0.45000044, 0.00999999), (0.45000044, 0.99), (0.43333375, 0.00999999), (0.45000044, 0.00999999), (0.43333375, 0.00999999), (0.41666707, 0.99), (0.41666707, 0.00999999), (0.41666707, 0.99), (0.4000004, 0.00999999), (0.41666707, 0.00999999), (0.4000004, 0.00999999), (0.3833337, 0.99), (0.3833337, 0.00999999), (0.3833337, 0.99), (0.36666703, 0.00999999), (0.3833337, 0.00999999), (0.36666703, 0.00999999), (0.35000035, 0.99), (0.35000035, 0.00999999), (0.35000035, 0.99), (0.33333367, 0.00999999), (0.35000035, 0.00999999), (0.33333367, 0.00999999), (0.316667, 0.99), (0.316667, 0.00999999), (0.316667, 0.99), (0.3000003, 0.00999999), (0.316667, 0.00999999), (0.3000003, 0.00999999), (0.28333363, 0.99), (0.28333363, 0.00999999), (0.28333363, 0.99), (0.26666695, 0.00999999), (0.28333363, 0.00999999), (0.26666695, 0.00999999), (0.25000027, 0.99), (0.25000027, 0.00999999), (0.25000027, 0.99), (0.2333336, 0.00999999), (0.25000027, 0.00999999), (0.2333336, 0.00999999), (0.21666694, 0.99), (0.21666694, 0.00999999), (0.21666694, 0.99), (0.20000027, 0.00999999), (0.21666694, 0.00999999), (0.20000027, 0.00999999), (0.1833336, 0.99), (0.1833336, 0.00999999), (0.1833336, 0.99), (0.16666694, 0.00999999), (0.1833336, 0.00999999), (0.16666694, 0.00999999), (0.15000027, 0.99), (0.15000027, 0.00999999), (0.15000027, 0.99), (0.13333361, 0.00999999), (0.15000027, 0.00999999), (0.13333361, 0.00999999), (0.11666694, 0.99), (0.11666694, 0.00999999), (0.11666694, 0.99), (0.10000028, 0.00999999), (0.11666694, 0.00999999), (0.10000028, 0.00999999), (0.08333361, 0.99), (0.08333361, 0.00999999), (0.08333361, 0.99), (0.066666946, 0.00999999), (0.08333361, 0.00999999), (0.066666946, 0.00999999), (0.05000028, 0.99), (0.05000028, 0.00999999), (0.05000028, 0.99), (0.033333614, 0.00999999), (0.05000028, 0.00999999), (0.033333614, 0.00999999), (0.016666947, 0.99), (0.016666947, 0.00999999), (0.016666947, 0.99), (2.7939677e-7, 0.00999999), (0.016666947, 0.00999999), (1, 0.00999999), (1, 0.99), (0.98333335, 0.99), (0.9666667, 0.00999999), (0.9666667, 0.99), (0.95000005, 0.99), (0.9333334, 0.00999999), (0.9333334, 0.99), (0.91666675, 0.99), (0.9000001, 0.00999999), (0.9000001, 0.99), (0.88333344, 0.99), (0.8666668, 0.00999999), (0.8666668, 0.99), (0.85000014, 0.99), (0.8333335, 0.00999999), (0.8333335, 0.99), (0.81666684, 0.99), (0.8000002, 0.00999999), (0.8000002, 0.99), (0.78333354, 0.99), (0.7666669, 0.00999999), (0.7666669, 0.99), (0.75000024, 0.99), (0.7333336, 0.00999999), (0.7333336, 0.99), (0.71666694, 0.99), (0.7000003, 0.00999999), (0.7000003, 0.99), (0.68333364, 0.99), (0.666667, 0.00999999), (0.666667, 0.99), (0.65000033, 0.99), (0.6333337, 0.00999999), (0.6333337, 0.99), (0.61666703, 0.99), (0.6000004, 0.00999999), (0.6000004, 0.99), (0.58333373, 0.99), (0.5666671, 0.00999999), (0.5666671, 0.99), (0.5500004, 0.99), (0.5333338, 0.00999999), (0.5333338, 0.99), (0.5166671, 0.99), (0.5000005, 0.00999999), (0.5000005, 0.99), (0.4833338, 0.99), (0.46666712, 0.00999999), (0.46666712, 0.99), (0.45000044, 0.99), (0.43333375, 0.00999999), (0.43333375, 0.99), (0.41666707, 0.99), (0.4000004, 0.00999999), (0.4000004, 0.99), (0.3833337, 0.99), (0.36666703, 0.00999999), (0.36666703, 0.99), (0.35000035, 0.99), (0.33333367, 0.00999999), (0.33333367, 0.99), (0.316667, 0.99), (0.3000003, 0.00999999), (0.3000003, 0.99), (0.28333363, 0.99), (0.26666695, 0.00999999), (0.26666695, 0.99), (0.25000027, 0.99), (0.2333336, 0.00999999), (0.2333336, 0.99), (0.21666694, 0.99), (0.20000027, 0.00999999), (0.20000027, 0.99), (0.1833336, 0.99), (0.16666694, 0.00999999), (0.16666694, 0.99), (0.15000027, 0.99), (0.13333361, 0.00999999), (0.13333361, 0.99), (0.11666694, 0.99), (0.10000028, 0.00999999), (0.10000028, 0.99), (0.08333361, 0.99), (0.066666946, 0.00999999), (0.066666946, 0.99), (0.05000028, 0.99), (0.033333614, 0.00999999), (0.033333614, 0.99), (0.016666947, 0.99), (0.98333335, 0.99), (0.9666667, 0.99), (0.9666667, 0.00999999), (0.95000005, 0.99), (0.9333334, 0.99), (0.9333334, 0.00999999), (0.91666675, 0.99), (0.9000001, 0.99), (0.9000001, 0.00999999), (0.88333344, 0.99), (0.8666668, 0.99), (0.8666668, 0.00999999), (0.85000014, 0.99), (0.8333335, 0.99), (0.8333335, 0.00999999), (0.81666684, 0.99), (0.8000002, 0.99), (0.8000002, 0.00999999), (0.78333354, 0.99), (0.7666669, 0.99), (0.7666669, 0.00999999), (0.75000024, 0.99), (0.7333336, 0.99), (0.7333336, 0.00999999), (0.71666694, 0.99), (0.7000003, 0.99), (0.7000003, 0.00999999), (0.68333364, 0.99), (0.666667, 0.99), (0.666667, 0.00999999), (0.65000033, 0.99), (0.6333337, 0.99), (0.6333337, 0.00999999), (0.61666703, 0.99), (0.6000004, 0.99), (0.6000004, 0.00999999), (0.58333373, 0.99), (0.5666671, 0.99), (0.5666671, 0.00999999), (0.5500004, 0.99), (0.5333338, 0.99), (0.5333338, 0.00999999), (0.5166671, 0.99), (0.5000005, 0.99), (0.5000005, 0.00999999), (0.4833338, 0.99), (0.46666712, 0.99), (0.46666712, 0.00999999), (0.45000044, 0.99), (0.43333375, 0.99), (0.43333375, 0.00999999), (0.41666707, 0.99), (0.4000004, 0.99), (0.4000004, 0.00999999), (0.3833337, 0.99), (0.36666703, 0.99), (0.36666703, 0.00999999), (0.35000035, 0.99), (0.33333367, 0.99), (0.33333367, 0.00999999), (0.316667, 0.99), (0.3000003, 0.99), (0.3000003, 0.00999999), (0.28333363, 0.99), (0.26666695, 0.99), (0.26666695, 0.00999999), (0.25000027, 0.99), (0.2333336, 0.99), (0.2333336, 0.00999999), (0.21666694, 0.99), (0.20000027, 0.99), (0.20000027, 0.00999999), (0.1833336, 0.99), (0.16666694, 0.99), (0.16666694, 0.00999999), (0.15000027, 0.99), (0.13333361, 0.99), (0.13333361, 0.00999999), (0.11666694, 0.99), (0.10000028, 0.99), (0.10000028, 0.00999999), (0.08333361, 0.99), (0.066666946, 0.99), (0.066666946, 0.00999999), (0.05000028, 0.99), (0.033333614, 0.99), (0.033333614, 0.00999999), (0.016666947, 0.99), (2.7939677e-7, 0.99), (2.7939677e-7, 0.00999999)] (
                interpolation = "faceVarying"
            )
            uniform token subdivisionScheme = "none"
            custom string userProperties:blenderName:data = "ColorWheel"
        }
    }
}

