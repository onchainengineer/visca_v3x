#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (92.73651061883157, 152.7188097475243, 266.0185914434871)
                double3 target = (-48.68445094335382, 58.1525343649573, -119.71197673084461)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            int "rtx:hydra:curves:splits" = 2
            double "rtx:hydra:points:defaultWidth" = 1
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 52
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            double "rtx:sceneDb:ambientLightIntensity" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    color3f primvars:GlassesColor = (0.9, 0.7, 0.35)
    color3f primvars:HairColor = (0.05, 0.05, 0.05)
    color3f primvars:HatColor = (0.15, 0.03, 0.1)
    color3f primvars:OutfitColor1 = (0.6, 0.5, 0.7)
    color3f primvars:OutfitColor2 = (0.05, 0.06, 0.1)
    color3f primvars:ShoeColor1 = (0.2, 0.1, 0.08)
    color3f primvars:ShoeColor2 = (0.05, 0.06, 0.1)

    def Xform "LookAtTarget"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 200, 300)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "transfer_data"
    {
    }

    def Scope "Looks" (
        variants = {
            string eyeVariant = "darkbrown"
            string skinVariant = "medium"
        }
        prepend variantSets = "skinVariant"
        append variantSets = "eyeVariant"
    )
    {
        def Material "BeltBuckle"
        {
            token outputs:mdl:surface.connect = </World/Looks/BeltBuckle/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/BeltBuckle/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "BeltBuckle"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 0.5 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./textures/Pants_Formal_NORM.jpg@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 1 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./textures/Pants_Formal_Roughness.jpg@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @../Ted/textures/FancyPants_DIF.png@
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </World/Looks/BeltBuckle/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "Glasses"
        {
            token outputs:mdl:surface.connect = </World/Looks/Glasses/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Glasses/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Glasses"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0.02 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.2 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/Glasses/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "ShoeSole2"
        {
            token outputs:mdl:surface.connect = </World/Looks/ShoeSole2/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/ShoeSole2/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "ShoeSole2"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.jpg@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (0.05, 0.05, 0.05) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.jpg@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 1 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.jpg@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @./textures/GuyShoes_Albedo.jpg@
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </World/Looks/ShoeSole2/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "cornea"
        {
            token outputs:mdl:surface.connect = </World/Looks/cornea/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/cornea/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "cornea"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.5 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @../_general/Cornea_NORM.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/cornea/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "UVMap"
                    float2 outputs:result
                }
            }
        }

        def Material "Hoodie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Pants_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:detail_normalmap_texture = @../_general/Polyester_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (20, 20) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Pants_Casual_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.84 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-892.5756, 147.44347)
            }
        }

        def Material "Socks"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Socks/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Socks/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Socks/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Socks/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "DressShirt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DressShirt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DressShirt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DressShirt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DressShirt/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                float inputs:reflection_roughness_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }

        def Material "Pants_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Pants_Formal_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Pants_Formal_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "Shirt_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.19999999 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @../_general/Polyester_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (15, 15) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shirt_Casual_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.95 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float2 inputs:texture_scale = (1, 1) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Texture Scale"
                    doc = "Larger number increases size of texture."
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-862.11914, 126.450386)
            }
        }

        def Material "Shoes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shoes/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shoes/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "ShoeLaces"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeLaces/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeLaces/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeLaces/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeLaces/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "EyeBrowLashes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.39999998 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/EyeBrowsLashes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/EyeBrowLashes/data_lookup_color.outputs:out>
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/EyeBrowsLashes_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:opacity_constant = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                asset inputs:opacity_texture = @../_general/EyeBrowsLashes_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.75 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-831.58685, 87.93512)
            }
        }

        def Material "Glasses_Frame"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Glasses_Frame/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )               
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "Glasses_Frame_BehindEar"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glasses_Frame_BehindEar/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glasses_Frame_BehindEar/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glasses_Frame_BehindEar/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.4, 0.4, 0.4) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Glasses_Frame_BehindEar/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )               
                float inputs:metallic_constant = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "ChefsHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ChefsHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8996139, 0.8996049, 0.8996049) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ChefsHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/ChefsHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-816.19147, 21.44432)
            }
        }

        def Material "DriversHat_Branded"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DriversHat_Branded/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-986.63086, 83.60689)
            }
        }

        def Material "DriversHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @../_general/DriversHat_Metal.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }
        }

        def Material "BaseballCap"
        {
            token outputs:mdl:displacement.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/BaseballCap/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/BaseballCap_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/BaseballCap/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/BaseballCap_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-930.96375, 160.52206)
            }
        }

        def Material "ShoeSole1"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeSole1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeSole1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeSole1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeSole1/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "Belt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Belt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Belt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Belt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../Ted/textures/FancyPants_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Belt/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Pants_Formal_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "NameTag"
        {
            token outputs:mdl:surface.connect = </World/Looks/NameTag/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/NameTag/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "NameTag"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.3 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/NameTag/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "Branding"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Branding/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                int inputs:opacity_mode = 0 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Hoodie_Secondary"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie_Secondary/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Hair_Short"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hair_Short/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hair_Short/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hair_Short/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurface.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurface"
                color3f inputs:diffuse_reflection_color = (0.045, 0.04, 0.035) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Base"
                    displayName = "Color"
                    hidden = false
                )
                float inputs:diffuse_reflection_weight = 1 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:enable_diffuse_transmission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Subsurface"
                    displayName = "Enable Subsurface"
                    doc = "Enables the use of subsurface"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_specular_transmission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Transmission"
                    displayName = "Enable Transmission"
                    doc = "Enables the use of transmission"
                    hidden = false
                )
                asset inputs:geometry_normal_image = @./textures/Curls_Short_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Map Image"
                    hidden = false
                )
                bool inputs:geometry_normal_image_flip_g_channel = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Normal Map Flip G Channel"
                    hidden = false
                )
                float inputs:geometry_normal_strength = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Strength"
                    hidden = false
                )
                float inputs:geometry_opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity"
                    hidden = false
                )
                asset inputs:geometry_opacity_image = @./textures/Curls_Short_Alpha.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image"
                    hidden = false
                )
                int inputs:geometry_opacity_image_alpha_mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image Alpha Mode"
                    hidden = false
                    renderType = "::OmniSurface::OmniImage::alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                float inputs:geometry_opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Threshold"
                    doc = "If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:specular_reflection_ior = 1.55 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "IOR"
                    hidden = false
                )
                float inputs:specular_reflection_roughness = 0.7 (
                    customData = {
                        float default = 0.2
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness"
                    hidden = false
                )
                float inputs:specular_reflection_weight = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:specular_transmission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Transmission"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:subsurface_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 10
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Scale"
                    hidden = false
                )
                color3f inputs:subsurface_scattering_color = (1, 0.9837925, 0.9471947) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Radius (mfp)"
                    hidden = false
                )
                color3f inputs:subsurface_transmission_color = (0.99999315, 0.99999, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color"
                    hidden = false
                )
                color3f inputs:subsurface_transmission_color.connect = </World/Looks/Hair_Short/data_lookup_color.outputs:out>
                asset inputs:subsurface_transmission_color_image = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color Image"
                    hidden = false
                )
                float inputs:subsurface_weight = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:subsurface_weight_image = @./textures/Curls_Short_SSSMix.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight Image"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Thin Walled"
                    doc = "Thin surface with no interior."
                    hidden = false
                )
                float3 inputs:uvw_projection_scale = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale"
                    doc = "Scale the projected texture."
                    hidden = false
                )
                float inputs:uvw_s_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 100
                            float min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale U"
                    hidden = false
                )
                float inputs:uvw_t_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 100
                            float min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale V"
                    hidden = false
                )
                token outputs:out
                color3f subsurface_transmission_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-512.9804, 21.023666)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-893.928, 1140.235)
            }
        }

        def Material "Hair_Long"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hair_Long/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hair_Long/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hair_Long/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurface.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurface"
                color3f inputs:diffuse_reflection_color = (0.045, 0.04, 0.035) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Base"
                    displayName = "Color"
                    hidden = false
                )
                float inputs:diffuse_reflection_weight = 1 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:enable_diffuse_transmission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Subsurface"
                    displayName = "Enable Subsurface"
                    doc = "Enables the use of subsurface"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_specular_transmission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Transmission"
                    displayName = "Enable Transmission"
                    doc = "Enables the use of transmission"
                    hidden = false
                )
                asset inputs:geometry_normal_image = @./textures/Curls_Long_Normal.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Map Image"
                    hidden = false
                )
                bool inputs:geometry_normal_image_flip_g_channel = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Normal Map Flip G Channel"
                    hidden = false
                )
                float inputs:geometry_normal_strength = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Strength"
                    hidden = false
                )
                float inputs:geometry_opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity"
                    hidden = false
                )
                asset inputs:geometry_opacity_image = @./textures/Curls_Long_Alpha.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image"
                    hidden = false
                )
                int inputs:geometry_opacity_image_alpha_mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image Alpha Mode"
                    hidden = false
                    renderType = "::OmniSurface::OmniImage::alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                float inputs:geometry_opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Threshold"
                    doc = "If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:specular_reflection_ior = 1.55 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "IOR"
                    hidden = false
                )
                float inputs:specular_reflection_roughness = 0.5 (
                    customData = {
                        float default = 0.2
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness"
                    hidden = false
                )
                float inputs:specular_reflection_weight = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:specular_transmission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Transmission"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:subsurface_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 10
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Scale"
                    hidden = false
                )
                color3f inputs:subsurface_scattering_color = (1, 0.9837925, 0.9471947) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Radius (mfp)"
                    hidden = false
                )
                color3f inputs:subsurface_transmission_color = (0.99999315, 0.99999, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color"
                    hidden = false
                )
                color3f inputs:subsurface_transmission_color.connect = </World/Looks/Hair_Long/data_lookup_color.outputs:out>
                asset inputs:subsurface_transmission_color_image = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color Image"
                    hidden = false
                )
                float inputs:subsurface_weight = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:subsurface_weight_image = @./textures/Curls_Long_SSSMix.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight Image"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Thin Walled"
                    doc = "Thin surface with no interior."
                    hidden = false
                )
                float3 inputs:uvw_projection_scale = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale"
                    doc = "Scale the projected texture."
                    hidden = false
                )
                float inputs:uvw_s_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 100
                            float min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale U"
                    hidden = false
                )
                float inputs:uvw_t_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 100
                            float min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale V"
                    hidden = false
                )
                int inputs:uvw_uv_set = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 4
                            int min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "UV Set"
                    hidden = false
                )
                token outputs:out
                color3f subsurface_transmission_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-512.9804, 21.023666)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-893.928, 1140.235)
            }
        }

        def Material "Jacket_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Jacket_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Jacket_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Jacket_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    doc = "Strength of normal map"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @../_general/SuitFabric_NORM.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (20, 20) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/SuitJacket_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Jacket_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/SuitJacket_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                bool inputs:project_uvw = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Enable Project UVW Coordinates"
                    doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/SuitJacket_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                int inputs:uv_space_index = 0 (
                    customData = {
                        int default = 0
                        dictionary range = {
                            int max = 3
                            int min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "UV Space Index"
                    doc = "UV Space Index."
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "Tie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Tie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Tie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Tie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Tie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Shoes_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shoes_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shoes_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shoes_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Shoes_Casual_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shoes_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Shoes_Casual_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Shoes_Casual_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "Sweater"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Sweater/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Sweater/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Sweater/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Christmas_Sweater.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Christmas_Sweater_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Scarf"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Scarf/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Scarf/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Scarf/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Scarf_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (0.10390948, 0.1635584, 0.3740741) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Scarf_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        over "Skin_SSS"
        {
            over "Shader"
            {
                bool inputs:geometry_normal_image_flip_g_channel = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Normal Map Flip G Channel"
                    hidden = false
                )
            }
        }
        variantSet "skinVariant" = {
            "dark" {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:geometry_normal_image = @./textures/Ben_NORM.jpg@ (
                            hidden = false
                        )
                        float inputs:geometry_normal_strength = 0.2 (
                            hidden = false
                        )
                        asset inputs:specular_reflection_roughness_image = @./textures/Ben_Roughness.jpg@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ben_Albedo_Dark.jpg@ (
                            hidden = false
                        )
                        bool inputs:geometry_normal_image_flip_g_channel = 1
                    }
                }

            }
            "light" {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:geometry_normal_image = @./textures/Ben_NORM.jpg@ (
                            hidden = false
                        )
                        float inputs:geometry_normal_strength = 0.2 (
                            hidden = false
                        )
                        asset inputs:specular_reflection_roughness_image = @./textures/Ben_Roughness.jpg@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ben_Albedo_Light.jpg@ (
                            hidden = false
                        )
                        bool inputs:geometry_normal_image_flip_g_channel = 1
                    }
                }

            }
            "medium" {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:geometry_normal_image = @./textures/Ben_NORM.jpg@ (
                            hidden = false
                        )
                        float inputs:geometry_normal_strength = 0.2 (
                            hidden = false
                        )
                        asset inputs:specular_reflection_roughness_image = @./textures/Ben_Roughness.jpg@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ben_Albedo_Medium.jpg@ (
                            hidden = false
                        )
                        bool inputs:geometry_normal_image_flip_g_channel = 1
                    }
                }

            }
        }

        variantSet "eyeVariant" = {
            "blue" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Blue.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "brown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Brown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "darkbrown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_DarkBrown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "gray" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Gray.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "green" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Green.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }

        def Material "LabCoat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @../_general/Polyester_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Shirt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Shirt/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/LabCoat_Shirt_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-847.7966, 117.52515)
            }
        }

        def Material "LabCoat_Buttons"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Buttons/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_Buttons_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/LabCoat_Buttons_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Pen1"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Pen1/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "LabCoat_Pen2"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.14999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "HardHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HardHat/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.9 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/HardHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HardHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/HardHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/HardHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-801.3356, 183.71509)
            }
        }

        def Material "WesternHatMain"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatMain/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatMain/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }

        def Material "WesternHatBand"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatBand/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatBand/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }
    }

    def "character" (
        instanceable = false
        prepend payload = @./Ben.usd@
    )
    {

        over "character"
        {

            over "GEO_Head"
            {
                over "GEO_Head"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_ShortHair"
            {
                over "GEO_BeardandShortHair"
                {
                    rel material:binding = </World/Looks/Hair_Short> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_Beard"
            {
                over "GEO_Beard"
                {
                    rel material:binding = </World/Looks/Hair_Short> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_UpperTeeth"
            {
                over "GEO_UpperTeeth"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Jaw_Group"
            {
                over "GEO_Tongue"
                {
                    over "GEO_Tongue"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "GEO_TeethLower"
                {
                    over "GEO_TeethLower"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "GEO_EyebrowsAndEyeLashes"
            {
                over "GEO_EyebrowsAndEyeLashes"
                {
                    rel material:binding = </World/Looks/EyeBrowLashes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Eye_Pivot_r"
            {
                over "GEO_Eye_r"
                {
                    over "GEO_Eye_r"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "GEO_Cornea_r"
                    {
                        over "GEO_Cornea_r"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "Eye_Pivot_l"
            {
                over "GEO_Eye_l"
                {
                    over "GEO_Eye_l"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "GEO_Cornea_l"
                    {
                        over "GEO_Cornea_l"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "outfit_variants" (
                variants = {
                    string outfitVariant = "outfit2"
                }
                prepend variantSets = "outfitVariant"
            )
            {
                variantSet "outfitVariant" = {
                    "outfit1" {
                        over "outfit_Casual"
                        {
                            token visibility = "visible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Body_Casual"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shoes_Casual"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    over "SuitPants"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Buckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Tie"
                            {
                                over "GEO_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Suit"
                            {
                                over "GEO_Suit"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Body_Formal"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Shoes"
                            {
                                over "GEO_Shoes"
                                {
                                    over "Shoes"
                                    {
                                        rel material:binding = </World/Looks/Shoes> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeLaces"
                                    {
                                        rel material:binding = </World/Looks/ShoeLaces> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole1"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole2"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Socks"
                                    {
                                        rel material:binding = </World/Looks/Socks> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                             token visibility = "invisible"

                            over "GEO_Body_Hoodie"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Shoes_Hoodie"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "outfit2" {
                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Body_Casual"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shoes_Casual"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            over "GEO_Sweater"
                            {
                            token visibility = "invisible"
                            }

                            over "GEO_Scarf"
                            {
                            token visibility = "invisible"
                            }

                            token visibility = "visible"

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    over "SuitPants"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Buckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Tie"
                            {
                                over "GEO_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Suit"
                            {
                                over "GEO_Suit"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Body_Formal"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Shoes"
                            {
                                over "GEO_Shoes"
                                {
                                    over "Shoes"
                                    {
                                        rel material:binding = </World/Looks/Shoes> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeLaces"
                                    {
                                        rel material:binding = </World/Looks/ShoeLaces> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole1"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole2"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Socks"
                                    {
                                        rel material:binding = </World/Looks/Socks> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                             token visibility = "invisible"

                            over "GEO_Body_Hoodie"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Shoes_Hoodie"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "outfit3" {
                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Body_Casual"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shoes_Casual"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    over "SuitPants"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Buckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Tie"
                            {
                                over "GEO_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Suit"
                            {
                                over "GEO_Suit"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Body_Formal"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Shoes"
                            {
                                over "GEO_Shoes"
                                {
                                    over "Shoes"
                                    {
                                        rel material:binding = </World/Looks/Shoes> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeLaces"
                                    {
                                        rel material:binding = </World/Looks/ShoeLaces> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole1"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole2"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Socks"
                                    {
                                        rel material:binding = </World/Looks/Socks> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                             token visibility = "visible"

                            over "GEO_Body_Hoodie"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Shoes_Hoodie"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "outfit3_ChristmasSpecial" {
                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Body_Casual"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shoes_Casual"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            over "GEO_Scarf"
                            {
                                over "GEO_Scarf"
                                {
                                    rel material:binding = </World/Looks/Scarf> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Sweater"
                            {
                                over "GEO_Sweater"
                                {
                                    rel material:binding = </World/Looks/Sweater> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            token visibility = "visible"

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Belt"
                            {
                            token visibility = "invisible"
                                over "GEO_Belt"
                                {
                                    over "SuitPants"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Buckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Tie"
                            {
                            token visibility = "invisible"
                                over "GEO_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Suit"
                            {
                            token visibility = "invisible"
                                over "GEO_Suit"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                            token visibility = "invisible"
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_NameTag"
                            {
                            token visibility = "invisible"
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Body_Formal"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Formal_Shoes"
                            {
                                over "GEO_Shoes"
                                {
                                    over "Shoes"
                                    {
                                        rel material:binding = </World/Looks/Shoes> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeLaces"
                                    {
                                        rel material:binding = </World/Looks/ShoeLaces> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole1"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "ShoeSole2"
                                    {
                                        rel material:binding = </World/Looks/ShoeSole2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Socks"
                                    {
                                        rel material:binding = </World/Looks/Socks> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                             token visibility = "invisible"

                            over "GEO_Body_Hoodie"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Shoes_Hoodie"
                            {
                                over "GEO_Shoes_Casual"
                                {
                                    rel material:binding = </World/Looks/Shoes_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "outfit4" {                        
                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_Sweater"
                            {
                            token visibility = "invisible"
                            }

                            over "GEO_Scarf"
                            {
                            token visibility = "invisible"
                            }

                            over "GEO_Body_Formal"
                            {
                                over "GEO_Body"
                                {
                                    rel material:binding = </World/Looks/Skin_SSS> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Pants_Formal"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "BeltBuckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Tie"
                            {
                                token visibility = "invisible"
                                over "GEO_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Suit"
                            {
                                token visibility = "invisible"
                                over "GEO_Suit"
                                {
                                    rel material:binding = </World/Looks/Jacket_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_NameTag"
                            {
                                token visibility = "invisible"

                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                token visibility = "invisible"
                                
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "visible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                }
            }

            over "headgear_variants" (
                variants = {
                    string headgearVariant = "headgear1"
                }
                prepend variantSets = "headgearVariant"
            )
            {
                variantSet "headgearVariant" = {
                    "headgear1" {
                        over "haeadgear_Nothing"
                        {
                            token visibility = "visible"
                            over "Hair"
                            {
                                over "Hair"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "Hair_underBaseballcap"
                            {
                                over "Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underDriversHat"
                            {
                                over "Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underChefsHat"
                            {
                                over "Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "Hair_underWesternHat"
                            {
                                over "Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear2" {
                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"
                            over "Hair"
                            {
                                over "Hair"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "visible"
                            over "Hair_underBaseballcap"
                            {
                                over "Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underDriversHat"
                            {
                                over "Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underChefsHat"
                            {
                                over "Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "Hair_underWesternHat"
                            {
                                over "Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear3" {
                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"
                            over "Hair"
                            {
                                over "Hair"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "Hair_underBaseballcap"
                            {
                                over "Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "visible"
                            over "Hair_underDriversHat"
                            {
                                over "Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underChefsHat"
                            {
                                over "Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "Hair_underWesternHat"
                            {
                                over "Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear4" {
                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"
                            over "Hair"
                            {
                                over "Hair"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "Hair_underBaseballcap"
                            {
                                over "Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underDriversHat"
                            {
                                over "Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "visible"
                            over "Hair_underChefsHat"
                            {
                                over "Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "Hair_underWesternHat"
                            {
                                over "Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear5" {

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"
                            over "Hair"
                            {
                                over "Hair"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "Hair_underBaseballcap"
                            {
                                over "Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underDriversHat"
                            {
                                over "Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underChefsHat"
                            {
                                over "Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "visible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "Hair_underWesternHat"
                            {
                                over "Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear6" {

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"
                            over "Hair"
                            {
                                over "Hair"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "Hair_underBaseballcap"
                            {
                                over "Hair_underBaseballcap"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underDriversHat"
                            {
                                over "Hair_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "Hair_underChefsHat"
                            {
                                over "Hair_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "Hair_underHardHat"
                            {
                                over "Hair_underHardHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "visible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "Hair_underWesternHat"
                            {
                                over "Hair_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/Hair_Long> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                }
            }

            over "glasses_variants" (
                variants = {
                    string glassesVariant = "glasses3"
                }
                prepend variantSets = "glassesVariant"
            )
            {
                variantSet "glassesVariant" = {
                    "glasses1" {
                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "Glasses1_Frame"
                            {
                                over "Glasses1_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Glasses1"
                            {
                                over "Glasses1"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                bool primvars:doNotCastShadows = 1
                            }
                        }

                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                bool primvars:doNotCastShadows = 1
                            }

                            over "GEO_Glasses2_Frame"
                            {
                                over "GEO_Glasses2_Frame"
                                {
                                    over "Glasses2_Frame"
                                    {
                                        rel material:binding = </World/Looks/Glasses_Frame> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Glasses2_BehindEarThingies"
                                    {
                                        rel material:binding = </World/Looks/Glasses_Frame_BehindEar> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    
                    "glasses2" {
                        over "glasses1"
                        {
                            token visibility = "visible"

                            over "Glasses1_Frame"
                            {
                                over "Glasses1_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Glasses1"
                            {
                                over "Glasses1"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                bool primvars:doNotCastShadows = 1
                            }
                        }

                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                bool primvars:doNotCastShadows = 1
                            }

                            over "GEO_Glasses2_Frame"
                            {
                                over "GEO_Glasses2_Frame"
                                {
                                    over "Glasses2_Frame"
                                    {
                                        rel material:binding = </World/Looks/Glasses_Frame> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Glasses2_BehindEarThingies"
                                    {
                                        rel material:binding = </World/Looks/Glasses_Frame_BehindEar> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "glasses3" {
                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "Glasses1_Frame"
                            {
                                over "Glasses1_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Glasses1"
                            {
                                over "Glasses1"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                bool primvars:doNotCastShadows = 1
                            }
                        }

                        over "glasses2"
                        {
                            token visibility = "visible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                bool primvars:doNotCastShadows = 1
                            }

                            over "GEO_Glasses2_Frame"
                            {
                                over "GEO_Glasses2_Frame"
                                {
                                    over "Glasses2_Frame"
                                    {
                                        rel material:binding = </World/Looks/Glasses_Frame> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Glasses2_BehindEarThingies"
                                    {
                                        rel material:binding = </World/Looks/Glasses_Frame_BehindEar> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }

            over "ben_skeleton" (
                prepend apiSchemas = ["ControlRigAPI"]
            )
            {
                uniform token controlRig:forwardAxis = "MINUS Y"
                uniform token[] controlRig:retargetTags = ["", "", "", "Chest", "", "Left_Shoulder", "Left_Elbow", "Left_Hand", "", "", "", "Left_Index", "", "", "Left_Thumb", "", "", "", "Left_Middle", "", "", "", "Left_Ring", "", "", "", "Left_Pinky", "", "", "", "", "", "", "Head", "Left_Eye", "eyelid_upper_middle_l", "eyelid_lower_middle_l", "eyelid_lower_outer_l", "eyelid_lower_inner_l", "eyelid_upper_outer_l", "eyelid_upper_inner_l", "", "", "", "", "eyebrow_0_l", "eyebrow_1_l", "Right_Eye", "eyelid_upper_middle_r", "eyelid_lower_middle_r", "eyelid_lower_outer_r", "eyelid_lower_inner_r", "eyelid_upper_outer_r", "eyelid_upper_inner_r", "eyebrow_0_r", "eyebrow_1_r", "", "Right_Shoulder", "Right_Elbow", "Right_Hand", "", "", "", "Right_Index", "", "", "Right_Thumb", "", "", "", "Right_Middle", "", "", "", "Right_Ring", "", "", "", "Right_Pinky", "", "", "", "", "", "Left_Thigh", "", "", "Left_Knee", "Left_Foot", "Left_Toe", "", "Right_Thigh", "", "", "Right_Knee", "Right_Foot", "Right_Toe", ""]
                uniform matrix4d[] controlRig:retargetTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, -4.284070342919222e-8, 1.1035972136141936e-10, 0), (1.7763568394002505e-15, 0.0025760531425476074, 0.9999967217445374, 0), (-4.284084553773937e-8, -0.9999967217445374, 0.0025760531425476074, 0), (3.5374115503062584e-25, -0.9338765740394592, 79.09076690673828, 1) ), ( (1, -1.126056192735092e-10, 8.709178933585804e-10, 0), (1.1036169200728807e-10, 0.9999966621398926, 0.0025760862044990063, 0), (-8.712051080550509e-10, -0.0025760862044990063, 0.9999966621398926, 0), (0, 15.174736022949219, 0, 1) ), ( (1, -1.9295689490661516e-9, -2.382936941103253e-7, 0), (-4.3344766664787926e-10, 0.9999508261680603, -0.009916006587445736, 0), (2.3830111217648664e-7, 0.009916006587445736, 0.9999508261680603, 0), (0, 15.174667358398438, 0, 1) ), ( (-0.0006147623062133789, -0.9999496340751648, -0.010014282539486885, 0), (0.9999688267707825, -0.0005359649658203125, -0.007876241579651833, 0), (0.007870478555560112, -0.010018812492489815, 0.9999188184738159, 0), (5.894352436065674, 13.808395385742188, 0.0000011920928955078125, 1) ), ( (0.9997078776359558, 0.0008013580809347332, -0.024155590683221817, 0), (-0.0006113959825597703, 0.9999688267707825, 0.007870464585721493, 0), (0.024161145091056824, -0.00785339716821909, 0.9996772408485413, 0), (-0.000001430511474609375, 9.382989883422852, 4.76837158203125e-7, 1) ), ( (0.9916588068008423, 0.000004666217591875466, 0.12889054417610168, 0), (-0.000004731654826173326, 1, 2.014892572788085e-7, 0), (-0.12889054417610168, -8.096742476482177e-7, 0.9916588068008423, 0), (-0.0000858306884765625, 23.335548400878906, 0.00000286102294921875, 1) ), ( (0.9966076612472534, 0.043401140719652176, -0.06992512196302414, 0), (-0.04524300619959831, 0.9986637830734253, -0.024974951520562172, 0), (0.06874775141477585, 0.028053851798176765, 0.9972395300865173, 0), (0.000030517578125, 22.63473892211914, -0.00000476837158203125, 1) ), ( (0.1843166947364807, 0.40889447927474976, -0.8937744498252869, 0), (-0.0574670135974884, 0.9122821092605591, 0.4055106043815613, 0), (0.9811854958534241, -0.02337983250617981, 0.1916467547416687, 0), (-0.1584320068359375, 2.699843406677246, 1.5524072647094727, 1) ), ( (0.95352703332901, -0.2983343303203583, -0.042223699390888214, 0), (0.29907581210136414, 0.9541494846343994, 0.012347521260380745, 0), (0.036604031920433044, -0.02440178208053112, 0.9990319013595581, 0), (0, 5.954362869262695, 0.00000762939453125, 1) ), ( (0.9584802389144897, -0.031359292566776276, -0.283429354429245, 0), (0.017771825194358826, 0.9985717535018921, -0.05038490146398544, 0), (0.28460457921028137, 0.04325588047504425, 0.9576686024665833, 0), (-0.0000019073486328125, 2.062302350997925, 0, 1) ), ( (0.9774783253669739, -0.05864681303501129, -0.20272307097911835, 0), (0.06329988688230515, 0.9978574514389038, 0.016540341079235077, 0), (0.20131869614124298, -0.029000170528888702, 0.9790964126586914, 0), (4.76837158203125e-7, 2.6402039527893066, 0, 1) ), ( (-0.677403450012207, 0.6806078553199768, -0.27910101413726807, 0), (0.48433443903923035, 0.6982293128967285, 0.5271583795547485, 0), (0.5536646842956543, 0.22192071378231049, -0.8026247024536133, 0), (1.0154953002929688, 1.6790037155151367, 1.7411322593688965, 1) ), ( (0.9976591467857361, 0.011967586353421211, -0.06732771545648575, 0), (-0.0021787118166685104, 0.9896299242973328, 0.14362388849258423, 0), (0.06834835559129715, -0.1431410014629364, 0.987339437007904, 0), (0, 3.3051910400390625, 0, 1) ), ( (0.9799096584320068, -0.07363622635602951, -0.18535050749778748, 0), (0.09316278249025345, 0.9907230734825134, 0.09893688559532166, 0), (0.17634567618370056, -0.11421696841716766, 0.9776792526245117, 0), (0, 3.1600570678710938, 0, 1) ), ( (0.21395307779312134, 0.19029361009597778, -0.9581296443939209, 0), (-0.017537489533424377, 0.9814322590827942, 0.19100555777549744, 0), (0.9766864776611328, -0.02406303584575653, 0.21331775188446045, 0), (-0.22019195556640625, 2.937453269958496, 0.530820369720459, 1) ), ( (0.9922225475311279, -0.04600701481103897, -0.11566244810819626, 0), (0.03774560987949371, 0.9966444373130798, -0.07263021171092987, 0), (0.11861582845449448, 0.06769958138465881, 0.9906296133995056, 0), (-0.0000019073486328125, 5.8903045654296875, -0.00000762939453125, 1) ), ( (0.9969782829284668, -0.07070908695459366, -0.03216445818543434, 0), (0.0721229687333107, 0.9963730573654175, 0.04515545815229416, 0), (0.028854897245764732, -0.047338806092739105, 0.9984620213508606, 0), (0, 2.8332948684692383, 0, 1) ), ( (0.9999586343765259, 0.006735147442668676, 0.006115173455327749, 0), (-0.006975008640438318, 0.999171793460846, 0.040088947862386703, 0), (-0.005840103607624769, -0.04012994095683098, 0.9991773962974548, 0), (9.5367431640625e-7, 3.3301124572753906, 0, 1) ), ( (0.241804301738739, 0.003046516329050064, -0.9703202247619629, 0), (0.040467750281095505, 0.9990933537483215, 0.013221438974142075, 0), (0.9694807529449463, -0.04246367886662483, 0.24146175384521484, 0), (-0.25466156005859375, 2.954615592956543, -0.520179271697998, 1) ), ( (0.9999571442604065, -0.005688333418220282, 0.007308239582926035, 0), (0.004876915831118822, 0.9942888617515564, 0.10661109536886215, 0), (-0.007872940972447395, -0.10657087713479996, 0.9942739605903625, 0), (-0.0000019073486328125, 6.1610565185546875, 0, 1) ), ( (0.998893678188324, 0.04491949453949928, -0.013918055221438408, 0), (-0.04656233265995979, 0.9862006902694702, -0.1588716059923172, 0), (0.00658956216648221, 0.159343883395195, 0.9872011542320251, 0), (0, 2.0918846130371094, 0, 1) ), ( (0.9984543323516846, 0.004652777221053839, 0.055382948368787766, 0), (-0.0027420707046985626, 0.9994000196456909, -0.034526024013757706, 0), (-0.05551036074757576, 0.03432079777121544, 0.9978680610656738, 0), (0, 3.117650032043457, 0, 1) ), ( (0.37269526720046997, -0.2249322384595871, -0.9002797603607178, 0), (0.14109154045581818, 0.9726333618164062, -0.18460088968276978, 0), (0.9171648025512695, -0.058221980929374695, 0.3942318558692932, 0), (-0.26395416259765625, 2.78153133392334, -1.5441231727600098, 1) ), ( (0.9658024907112122, 0.2497938871383667, -0.06948760151863098, 0), (-0.24984169006347656, 0.9682524800300598, 0.008142657577991486, 0), (0.06931552290916443, 0.009496700018644333, 0.9975495934486389, 0), (0, 6.329769134521484, 0, 1) ), ( (0.9961969256401062, 0.0066587007604539394, 0.08687518537044525, 0), (-0.0026904051192104816, 0.9989508986473083, -0.045715488493442535, 0), (-0.0870884507894516, 0.04530789703130722, 0.9951697587966919, 0), (0, 1.5153493881225586, 0, 1) ), ( (0.9973366260528564, 0.023795295506715775, 0.06894475966691971, 0), (-0.016318824142217636, 0.9941204786300659, -0.10704261809587479, 0), (-0.07108650356531143, 0.10563243180513382, 0.99186110496521, 0), (-0.000003814697265625, 2.693729877471924, 0, 1) ), ( (0.999997615814209, -0.0000023540535494248616, 0.0021926644258201122, 0), (0.0000023547152068204014, 1, -2.99199626851987e-7, 0), (-0.0021926644258201122, 3.0436203246608784e-7, 0.999997615814209, 0), (0, 7.5449066162109375, 0, 1) ), ( (0.9998373985290527, -0.0000017903425941767637, -0.018031710758805275, 0), (0.0000017857796592579689, 1, -2.6915265038951475e-7, 0), (0.018031710758805275, 2.369082210407214e-7, 0.9998373985290527, 0), (0.00002288818359375, 15.08981704711914, -0.0000019073486328125, 1) ), ( (0.9999999403953552, 0.00000496209213451948, -0.0003972160629928112, 0), (-0.000004962081220583059, 1, 2.8928152318030698e-8, 0), (0.0003972160629928112, -2.695713163802793e-8, 0.9999999403953552, 0), (0.00000762939453125, 7.778533935546875, -1.1920928955078125e-7, 1) ), ( (0.9999997019767761, 0.000004872686986345798, -0.0008058756939135492, 0), (-0.000004872672434430569, 1, 1.9652512506240782e-8, 0), (0.0008058756939135492, -1.5725737156913056e-8, 0.9999997019767761, 0), (-0.00003814697265625, 15.557044982910156, 2.384185791015625e-7, 1) ), ( (0.996084451675415, -0.08474338054656982, 0.025185367092490196, 0), (0.025060975924134254, -0.0025315284729003906, -0.9996827244758606, 0), (0.0847802460193634, 0.9963995814323425, -0.00039780139923095703, 0), (-0.0000762939453125, 23.335556030273438, 1.1920928955078125e-7, 1) ), ( (1, -2.531862053345435e-9, 2.3823636752240418e-7, 0), (-8.733872292054912e-9, 0.9988818764686584, 0.047276172786951065, 0), (-2.3808968308003386e-7, -0.047276172786951065, 0.9988818764686584, 0), (0, 13.808403015136719, 1.1920928955078125e-7, 1) ), ( (1, 7.974335081151196e-10, -4.4050384673255394e-8, 0), (4.850380652676733e-10, 0.9995763301849365, 0.029106074944138527, 0), (4.405493214676426e-8, -0.029106074944138527, 0.9995763301849365, 0), (-2.842170943040401e-14, 14.007026672363281, -7.152557373046875e-7, 1) ), ( (-1, 2.6631610694494157e-7, -1.1084807738370728e-8, 0), (8.495732117808075e-9, 0.07341134548187256, 0.9973017573356628, 0), (2.6641126282811456e-7, 0.9973017573356628, -0.07341134548187256, 0), (4.61329984664917, 11.496719360351562, 10.23917007446289, 1) ), ( (0.8930302858352661, 0.10160423815250397, -0.43837589025497437, 0), (0.37157559394836426, 0.3830021023750305, 0.8457192182540894, 0), (0.2538275122642517, -0.9181426763534546, 0.3042788505554199, 0), (4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (-0.9014194011688232, -0.07378846406936646, 0.4266124367713928, 0), (0.40705606341362, -0.48008668422698975, 0.7770599126815796, 0), (0.14747291803359985, 0.8741121292114258, 0.46279555559158325, 0), (4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (-0.6323685646057129, -0.18169498443603516, 0.7530583739280701, 0), (0.7609587907791138, -0.32776570320129395, 0.5599207878112793, 0), (0.1450919508934021, 0.9271227121353149, 0.345531165599823, 0), (4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (-0.9753870964050293, -0.08330373466014862, -0.20415742695331573, 0), (-0.14827722311019897, -0.4374779462814331, 0.8869197964668274, 0), (-0.16319812834262848, 0.8953620791435242, 0.4143584966659546, 0), (4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (0.6286085844039917, 0.19793203473091125, -0.7521131634712219, 0), (0.7030225992202759, 0.2689383625984192, 0.6583551168441772, 0), (0.33258169889450073, -0.9426001310348511, 0.029906272888183594, 0), (4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (0.9738473296165466, 0.0924077108502388, 0.2075624018907547, 0), (-0.22217753529548645, 0.19623464345932007, 0.9550544619560242, 0), (0.047523483633995056, -0.9761930108070374, 0.21163350343704224, 0), (4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (1, 8.380399663110438e-7, 5.994402840769908e-8, 0), (8.944084584072698e-9, -0.08196079730987549, 0.9966355562210083, 0), (8.401334525842685e-7, -0.9966355562210083, -0.08196079730987549, 0), (6.006303010508418e-8, -1.0732421875, 8.483095169067383, 1) ), ( (1, -9.317975582234794e-7, 3.6586774854185933e-7, 0), (7.251088618431822e-9, 0.3722158670425415, 0.9281461834907532, 0), (-0.000001001026134872518, -0.9281461834907532, 0.3722158670425415, 0), (4.599587910547598e-8, 0.329681396484375, 8.386650085449219, 1) ), ( (1, -0.0000022892504603078123, 0.000004049163635500008, 0), (4.1551982121745823e-7, 0.9109922647476196, 0.41242340207099915, 0), (-0.000004632897343981313, -0.41242340207099915, 0.9109922647476196, 0), (-1.4551915228366852e-11, 2.290332794189453, 0.00000762939453125, 1) ), ( (1, -8.534880180377513e-8, -0.000005138866072229575, 0), (0.0000011373626875865739, 0.9787473082542419, 0.2050701081752777, 0), (0.000005012148903915659, -0.2050701081752777, 0.9787473082542419, 0), (0, 2.473294496536255, 0, 1) ), ( (0.8172578811645508, -0.5315713286399841, 0.22253423929214478, 0), (-0.024029910564422607, 0.35439056158065796, 0.934788703918457, 0), (-0.575770914554596, -0.7693108320236206, 0.27685487270355225, 0), (4.930774211883545, 14.21270751953125, 8.167316436767578, 1) ), ( (0.9145144820213318, -0.019398033618927002, -0.4040878415107727, 0), (0.37434038519859314, 0.41933107376098633, 0.8270615339279175, 0), (0.15340322256088257, -0.9076261520385742, 0.3907458186149597, 0), (7.957640171051025, 13.513092041015625, 7.67557954788208, 1) ), ( (-1, -2.6631610694494157e-7, 1.1084807738370728e-8, 0), (-8.495732117808075e-9, 0.07341134548187256, 0.9973017573356628, 0), (-2.6641126282811456e-7, 0.9973017573356628, -0.07341134548187256, 0), (-4.61329984664917, 11.496719360351562, 10.23917007446289, 1) ), ( (0.8930302858352661, -0.10160423815250397, 0.43837589025497437, 0), (-0.37157559394836426, 0.3830021023750305, 0.8457192182540894, 0), (-0.2538275122642517, -0.9181426763534546, 0.3042788505554199, 0), (-4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (-0.9014194011688232, 0.07378846406936646, -0.4266124367713928, 0), (-0.40705606341362, -0.48008668422698975, 0.7770599126815796, 0), (-0.14747291803359985, 0.8741121292114258, 0.46279555559158325, 0), (-4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (-0.6323685646057129, 0.18169498443603516, -0.7530583739280701, 0), (-0.7609587907791138, -0.32776570320129395, 0.5599207878112793, 0), (-0.1450919508934021, 0.9271227121353149, 0.345531165599823, 0), (-4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (-0.9753870964050293, 0.08330373466014862, 0.20415742695331573, 0), (0.14827723801136017, -0.4374779462814331, 0.8869197964668274, 0), (0.16319812834262848, 0.8953620791435242, 0.4143584966659546, 0), (-4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (0.6286085844039917, -0.19793203473091125, 0.7521131634712219, 0), (-0.7030225992202759, 0.2689383625984192, 0.6583551168441772, 0), (-0.33258169889450073, -0.9426001310348511, 0.029906272888183594, 0), (-4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (0.9738473296165466, -0.0924077108502388, -0.2075624018907547, 0), (0.22217753529548645, 0.19623464345932007, 0.9550544619560242, 0), (-0.047523483633995056, -0.9761930108070374, 0.21163350343704224, 0), (-4.613289833068848, 11.496719360351562, 10.23917007446289, 1) ), ( (0.8172578811645508, 0.5315713286399841, -0.22253423929214478, 0), (0.024029910564422607, 0.35439056158065796, 0.934788703918457, 0), (0.575770914554596, -0.7693108320236206, 0.27685487270355225, 0), (-4.930774211883545, 14.21270751953125, 8.167316436767578, 1) ), ( (0.9145144820213318, 0.019398033618927002, 0.4040878415107727, 0), (-0.37434038519859314, 0.41933107376098633, 0.8270615339279175, 0), (-0.15340322256088257, -0.9076261520385742, 0.3907458186149597, 0), (-7.957640171051025, 13.513092041015625, 7.67557954788208, 1) ), ( (-0.0006147623062133789, 0.9999496340751648, 0.010014284402132034, 0), (-0.9999688267707825, -0.0005359649658203125, -0.007876630872488022, 0), (-0.007870867848396301, -0.010018814355134964, 0.9999188184738159, 0), (-5.894351482391357, 13.808395385742188, -0.0000011920928955078125, 1) ), ( (0.9997073411941528, -0.0008184844045899808, 0.024177543818950653, 0), (0.0006300298846326768, 0.9999693632125854, 0.007801197003573179, 0), (-0.024183187633752823, -0.007783681619912386, 0.9996772408485413, 0), (0.00000286102294921875, 9.382989883422852, 9.5367431640625e-7, 1) ), ( (0.9916530847549438, 0.00004725035614683293, -0.12893472611904144, 0), (-0.00002924110958701931, 1, 0.0001415702427038923, 0), (0.12893472611904144, -0.00013661837147083133, 0.9916530847549438, 0), (0.00007343292236328125, 23.335556030273438, 0.000003814697265625, 1) ), ( (0.9966076612472534, -0.043401140719652176, 0.06992512941360474, 0), (0.04524300619959831, 0.9986637830734253, -0.0249750018119812, 0), (-0.06874774396419525, 0.028053902089595795, 0.9972395300865173, 0), (-0.000030517578125, 22.63473892211914, -0.000003814697265625, 1) ), ( (0.1843166947364807, -0.40889447927474976, 0.8937744498252869, 0), (0.0574670135974884, 0.9122821092605591, 0.4055106043815613, 0), (-0.9811854958534241, -0.02337983250617981, 0.1916467547416687, 0), (0.1584320068359375, 2.699843406677246, 1.5524072647094727, 1) ), ( (0.95352703332901, 0.2983342707157135, 0.04222371429204941, 0), (-0.29907575249671936, 0.9541494846343994, 0.012347548268735409, 0), (-0.03660403937101364, -0.02440181002020836, 0.9990319013595581, 0), (0.0000019073486328125, 5.9543657302856445, 0, 1) ), ( (0.9584802389144897, 0.03135932236909866, 0.2834293246269226, 0), (-0.017771851271390915, 0.9985717535018921, -0.05038493126630783, 0), (-0.284604549407959, 0.04325590282678604, 0.9576686024665833, 0), (0, 2.062303066253662, 0, 1) ), ( (0.9774783253669739, 0.0586467944085598, 0.20272307097911835, 0), (-0.06329987198114395, 0.9978574514389038, 0.016540370881557465, 0), (-0.20131869614124298, -0.02900020033121109, 0.9790964126586914, 0), (-4.76837158203125e-7, 2.6402039527893066, 0, 1) ), ( (-0.6774035692214966, -0.6806078553199768, 0.27910107374191284, 0), (-0.4843346178531647, 0.6982293725013733, 0.5271582007408142, 0), (-0.5536645650863647, 0.22192050516605377, -0.8026250600814819, 0), (-1.0154953002929688, 1.6790037155151367, 1.7411317825317383, 1) ), ( (0.9976591467857361, -0.011967587284743786, 0.06732773035764694, 0), (0.002178712747991085, 0.9896299242973328, 0.14362388849258423, 0), (-0.06834837049245834, -0.1431410014629364, 0.987339437007904, 0), (0, 3.3051910400390625, 0.00000762939453125, 1) ), ( (0.9799096584320068, 0.07363622635602951, 0.18535052239894867, 0), (-0.09316278249025345, 0.9907230734825134, 0.09893684089183807, 0), (-0.17634569108486176, -0.11421693861484528, 0.9776792526245117, 0), (0, 3.1600570678710938, 0.000003814697265625, 1) ), ( (0.213952898979187, -0.19029363989830017, 0.9581296443939209, 0), (0.017537541687488556, 0.9814322590827942, 0.19100557267665863, 0), (-0.9766864776611328, -0.02406296133995056, 0.21331757307052612, 0), (0.22019195556640625, 2.937453269958496, 0.5308198928833008, 1) ), ( (0.9922225475311279, 0.046007029712200165, 0.11566247045993805, 0), (-0.0377456396818161, 0.9966444373130798, -0.0726301297545433, 0), (-0.11861585080623627, 0.06769949942827225, 0.9906296133995056, 0), (0.0000019073486328125, 5.8903045654296875, 0.00000762939453125, 1) ), ( (0.9969782829284668, 0.07070908695459366, 0.03216445446014404, 0), (-0.0721229687333107, 0.9963730573654175, 0.045155394822359085, 0), (-0.028854897245764732, -0.04733874276280403, 0.9984620213508606, 0), (0, 2.8332948684692383, 0, 1) ), ( (0.9999586343765259, -0.006735129747539759, -0.006115158088505268, 0), (0.006974990013986826, 0.999171793460846, 0.040088921785354614, 0), (0.005840089172124863, -0.04012991487979889, 0.9991773962974548, 0), (0, 3.3301119804382324, 0.00000762939453125, 1) ), ( (0.241804301738739, -0.0030465759336948395, 0.9703202247619629, 0), (-0.0404677577316761, 0.9990933537483215, 0.013221500441432, 0), (-0.9694807529449463, -0.042463697493076324, 0.24146175384521484, 0), (0.25466156005859375, 2.954615592956543, -0.520179271697998, 1) ), ( (0.9999571442604065, 0.005688341334462166, -0.007308254484087229, 0), (-0.004876922816038132, 0.9942888617515564, 0.10661109536886215, 0), (0.00787295587360859, -0.10657087713479996, 0.9942739605903625, 0), (0, 6.161057472229004, -0.00000762939453125, 1) ), ( (0.998893678188324, -0.044919513165950775, 0.013918072916567326, 0), (0.04656235873699188, 0.9862006902694702, -0.1588716357946396, 0), (-0.006589575670659542, 0.1593439131975174, 0.9872011542320251, 0), (0, 2.0918807983398438, 0, 1) ), ( (0.9984543323516846, -0.004652725532650948, -0.055382926017045975, 0), (0.0027420183178037405, 0.9994000196456909, -0.03452605754137039, 0), (0.05551033839583397, 0.034320831298828125, 0.9978680610656738, 0), (0.0000019073486328125, 3.117647171020508, -0.00000762939453125, 1) ), ( (0.37269526720046997, 0.2249322086572647, 0.9002798795700073, 0), (-0.14109160006046295, 0.9726333618164062, -0.1846008151769638, 0), (-0.9171649217605591, -0.058222055435180664, 0.394231915473938, 0), (0.26395416259765625, 2.78153133392334, -1.5441231727600098, 1) ), ( (0.9658025503158569, -0.24979382753372192, 0.06948758661746979, 0), (0.2498416304588318, 0.9682524800300598, 0.00814256351441145, 0), (-0.06931549310684204, 0.009496784768998623, 0.9975495934486389, 0), (0, 6.329769134521484, 0, 1) ), ( (0.9961969256401062, -0.0066587673500180244, -0.08687516301870346, 0), (0.0026904745027422905, 0.9989508986473083, -0.045715466141700745, 0), (0.08708842843770981, 0.04530787467956543, 0.9951697587966919, 0), (0, 1.515352725982666, 0.00000762939453125, 1) ), ( (0.9973366856575012, -0.02379528433084488, -0.06894475221633911, 0), (0.016318809241056442, 0.9941204786300659, -0.10704270005226135, 0), (0.07108649611473083, 0.10563251376152039, 0.99186110496521, 0), (0, 2.693730354309082, 0.00000762939453125, 1) ), ( (0.999997615814209, 0.0000024285595827677753, -0.002192657208070159, 0), (-0.000002429213054710999, 1, -2.953763100776996e-7, 0), (0.002192657208070159, 3.0070202683418756e-7, 0.999997615814209, 0), (0, 7.5449066162109375, 0, 1) ), ( (0.9998373985290527, 0.0000017602067146071931, 0.018031710758805275, 0), (-0.0000017563827441335889, 1, -2.2790936782257631e-7, 0), (-0.018031710758805275, 1.96201739299795e-7, 0.9998373985290527, 0), (-0.00002288818359375, 15.08981704711914, -0.0000019073486328125, 1) ), ( (0.9999999403953552, -0.000004962092589266831, 0.00039721280336380005, 0), (0.000004962080765835708, 1, 2.985946423450514e-8, 0), (-0.00039721280336380005, -2.7888461318070767e-8, 0.9999999403953552, 0), (-0.00000762939453125, 7.778533935546875, -1.1920928955078125e-7, 1) ), ( (0.9999997019767761, -0.000004872686986345798, 0.0008058720268309116, 0), (0.000004872672434430569, 1, 1.9652505400813425e-8, 0), (-0.0008058720268309116, -1.5725747815054092e-8, 0.9999997019767761, 0), (0.00003814697265625, 15.557044982910156, 2.384185791015625e-7, 1) ), ( (0.996084451675415, 0.08474338054656982, -0.025185367092490196, 0), (-0.025060975924134254, -0.0025315284729003906, -0.9996827244758606, 0), (-0.0847802460193634, 0.9963995814323425, -0.00039780139923095703, 0), (0.0000762939453125, 23.335556030273438, 4.76837158203125e-7, 1) ), ( (-0.9962500333786011, 0.0002180909359594807, -0.08652027696371078, 0), (0.00000437034759670496, -0.9999966621398926, -0.002571006305515766, 0), (-0.08652054518461227, -0.0025617433711886406, 0.9962467551231384, 0), (10.018153190612793, 2.1485750675201416, 0.4824642539024353, 1) ), ( (0.9980029463768005, -7.043764185254986e-7, 0.06316722184419632, 0), (7.533466828135715e-7, 1, -7.514304911637737e-7, 0), (-0.06316722184419632, 7.97516634065687e-7, 0.9980029463768005, 0), (0, 5.830444812774658, -9.5367431640625e-7, 1) ), ( (0.9921445250511169, -0.1218225285410881, 0.028433844447135925, 0), (-0.024329937994480133, 0.03504389524459839, 0.9990895986557007, 0), (-0.12270805239677429, -0.9919331073760986, 0.031804680824279785, 0), (0, 32.7420654296875, 0, 1) ), ( (0.9996615648269653, -0.000007706767974013928, 0.02601359598338604, 0), (0.000007936266229080502, 1, -0.00000871899101184681, 0), (-0.02601359598338604, 0.000008922490451368503, 0.9996615648269653, 0), (3.8743019104003906e-7, 32.7420654296875, -0.00000762939453125, 1) ), ( (0.9999830722808838, 0.0011101093841716647, -0.00570817943662405, 0), (0.004796680994331837, 0.3974713683128357, 0.9176020622253418, 0), (0.003287476720288396, -0.9176139831542969, 0.39745932817459106, 0), (-9.5367431640625e-7, 36.607357025146484, 1.1920928955078125e-7, 1) ), ( (0.9998443126678467, -0.0045863245613873005, 0.017037881538271904, 0), (-0.003920428920537233, 0.8837438225746155, 0.4679545760154724, 0), (-0.017203314229846, -0.4679484963417053, 0.8835883140563965, 0), (0, 7.626014709472656, 0, 1) ), ( (-0.9960815906524658, -0.0018205717206001282, 0.08841969817876816, 0), (-0.08228030800819397, -0.34747159481048584, -0.9340735673904419, 0), (0.03242388367652893, -0.9376887083053589, 0.3459603190422058, 0), (10.074614524841309, 2.1485748291015625, 0.4824641942977905, 1) ), ( (-0.9962500333786011, -0.00022313196677714586, 0.08652038127183914, 0), (6.812333595007658e-7, -0.9999966621398926, -0.0025710996706038713, 0), (0.08652066439390182, -0.002561399480327964, 0.9962467551231384, 0), (-10.01815128326416, 2.1485753059387207, 0.4824651777744293, 1) ), ( (0.9980029463768005, -2.5394189862026906e-8, -0.06316713243722916, 0), (-1.9809046847285572e-8, 1, -7.149869247768947e-7, 0), (0.06316713243722916, 7.148103691179131e-7, 0.9980029463768005, 0), (0, 5.830444812774658, -4.76837158203125e-7, 1) ), ( (0.9921445250511169, 0.12182250618934631, -0.028433870524168015, 0), (0.024329964071512222, 0.03504389524459839, 0.9990895986557007, 0), (0.1227080225944519, -0.9919331073760986, 0.031804680824279785, 0), (-9.5367431640625e-7, 32.742061614990234, 0, 1) ), ( (0.9996615648269653, -0.0000011105207704531495, -0.026013517752289772, 0), (8.825741133478004e-7, 1, -0.000008774107300268952, 0), (0.026013517752289772, 0.00000874817942531081, 0.9996615648269653, 0), (-9.5367431640625e-7, 32.7420654296875, -0.00000762939453125, 1) ), ( (0.9999830722808838, -0.0011101143900305033, 0.005708170123398304, 0), (-0.004796670749783516, 0.3974713683128357, 0.9176020622253418, 0), (-0.0032874776516109705, -0.9176139831542969, 0.39745932817459106, 0), (9.5367431640625e-7, 36.607357025146484, -5.960464477539063e-8, 1) ), ( (0.9998443126678467, 0.004586321301758289, -0.0170378889888525, 0), (0.003920434974133968, 0.8837438225746155, 0.4679546058177948, 0), (0.0172033179551363, -0.4679485261440277, 0.8835882544517517, 0), (0, 7.626014232635498, -4.76837158203125e-7, 1) ), ( (-0.9960815906524658, 0.001820303499698639, -0.08841961622238159, 0), (0.08228032290935516, -0.34747159481048584, -0.9340735673904419, 0), (-0.032423604279756546, -0.9376887083053589, 0.3459603190422058, 0), (-10.074614524841309, 2.1485748291015625, 0.48246514797210693, 1) )]
                uniform token controlRig:upAxis = "Z"
            }
        }
    }

    def Xform "Lights"
    {
        token visibility = "invisible"

        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 0, 0)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

        def DistantLight "defaultLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float angle = 1
            color3f color = (1, 0.96202534, 0.9409283)
            float intensity = 2500
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            double3 xformOp:rotateXYZ = (315, 0, 0)
            double3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def DistantLight "backLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float angle = 1
            color3f color = (0.7763713, 0.94055617, 1)
            float intensity = 6000
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            double3 xformOp:rotateXYZ = (155.98757934570312, 54.812625885009766, 180)
            double3 xformOp:scale = (0.9999999403953552, 0.9999995231628418, 1.0000003576278687)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }

        def DistantLight "FillLight" (
            prepend apiSchemas = ["ShapingAPI"]
        )
        {
            float angle = 1
            color3f color = (1, 0.7004219, 0.85969204)
            float intensity = 1000
            float shaping:cone:angle = 180
            float shaping:cone:softness
            float shaping:focus
            color3f shaping:focusTint
            asset shaping:ies:file
            double3 xformOp:rotateXYZ = (-11.8876953125, -41.12519073486328, -0.000010018397915700916)
            double3 xformOp:scale = (0.9999994039535522, 0.9999997615814209, 1.000000238418579)
            double3 xformOp:translate = (0, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
        }
    }
}

