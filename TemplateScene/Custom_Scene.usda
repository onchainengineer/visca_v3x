#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (6.466669735069408, 167.04184333211438, 108.77925687731316)
                double3 target = (-21.272238067728765, 127.35130026380321, -199.93888110521726)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/World/camera_end"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./Custom_Scene.usda"
            dictionary locked = {
                bool "./Core_Assets/Essentials.usda" = 1
            }
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            int "rtx:ambientOcclusion:maxSamples" = 2
            int "rtx:ambientOcclusion:minSamples" = 2
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:domeLight:enabled" = 0
            int "rtx:directLighting:domeLight:sampleCount" = 1
            bool "rtx:directLighting:sampledLighting:autoEnable" = 0
            int "rtx:directLighting:sampledLighting:autoEnableLightCountThreshold" = 2
            bool "rtx:flow:enabled" = 1
            bool "rtx:flow:pathTracingEnabled" = 1
            bool "rtx:flow:rayTracedReflectionsEnabled" = 1
            bool "rtx:flow:rayTracedTranslucencyEnabled" = 1
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            bool "rtx:matteObject:enabled" = 0
            double "rtx:post:aa:sharpness" = 0.4999999888241291
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            int "rtx:post:dlss:execMode" = 0
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 64
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            int "rtx:realtime:mgpu:tileOverlap" = 24
            double "rtx:reflections:maxRoughness" = 0.09999999776482582
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 630
    metersPerUnit = 0.01
    startTimeCode = 0
    subLayers = [
        @./Core_Assets/Essentials.usda@,
        @./Core_Assets/Animations/AnimGraph_Overwrite.usda@,
    ]
    timeCodesPerSecond = 25
    upAxis = "Y"
)

def Xform "World"
{
    over "camera_main"
    {
        bool omni:kit:cameraLock = 1
    }

    over "camera_end"
    {
        bool omni:kit:cameraLock = 1
    }

    over "camera_start"
    {
        bool omni:kit:cameraLock = 1
    }

    def "Scene_Empty" (
        instanceable = false
        prepend references = @./Core_Assets/Empty Scene/Scene_Empty.usda@
    )
    {
    }

    def Scope "Example_DELETE_THIS"
    {
        token visibility = "inherited"

        def "Example_Character" (
            instanceable = false
            prepend payload = @./Core_Assets/Animations/Rig_Retarget_Tagged.usda@
        )
        {
            over "character"
            {
                over "OUTPUT"
                {
                    over "geo"
                    {
                        rel material:binding = </World/Example_DELETE_THIS/Looks/Green_OmniPBR> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                        token visibility = "visible"

                        over "char_nvHumanTemplate_body_model_lo"
                        {
                            over "l_tearline_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Example_DELETE_THIS/Looks/OmniGlass> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "r_tearline_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Example_DELETE_THIS/Looks/OmniGlass> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "l_eye_grp_lo"
                            {
                                over "l_choroid_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/Eye_OmniPBR> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "l_aqueous_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/OmniGlass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    token visibility = "invisible"
                                }

                                over "l_cornea_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/OmniGlass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }

                                over "l_lens_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/Black_OmniPBR> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "r_eye_grp_lo"
                            {
                                over "r_aqueous_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/OmniGlass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    token visibility = "invisible"
                                }

                                over "r_cornea_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/OmniGlass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }

                                over "r_choroid_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/Eye_OmniPBR> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "r_lens_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/Black_OmniPBR> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "c_mouth_grp_lo"
                            {
                                over "c_bottomDenture_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/Teeth_OmniPBR> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "c_topDenture_lo" (
                                    prepend apiSchemas = ["MaterialBindingAPI"]
                                )
                                {
                                    rel material:binding = </World/Example_DELETE_THIS/Looks/Teeth_OmniPBR> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }

                    over "root_JNT"
                    {
                        over "root_JNT"
                        {
                            rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                        }
                    }
                }
            }
        }

        def Scope "Looks"
        {
            def Material "Grey_OmniPBR"
            {
                token outputs:mdl:displacement.connect = </World/Example_DELETE_THIS/Looks/Grey_OmniPBR/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Example_DELETE_THIS/Looks/Grey_OmniPBR/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Example_DELETE_THIS/Looks/Grey_OmniPBR/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:bump_factor = 0.5 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Strength"
                        doc = """Strength of normal map

"""
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.4, 0.3969112, 0.3969112) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:normalmap_texture = @@ (
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.43 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Material "Green_OmniPBR"
            {
                token outputs:mdl:displacement.connect = </World/Example_DELETE_THIS/Looks/Green_OmniPBR/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Example_DELETE_THIS/Looks/Green_OmniPBR/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Example_DELETE_THIS/Looks/Green_OmniPBR/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:bump_factor = 0.5 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Strength"
                        doc = """Strength of normal map

"""
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.089795925, 0.15, 0) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:normalmap_texture = @@ (
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.7 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Material "Eye_OmniPBR"
            {
                token outputs:mdl:displacement.connect = </World/Example_DELETE_THIS/Looks/Eye_OmniPBR/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Example_DELETE_THIS/Looks/Eye_OmniPBR/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Example_DELETE_THIS/Looks/Eye_OmniPBR/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:bump_factor = 0.5 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Strength"
                        doc = """Strength of normal map

"""
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.4, 0.3969112, 0.3969112) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:diffuse_texture = @./Core_Assets/Eye_DemoCharacter.jpg@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @@ (
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.43 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Material "OmniGlass"
            {
                token outputs:mdl:displacement.connect = </World/Example_DELETE_THIS/Looks/OmniGlass/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Example_DELETE_THIS/Looks/OmniGlass/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Example_DELETE_THIS/Looks/OmniGlass/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "Black_OmniPBR"
            {
                token outputs:mdl:displacement.connect = </World/Example_DELETE_THIS/Looks/Black_OmniPBR/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Example_DELETE_THIS/Looks/Black_OmniPBR/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Example_DELETE_THIS/Looks/Black_OmniPBR/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    color3f inputs:diffuse_color_constant = (0.01, 0.01, 0.01) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                    token outputs:out (
                        renderType = "material"
                    )
                }
            }

            def Material "Teeth_OmniPBR"
            {
                token outputs:mdl:displacement.connect = </World/Example_DELETE_THIS/Looks/Teeth_OmniPBR/Shader.outputs:out>
                token outputs:mdl:surface.connect = </World/Example_DELETE_THIS/Looks/Teeth_OmniPBR/Shader.outputs:out>
                token outputs:mdl:volume.connect = </World/Example_DELETE_THIS/Looks/Teeth_OmniPBR/Shader.outputs:out>

                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_brightness = 0.79999995 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = """Multiplier for the diffuse color 

"""
                        hidden = false
                    )
                    float inputs:bump_factor = 0.5 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Strength"
                        doc = """Strength of normal map

"""
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.52509654, 0.5250913, 0.5250913) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Color"
                        doc = """This is the albedo base color

"""
                        hidden = false
                        renderType = "color"
                    )
                    asset inputs:diffuse_texture = @./Core_Assets/Teeth_DemoCharacter.jpg@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    asset inputs:normalmap_texture = @@ (
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        hidden = false
                        renderType = "texture_2d"
                    )
                    float inputs:reflection_roughness_constant = 0.19999999 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = """Higher roughness values lead to more blurry reflections

"""
                        hidden = false
                    )
                    token outputs:out
                }
            }
        }
    }

    over "Animations" (
        prepend apiSchemas = ["OmniScriptingAPI"]
    )
    {
        uniform asset[] omni:scripting:scripts = [@./Scripts/animation_graph_builder_behavior_script.py@] (
            customData = {
                dictionary fileExts = {
                    string "*.py" = "Python File"
                }
            }
        )

        over "Rig_Retarget"
        {
            float3 xformOp:rotateXYZ = (0, 0, 0)
            float3 xformOp:scale = (1, 1, 1)
            double3 xformOp:translate = (100, 0, 0)
            uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]

            over "character"
            {
                custom string anim:graph:variable:gesture_state (
                    customData = {
                        string default = "none"
                    }
                )
                custom string anim:graph:variable:posture_state (
                    customData = {
                        string default = "none"
                    }
                )
                custom string anim:graph:variable:variant_state (
                    customData = {
                        string default = "none"
                    }
                )
                rel animationGraph = </World/AnimationGraph>
                custom rel inputs:pose

                over "OUTPUT"
                {
                    over "root_JNT"
                    {
                        custom float anim:graph:variable:BlendShapeStrength (
                            customData = {
                                double default = 1
                            }
                        )
                        custom float[] anim:graph:variable:BlendShapeWeights (
                            customData = {
                                float[] default = []
                            }
                        )
                        custom float anim:graph:variable:BlinkingStrength (
                            customData = {
                                double default = 1
                            }
                        )
                        custom string anim:graph:variable:gesture_state (
                            customData = {
                                string default = "none"
                            }
                        )
                        custom float3[] anim:graph:variable:JointPositions (
                            customData = {
                                float3[] default = [(0, 1, 2), (0, 1, 2)]
                            }
                        )
                        custom float4[] anim:graph:variable:JointRotations (
                            customData = {
                                float4[] default = [(0, 1, 2, 3), (0, 1, 2, 3)]
                            }
                        )
                        custom string anim:graph:variable:posture_state (
                            customData = {
                                string default = "none"
                            }
                        )
                        custom float3 anim:graph:variable:RootPositionDisplacement (
                            customData = {
                                float3 default = (0, 1, 2)
                            }
                        )
                        custom float4 anim:graph:variable:RootRotationDisplacement (
                            customData = {
                                float4 default = (0, 1, 2, 3)
                            }
                        )
                        custom string anim:graph:variable:variant_state (
                            customData = {
                                string default = "none"
                            }
                        )
                    }
                }
            }
        }
    }

    def AnimationGraph "AnimationGraph"
    {
        custom float anim:graph:variable:BlendShapeStrength = 1
        custom float[] anim:graph:variable:BlendShapeWeights = []
        custom float anim:graph:variable:BlinkingStrength = 1
        custom string anim:graph:variable:gesture_state = "none"
        custom float3[] anim:graph:variable:JointPositions = [(0, 1, 2), (0, 1, 2)]
        custom float4[] anim:graph:variable:JointRotations = [(0, 1, 2, 3), (0, 1, 2, 3)]
        custom string anim:graph:variable:posture_state = "none"
        custom float3 anim:graph:variable:RootPositionDisplacement = (0, 1, 2)
        custom float4 anim:graph:variable:RootRotationDisplacement = (0, 1, 2, 3)
        custom string anim:graph:variable:variant_state = "none"
        rel inputs:pose = </World/AnimationGraph/Blend>
        rel skel:skeleton = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT>

        def StateMachine "MainStateMachine"
        {
            rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
            custom float2 ui:position = (-13.970851, 116.81738)

            def State "GesturesMainState"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine>
                custom float2 ui:position = (-109.05589, 91.23269)

                def StateMachine "GesturesStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                    custom float2 ui:position = (-263.86673, -119.88891)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (147.12581, -268.5565)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Tests/Test_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (72.68532, -284.6719)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-17.08268, 233.12703)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Tests/Test_4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-293.93393, 16.096813)
                        }
                    }

                    def State "Goodbye"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye/AnimationClip>
                        custom float2 ui:position = (-260.12592, 220.26587)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Goodbye>
                            bool inputs:loop = 0
                            custom float2 ui:position = (111.777916, 145.17232)
                        }
                    }

                    def Transition "Transition_Start_Goodbye"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Goodbye/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Goodbye"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Goodbye_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Goodbye_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Welcome"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome/AnimationClip>
                        custom float2 ui:position = (101.40455, -296.14594)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Welcome>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-275.29327, 72.526085)
                        }
                    }

                    def Transition "Transition_Start_Welcome"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Welcome/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Welcome"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Welcome_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Welcome_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Attraction_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1/AnimationClip>
                        custom float2 ui:position = (299.81107, 223.88834)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Attraction_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (119.811485, 136.25998)
                        }
                    }

                    def Transition "Transition_Start_Attraction_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Attraction_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Attraction_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Attraction_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Attraction_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Attraction_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2/AnimationClip>
                        custom float2 ui:position = (-163.9878, 150.96835)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Attraction_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-127.24554, -236.72385)
                        }
                    }

                    def Transition "Transition_Start_Attraction_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Attraction_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Attraction_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Attraction_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Attraction_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Bowing_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1/AnimationClip>
                        custom float2 ui:position = (-23.463062, -101.88254)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Bowing_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-199.04677, -46.974064)
                        }
                    }

                    def Transition "Transition_Start_Bowing_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Bowing_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Bowing_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Bowing_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Bowing_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Bowing_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2/AnimationClip>
                        custom float2 ui:position = (238.32059, -38.837837)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Bowing_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-31.624863, 125.29665)
                        }
                    }

                    def Transition "Transition_Start_Bowing_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Bowing_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Bowing_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Bowing_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Bowing_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Come_Here_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1/AnimationClip>
                        custom float2 ui:position = (14.497122, -222.46617)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Come_Here_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (246.23544, -33.5254)
                        }
                    }

                    def Transition "Transition_Start_Come_Here_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Come_Here_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Come_Here_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Come_Here_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Come_Here_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Dont_Understand_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1/AnimationClip>
                        custom float2 ui:position = (173.60265, -66.67492)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Dont_Understand_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (184.1076, -66.27815)
                        }
                    }

                    def Transition "Transition_Start_Dont_Understand_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Dont_Understand_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Dont_Understand_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Dont_Understand_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Dont_Understand_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Driving_Mime"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime/AnimationClip>
                        custom float2 ui:position = (-167.90428, -182.2832)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Driving_Mime>
                            bool inputs:loop = 0
                            custom float2 ui:position = (264.02078, 51.918156)
                        }
                    }

                    def Transition "Transition_Start_Driving_Mime"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Driving_Mime/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Driving_Mime"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Driving_Mime_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Driving_Mime_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Exhausted"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted/AnimationClip>
                        custom float2 ui:position = (-270.12405, -66.99144)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Exhausted>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-159.58244, -249.20576)
                        }
                    }

                    def Transition "Transition_Start_Exhausted"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Exhausted/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Exhausted"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Exhausted_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Exhausted_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Fistbump_Offer"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer/AnimationClip>
                        custom float2 ui:position = (-187.94647, -265.80573)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Fistbump_Offer>
                            bool inputs:loop = 0
                            custom float2 ui:position = (82.84418, -195.97568)
                        }
                    }

                    def Transition "Transition_Start_Fistbump_Offer"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Fistbump_Offer/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Fistbump_Offer"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Fistbump_Offer_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Fistbump_Offer_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "No_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1/AnimationClip>
                        custom float2 ui:position = (66.467926, 67.50405)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/No_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (122.95422, 7.27119)
                        }
                    }

                    def Transition "Transition_Start_No_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_No_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "No_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_No_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_No_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Nodding_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1/AnimationClip>
                        custom float2 ui:position = (-129.34561, 226.47447)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Nodding_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-88.15735, -25.023405)
                        }
                    }

                    def Transition "Transition_Start_Nodding_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Nodding_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Nodding_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Nodding_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Nodding_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Open_Question_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1/AnimationClip>
                        custom float2 ui:position = (79.12766, 9.674579)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Open_Question_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (273.881, 272.8306)
                        }
                    }

                    def Transition "Transition_Start_Open_Question_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Open_Question_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Open_Question_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Open_Question_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Open_Question_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Personal_Statement_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1/AnimationClip>
                        custom float2 ui:position = (257.8559, 260.4458)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Personal_Statement_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (48.57608, -5.878762)
                        }
                    }

                    def Transition "Transition_Start_Personal_Statement_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Personal_Statement_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Personal_Statement_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Personal_Statement_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Personal_Statement_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Personal_Statement_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2/AnimationClip>
                        custom float2 ui:position = (122.47009, -170.74825)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Personal_Statement_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-140.47678, -273.71564)
                        }
                    }

                    def Transition "Transition_Start_Personal_Statement_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Personal_Statement_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Personal_Statement_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Personal_Statement_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Personal_Statement_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Phone_Dialing"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing/AnimationClip>
                        custom float2 ui:position = (-202.28548, -297.67526)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Phone_Dialing>
                            bool inputs:loop = 0
                            custom float2 ui:position = (92.77654, -215.75581)
                        }
                    }

                    def Transition "Transition_Start_Phone_Dialing"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Phone_Dialing/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Phone_Dialing"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Phone_Dialing_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Phone_Dialing_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Please_Repeat_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1/AnimationClip>
                        custom float2 ui:position = (172.00761, 108.3024)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Please_Repeat_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (282.4055, -62.09131)
                        }
                    }

                    def Transition "Transition_Start_Please_Repeat_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Please_Repeat_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Please_Repeat_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Please_Repeat_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Please_Repeat_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Please_Repeat_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2/AnimationClip>
                        custom float2 ui:position = (252.83514, -27.777496)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Please_Repeat_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-96.29775, -238.59668)
                        }
                    }

                    def Transition "Transition_Start_Please_Repeat_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Please_Repeat_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Please_Repeat_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Please_Repeat_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Please_Repeat_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Backward_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1/AnimationClip>
                        custom float2 ui:position = (229.69931, 176.8741)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Backward_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-106.242615, -26.55337)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Backward_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Backward_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_Backward_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Backward_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Backward_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Down_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1/AnimationClip>
                        custom float2 ui:position = (-104.91392, -282.70255)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Down_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-273.3885, -78.77753)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Down_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Down_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_Down_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Down_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Down_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Down_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2/AnimationClip>
                        custom float2 ui:position = (-174.24521, 14.708762)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Down_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-187.32898, -179.02705)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Down_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Down_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_Down_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Down_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Down_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Left_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1/AnimationClip>
                        custom float2 ui:position = (103.60073, 141.36159)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Left_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-112.66074, 215.99664)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Left_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Left_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_Left_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Left_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Left_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Left_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2/AnimationClip>
                        custom float2 ui:position = (-147.21649, -93.63577)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Left_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (127.488235, -273.29825)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Left_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Left_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_Left_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Left_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Left_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_To_Self_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1/AnimationClip>
                        custom float2 ui:position = (260.51007, -256.59735)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_To_Self_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-23.441364, 134.7629)
                        }
                    }

                    def Transition "Transition_Start_Pointing_To_Self_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_To_Self_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_To_Self_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_Self_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_Self_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_To_User_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1/AnimationClip>
                        custom float2 ui:position = (-271.5189, 185.40161)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_To_User_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (287.336, -23.692997)
                        }
                    }

                    def Transition "Transition_Start_Pointing_To_User_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_To_User_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_To_User_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_User_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_User_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_To_User_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2/AnimationClip>
                        custom float2 ui:position = (-229.12582, -251.1138)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_To_User_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-240.76173, 159.26483)
                        }
                    }

                    def Transition "Transition_Start_Pointing_To_User_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_To_User_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pointing_To_User_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_User_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_User_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Presenting_Options_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1/AnimationClip>
                        custom float2 ui:position = (-51.592293, 251.5405)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Presenting_Options_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-35.616135, -253.71402)
                        }
                    }

                    def Transition "Transition_Start_Presenting_Options_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Presenting_Options_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Presenting_Options_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Presenting_Options_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Presenting_Options_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Presenting_Options_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2/AnimationClip>
                        custom float2 ui:position = (-43.838646, 152.89673)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Presenting_Options_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (197.60306, -276.38898)
                        }
                    }

                    def Transition "Transition_Start_Presenting_Options_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Presenting_Options_2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Presenting_Options_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Presenting_Options_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Presenting_Options_2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pulling_Mime"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime/AnimationClip>
                        custom float2 ui:position = (-191.76637, -5.9919286)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pulling_Mime>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-223.14871, 222.65558)
                        }
                    }

                    def Transition "Transition_Start_Pulling_Mime"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pulling_Mime/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Pulling_Mime"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pulling_Mime_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pulling_Mime_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Raise_Both_Arms"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms/AnimationClip>
                        custom float2 ui:position = (260.67654, -108.2418)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Raise_Both_Arms>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-39.093792, 34.232437)
                        }
                    }

                    def Transition "Transition_Start_Raise_Both_Arms"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Raise_Both_Arms/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Raise_Both_Arms"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Raise_Both_Arms_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Raise_Both_Arms_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Stupid_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1/AnimationClip>
                        custom float2 ui:position = (-128.69652, 24.645418)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Stupid_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-179.28897, -122.01525)
                        }
                    }

                    def Transition "Transition_Start_Stupid_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Stupid_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Stupid_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Stupid_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Stupid_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Success_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1/AnimationClip>
                        custom float2 ui:position = (-34.92982, 62.80194)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Success_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (21.699017, -143.40721)
                        }
                    }

                    def Transition "Transition_Start_Success_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Success_1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Success_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Success_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Success_1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Tell_Secret"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret/AnimationClip>
                        custom float2 ui:position = (-160.92728, -228.76186)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Tell_Secret>
                            bool inputs:loop = 0
                            custom float2 ui:position = (170.09618, -240.65955)
                        }
                    }

                    def Transition "Transition_Start_Tell_Secret"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Tell_Secret/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Tell_Secret"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Tell_Secret_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Tell_Secret_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "The_Robot"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot/AnimationClip>
                        custom float2 ui:position = (139.731, -150.73578)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/The_Robot>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-129.26581, 141.65005)
                        }
                    }

                    def Transition "Transition_Start_The_Robot"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_The_Robot/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "The_Robot"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_The_Robot_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_The_Robot_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Toss"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss/AnimationClip>
                        custom float2 ui:position = (95.77248, 145.15294)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Toss>
                            bool inputs:loop = 0
                            custom float2 ui:position = (9.169835, 215.45749)
                        }
                    }

                    def Transition "Transition_Start_Toss"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Toss/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Toss"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Toss_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Toss_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Trying_To_See"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See/AnimationClip>
                        custom float2 ui:position = (-226.92366, 87.11818)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Trying_To_See>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-229.0534, 142.37003)
                        }
                    }

                    def Transition "Transition_Start_Trying_To_See"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Trying_To_See/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "Trying_To_See"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Trying_To_See_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Trying_To_See_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "gesture_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Idle"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine>
                custom float2 ui:position = (-84.6572, 104.92926)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>
                    custom float2 ui:position = (122.09035, 96.365074)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-167.06522, 199.07993)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-155.91835, 10.891978)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (104.78745, -159.83809)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (77.10703, -127.901375)
                        }
                    }

                    def State "Idle_Loop"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle_Loop/AnimationClip>
                        custom float2 ui:position = (-197.17058, 185.8493)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (31.873663, -103.26917)
                        }
                    }

                    def State "Idle1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle1/AnimationClip>
                        custom float2 ui:position = (51.258568, -284.82816)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-222.1063, -62.65149)
                        }
                    }

                    def State "Idle2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle2/AnimationClip>
                        custom float2 ui:position = (285.45395, 6.284711)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-254.12628, 159.02437)
                        }
                    }

                    def State "Idle3"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle3/AnimationClip>
                        custom float2 ui:position = (168.86632, 164.8813)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle3>
                            bool inputs:loop = 0
                            custom float2 ui:position = (41.698822, 117.41924)
                        }
                    }

                    def State "Idle4"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle4/AnimationClip>
                        custom float2 ui:position = (-171.92523, 139.53636)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (189.70439, 155.97992)
                        }
                    }

                    def Transition "Transition_Start_Idle_Loop"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle_Loop/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle_Loop>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle_Loop_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle_Loop_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle_Loop>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "2"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle3"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle3/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle3>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "3"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle3_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle3_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle3>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle4"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle4/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle4>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "4"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle4_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle4_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle4>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Head_Idle"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine>
                custom float2 ui:position = (-87.92256, 54.61683)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End>
                    custom float2 ui:position = (77.393616, 240.48592)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-235.19167, 200.36026)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Head_Idle/Idle_FaceMotion>
                            bool inputs:loop = 0
                            custom float2 ui:position = (15.861335, -84.83153)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-26.63826, -292.4187)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Head_Idle/Idle_FaceMotion>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-167.95584, 91.65805)
                        }
                    }

                    def State "Idle_FaceMotion"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Idle_FaceMotion/AnimationClip>
                        custom float2 ui:position = (96.50957, -3.180636)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Head_Idle/Idle_FaceMotion>
                            bool inputs:loop = 0
                            custom float2 ui:position = (271.9955, -11.450947)
                        }
                    }

                    def Transition "Transition_Start_Idle_FaceMotion"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Transition_Start_Idle_FaceMotion/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Idle_FaceMotion>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle_FaceMotion_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Transition_Idle_FaceMotion_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Idle_FaceMotion>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Listening"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine>
                custom float2 ui:position = (-111.633804, 208.6685)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>
                    custom float2 ui:position = (-144.50502, 62.583595)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (122.05131, 193.01778)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (171.22125, -69.5446)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-264.49182, -277.02728)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (135.87624, 277.01483)
                        }
                    }

                    def State "Listening_Loop"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening_Loop/AnimationClip>
                        custom float2 ui:position = (-94.10078, -35.28294)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (135.4788, 94.698746)
                        }
                    }

                    def State "Listening1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening1/AnimationClip>
                        custom float2 ui:position = (-143.93605, 102.950905)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-117.05855, -86.18526)
                        }
                    }

                    def State "Listening2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening2/AnimationClip>
                        custom float2 ui:position = (23.707983, 139.38829)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-209.27028, -286.80768)
                        }
                    }

                    def State "Listening3"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening3/AnimationClip>
                        custom float2 ui:position = (76.697975, -285.2612)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening3>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-273.02206, -164.53465)
                        }
                    }

                    def State "Listening4"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening4/AnimationClip>
                        custom float2 ui:position = (92.326126, -260.07294)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-262.55655, 283.25595)
                        }
                    }

                    def Transition "Transition_Start_Listening_Loop"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening_Loop/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening_Loop>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening_Loop_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening_Loop_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening_Loop>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "2"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening3"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening3/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening3>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "3"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening3_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening3_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening3>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening4"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening4/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening4>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "4"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening4_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening4_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening4>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Talking"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine>
                custom float2 ui:position = (-46.408264, 235.45737)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>
                    custom float2 ui:position = (-170.08543, -38.872093)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-85.17892, -193.83868)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-102.71209, 292.07748)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (148.3854, -70.39903)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-54.42934, -141.75546)
                        }
                    }

                    def State "Talking_Loop"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking_Loop/AnimationClip>
                        custom float2 ui:position = (18.802008, 141.38214)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (111.98797, -22.410099)
                        }
                    }

                    def State "Talking1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking1/AnimationClip>
                        custom float2 ui:position = (-274.83658, 252.90468)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-54.639717, -65.82068)
                        }
                    }

                    def State "Talking2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking2/AnimationClip>
                        custom float2 ui:position = (-298.13394, -217.06367)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (221.31206, 8.360758)
                        }
                    }

                    def State "Talking3"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking3/AnimationClip>
                        custom float2 ui:position = (139.4609, -211.09927)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking3>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-101.9694, 204.08194)
                        }
                    }

                    def State "Talking4"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking4/AnimationClip>
                        custom float2 ui:position = (192.39511, -151.92345)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-286.81482, 183.88019)
                        }
                    }

                    def Transition "Transition_Start_Talking_Loop"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking_Loop/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking_Loop>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking_Loop_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking_Loop_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking_Loop>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking1/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking1_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking2/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "2"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking2_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking3"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking3/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking3>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "3"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking3_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking3_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking3>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking4"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking4/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking4>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "4"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking4_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking4_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking4>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Attentive"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine>
                custom float2 ui:position = (-198.6936, 172.60884)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>
                    custom float2 ui:position = (110.19554, -199.01114)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-252.90681, 256.58966)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Active>
                            bool inputs:loop = 0
                            custom float2 ui:position = (58.72704, 72.30611)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-25.492918, -209.95741)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Active>
                            bool inputs:loop = 0
                            custom float2 ui:position = (61.18195, -148.51627)
                        }
                    }

                    def State "Attentive_Active"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Active/AnimationClip>
                        custom float2 ui:position = (183.53679, 139.63138)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Active>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-283.63968, 259.4538)
                        }
                    }

                    def State "Attentive_Neutral"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Neutral/AnimationClip>
                        custom float2 ui:position = (-278.21036, -246.22841)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Neutral>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-124.35926, -209.51456)
                        }
                    }

                    def Transition "Transition_Start_Attentive_Active"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Start_Attentive_Active/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Active>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Attentive_Active_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Attentive_Active_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Active>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Attentive_Neutral"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Start_Attentive_Neutral/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Neutral>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Attentive_Neutral_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Attentive_Neutral_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Neutral>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Thinking"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine>
                custom float2 ui:position = (-158.31296, -86.514305)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End>
                    custom float2 ui:position = (141.29984, -57.173183)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-138.09615, -4.6121078)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Thinking/Thinking>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-64.44405, -113.54148)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (240.325, 30.26907)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Thinking/Thinking>
                            bool inputs:loop = 0
                            custom float2 ui:position = (286.3965, 163.74745)
                        }
                    }

                    def State "Thinking"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Thinking/AnimationClip>
                        custom float2 ui:position = (42.29958, -142.53204)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Thinking/Thinking>
                            bool inputs:loop = 0
                            custom float2 ui:position = (112.10619, -26.44937)
                        }
                    }

                    def Transition "Transition_Start_Thinking"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Transition_Start_Thinking/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Thinking>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Thinking_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Transition_Thinking_End/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Thinking>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.8
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def Transition "Transition_PostureMainState_Idle_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_GesturesMainState/Condition>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_GesturesMainState/Condition>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Head_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Head_Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_GesturesMainState/Condition>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Listening/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_GesturesMainState/Condition>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Talking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_GesturesMainState/Condition>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Attentive/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_GesturesMainState/Condition>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Thinking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Head_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Head_Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Listening/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Talking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Attentive/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Thinking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Listening/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Talking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Attentive/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Thinking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Head_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Head_Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Talking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Attentive/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Thinking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Head_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Head_Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Listening/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Attentive/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Thinking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Head_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Head_Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Listening/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Talking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Thinking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Head_Idle/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Head_Idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Listening/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Talking/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Attentive/ConditionAnd>
                float inputs:durationTime = 0.8
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "Attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionAnd"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Attentive/ConditionB>
                }
            }
        }
    }
}

