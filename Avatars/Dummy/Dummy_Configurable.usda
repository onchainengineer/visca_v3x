#usda 1.0
(
    customLayerData = {
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (238.73241813213812, 303.8252406577867, 238.1773949454216)
                double3 target = (-21.51260150344538, 43.58022723379122, -22.067624690161836)
            }
            dictionary Right = {
                double3 position = (-50000, 0, 0)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (0, 50000, 0)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary navmeshSettings = {
            double agentHeight = 180
            double agentRadius = 20
            bool excludeRigidBodies = 1
            int ver = 1
            double voxelCeiling = 460
        }
        dictionary omni_layer = {
            string authoring_layer = "./Dummy_Configurable.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 900
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 30
    upAxis = "Y"
)

def Xform "World"
{
    token visibility = "inherited"

    def "character" (
        instanceable = false
        prepend payload = @../../Animations/Rig_Retarget_Tagged.usda@
    )
    {
        over "character"
        {
            over "OUTPUT"
            {
                over "geo"
                {
                    rel material:binding = </World/Looks/Green_OmniPBR> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                    token visibility = "visible"

                    over "char_nvHumanTemplate_body_model_lo"
                    {
                        over "l_tearline_lo" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </World/Looks/OmniGlass> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }

                        over "r_tearline_lo" (
                            prepend apiSchemas = ["MaterialBindingAPI"]
                        )
                        {
                            rel material:binding = </World/Looks/OmniGlass> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }

                        over "l_eye_grp_lo"
                        {
                            over "l_choroid_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/Eye_OmniPBR> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "l_aqueous_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/OmniGlass> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                token visibility = "invisible"
                            }

                            over "l_cornea_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/OmniGlass> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                bool primvars:doNotCastShadows = 1
                            }

                            over "l_lens_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/Black_OmniPBR> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }

                        over "r_eye_grp_lo"
                        {
                            over "r_aqueous_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/OmniGlass> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                token visibility = "invisible"
                            }

                            over "r_cornea_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/OmniGlass> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                                bool primvars:doNotCastShadows = 1
                            }

                            over "r_choroid_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/Eye_OmniPBR> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "r_lens_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/Black_OmniPBR> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }

                        over "c_mouth_grp_lo"
                        {
                            over "c_bottomDenture_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/Teeth_OmniPBR> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "c_topDenture_lo" (
                                prepend apiSchemas = ["MaterialBindingAPI"]
                            )
                            {
                                rel material:binding = </World/Looks/Teeth_OmniPBR> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }
                        }
                    }
                }

                over "root_JNT"
                {
                    over "root_JNT"
                    {
                        prepend rel skel:animationSource = </World/DemoAnimation>
                    }
                }
            }
        }
    }

    def Scope "Looks"
    {
        def Material "Grey_OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Grey_OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Grey_OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Grey_OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.4, 0.3969112, 0.3969112) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    hidden = false
                    renderType = "color"
                )
                asset inputs:normalmap_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.43 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Green_OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Green_OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Green_OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Green_OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.089795925, 0.15, 0) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    hidden = false
                    renderType = "color"
                )
                asset inputs:normalmap_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.7 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Eye_OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Eye_OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Eye_OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Eye_OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.4, 0.3969112, 0.3969112) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @./textures/Eye_DemoCharacter.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.43 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "OmniGlass"
        {
            token outputs:mdl:displacement.connect = </World/Looks/OmniGlass/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/OmniGlass/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/OmniGlass/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Black_OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Black_OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Black_OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Black_OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.01, 0.01, 0.01) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    hidden = false
                    renderType = "color"
                )
                token outputs:out (
                    renderType = "material"
                )
            }
        }

        def Material "Teeth_OmniPBR"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Teeth_OmniPBR/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Teeth_OmniPBR/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Teeth_OmniPBR/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.79999995 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    hidden = false
                )
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Strength"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.52509654, 0.5250913, 0.5250913) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    hidden = false
                    renderType = "color"
                )
                asset inputs:diffuse_texture = @./textures/Teeth_DemoCharacter.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                asset inputs:normalmap_texture = @@ (
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                    renderType = "texture_2d"
                )
                float inputs:reflection_roughness_constant = 0.19999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    hidden = false
                )
                token outputs:out
            }
        }
    }
}

