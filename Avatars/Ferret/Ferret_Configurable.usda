#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-188.0752774801253, 200.60370346532176, -22.278900550691766)
                double3 target = (407.4301979811003, 111.91044485485301, 38.250189011018676)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
            dictionary renderSettings = {
            bool "rtx:indirectDiffuse:enabled" = 0
            int "rtx:ambientOcclusion:maxSamples" = 2
            int "rtx:ambientOcclusion:minSamples" = 2
            bool "rtx:directLighting:domeLight:enabled" = 0
            int "rtx:directLighting:domeLight:sampleCount" = 1
            bool "rtx:directLighting:sampledLighting:autoEnable" = 0
            int "rtx:directLighting:sampledLighting:autoEnableLightCountThreshold" = 2
            bool "rtx:matteObject:enabled" = 0
            double "rtx:post:aa:sharpness" = 0.4999999888241291
            int "rtx:post:dlss:execMode" = 0
            bool "rtx:post:dof:enabled" = 1
            double "rtx:post:dof:fNumber" = 1.5
            bool "rtx:post:dof:overrideEnabled" = 0
            double "rtx:post:dof:focalLength" = 24
            double "rtx:post:dof:subjectDistance" = 348.3999938964844
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 64
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            int "rtx:realtime:mgpu:tileOverlap" = 24
            double "rtx:reflections:maxRoughness" = 0.09999999776482582
            double "rtx:sceneDb:ambientLightIntensity" = 0
            int "rtx:translucency:maxRefractionBounces" = 6
            double "rtx:translucency:reflectionCutoff" = 0.02
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    color3f primvars:GlassesColor = (0.9, 0.9, 0.9)
    color3f primvars:HairColor = (1, 1, 1)
    color3f primvars:HatColor = (0.305, 0.085, 0.121)
    color3f primvars:OutfitColor1 = (0.18116, 0.48515, 0)
    color3f primvars:OutfitColor2 = (0.58, 0.51, 0.27)
    color3f primvars:ShoeColor1 = (0, 0, 0)
    color3f primvars:ShoeColor2 = (0, 0, 0)

    def Scope "transfer_data"
    {
    }

    def "character" (
        instanceable = false
        prepend payload = @./Ferret.usd@
    )
    {
        over "character"
        {
            over "glasses_variants" (
                variants = {
                    string glassesVariant = "glasses1"
                }
                prepend variantSets = "glassesVariant"
            )
            {
                variantSet "glassesVariant" = {
                    "glasses1" {           
                        over "glasses_1"
                        {
                            token visibility = "invisible"
                            over "Glasses1"
                            {
                                over "Glasses1"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "Glasses1_Frame"
                            {
                                over "Glasses1_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                        over "glasses_2"
                        {
                            token visibility = "invisible"
                            over "Glasses2_Frame"
                            {
                                over "Glasses2_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Glasses2"
                            {
                                over "Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }
                    
                    }
                    "glasses2" {
                        over "glasses_1"
                        {
                            token visibility = "visible"
                            over "Glasses1"
                            {
                                over "Glasses1"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "Glasses1_Frame"
                            {
                                over "Glasses1_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                        over "glasses_2"
                        {
                            token visibility = "invisible"
                            over "Glasses2_Frame"
                            {
                                over "Glasses2_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Glasses2"
                            {
                                over "Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }
                    
                    }
                    "glasses3" {
                        over "glasses_1"
                        {
                            token visibility = "invisible"
                            over "Glasses1"
                            {
                                over "Glasses1"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "Glasses1_Frame"
                            {
                                over "Glasses1_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                        over "glasses_2"
                        {
                            token visibility = "visible"
                            over "Glasses2_Frame"
                            {
                                over "Glasses2_Frame"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "Glasses2"
                            {
                                over "Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }
                    }
                }
            }

            over "Eye_Pivot_r"
            {
                over "GEO_Eye_r"
                {
                    over "GEO_Eye_r"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "GEO_Cornea_r"
                    {
                        over "GEO_Cornea_r"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "Eye_Pivot_l"
            {
                over "GEO_Eye_l"
                {
                    over "GEO_Eye_l"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "GEO_Cornea_l"
                    {
                        over "GEO_Cornea_l"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "GEO_Ferret_Body"
            {
                over "GEO_Ferret_Body"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_TeethUpper"
            {
                over "GEO_TeethUpper"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "outfit_variants" (
                variants = {
                    string outfitVariant = "outfit1"
                }
                prepend variantSets = "outfitVariant"
            )
            {
                variantSet "outfitVariant" = {
                    "outfit1" {
                        over "outfit1"
                        {
                            token visibility = "visible"
                            over "GEO_Ferret_Tie"
                            {
                                over "GEO_Ferret_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Fur_UnderTie"
                            {
                                over "GEO_Fur_UnderTie"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit2"
                        {
                            token visibility = "invisible"
                            over "GEO_Fur_UnderShirt"
                            {
                                over "GEO_Fur_UnderShirt"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"
                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }
                    }
                    "outfit2" {
                        over "outfit1"
                        {
                            token visibility = "invisible"
                            over "GEO_Ferret_Tie"
                            {
                                over "GEO_Ferret_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Fur_UnderTie"
                            {
                                over "GEO_Fur_UnderTie"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit2"
                        {
                            token visibility = "visible"
                            over "GEO_Fur_UnderShirt"
                            {
                                over "GEO_Fur_UnderShirt"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"
                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }
                    }
                    "outfit3" {
                        over "outfit1"
                        {
                            token visibility = "invisible"
                            over "GEO_Ferret_Tie"
                            {
                                over "GEO_Ferret_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Fur_UnderTie"
                            {
                                over "GEO_Fur_UnderTie"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit2"
                        {
                            token visibility = "invisible"
                            over "GEO_Fur_UnderShirt"
                            {
                                over "GEO_Fur_UnderShirt"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "visible"
                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }
                    }
                    "outfit4" {
                        over "outfit1"
                        {
                            token visibility = "visible"
                            over "GEO_Ferret_Tie"
                            {
                                over "GEO_Ferret_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Fur_UnderTie"
                            {
                                token visibility = "invisible"
                                over "GEO_Fur_UnderTie"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "outfit2"
                        {
                            token visibility = "visible"
                            over "GEO_Fur_UnderShirt"
                            {
                                over "GEO_Fur_UnderShirt"
                                {
                                    over "FurStrand_Small"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Small> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Large"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Large> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "FurStrand_Tiny"
                                    {
                                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Formal_Shirt"
                            {
                                over "GEO_Formal_Shirt"
                                {
                                    rel material:binding = </World/Looks/Shirt_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"
                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                        }
                    }
                }
            }

            over "GEO_Fur_Head"
            {
                over "GEO_Fur_Head"
                {
                    over "FurStrand_Small"
                    {
                        rel material:binding = </World/Looks/FurStrands_Small> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "FurStrand_Large"
                    {
                        rel material:binding = </World/Looks/FurStrands_Large> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "FurStrand_Tiny"
                    {
                        rel material:binding = </World/Looks/FurStrands_Tiny> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "GEO_Head"
            {
                over "GEO_Head"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Jaw_Group"
            {
                over "GEO_Tongue"
                {
                    over "GEO_Tongue"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }

                over "GEO_TeethLower"
                {
                    over "GEO_TeethLower"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "headgear_variants" (
                variants = {
                    string headgearVariant = "headgear1"
                }
                prepend variantSets = "headgearVariant"
            )
            {
                variantSet "headgearVariant" = {
                    "headgear1" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/character/materials/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "headgear2" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "visible"
                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/character/materials/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "headgear3" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "visible"
                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/character/materials/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "headgear4" {
                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "visible"
                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/character/materials/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "headgear5" {

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/character/materials/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                        
                        over "haeadgear_HardHat"
                        {
                            token visibility = "visible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "headgear6" {

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"
                            over "GEO_Baseballcap"
                            {
                                over "GEO_Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"
                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"
                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/character/materials/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                        
                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "visible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                }
            }

            over "Ferret_skeleton" (
                prepend apiSchemas = ["ControlRigAPI"]
            )
            {
                uniform token controlRig:forwardAxis = "MINUS Y"
                uniform token[] controlRig:retargetTags = ["", "", "", "Chest", "", "Left_Shoulder", "Left_Elbow", "Left_Hand", "", "", "", "Left_Index", "", "", "Left_Thumb", "", "", "", "Left_Middle", "", "", "", "Left_Ring", "", "", "", "Left_Pinky", "", "", "", "", "", "", "Head", "Left_Eye", "", "", "", "", "", "", "", "", "", "", "", "", "Right_Eye", "", "", "", "", "", "", "", "", "", "Right_Shoulder", "Right_Elbow", "Right_Hand", "", "", "", "Right_Index", "", "", "Right_Thumb", "", "", "", "Right_Middle", "", "", "", "Right_Ring", "", "", "", "Right_Pinky", "", "", "", "", "", "", "Left_Thigh", "", "Left_Knee", "Left_Foot", "Left_Toe", "", "", "Right_Thigh", "", "Right_Knee", "Right_Foot", "Right_Toe", "", "", "", ""]
                uniform matrix4d[] controlRig:retargetTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (-1, 2.6631610694494157e-7, -3.416321447957671e-8, 0), (-3.873026344081154e-9, 0.11291736364364624, 0.9936043620109558, 0), (2.684704725197662e-7, 0.9936043620109558, -0.11291730403900146, 0), (3.841870398202385e-15, -0.5599402785301208, 31.81968116760254, 1) ), ( (1, -3.666723102924152e-8, -6.251987656469282e-7, 0), (-3.41628805244909e-8, 0.9936044216156006, -0.11291705071926117, 0), (6.253406468204048e-7, 0.11291705071926117, 0.9936044216156006, 0), (-2.2737367544323206e-13, 19.30372428894043, 0, 1) ), ( (1, -1.0825615959220158e-8, -0.00000372670911019668, 0), (9.741571993515663e-10, 0.9999964833259583, -0.0026434636674821377, 0), (0.00000372672457160661, 0.0026434636674821377, 0.9999964833259583, 0), (0, 20.282920837402344, 0, 1) ), ( (-0.08630752563476562, -0.9864998459815979, 0.13917312026023865, 0), (-0.9961947798728943, 0.08715569972991943, 0, 0), (-0.012129731476306915, -0.1386435180902481, -0.9902681112289429, 0), (-6.809854984283447, 21.533966064453125, 0.2153921127319336, 1) ), ( (0.9902680516242981, 0, -0.13917310535907745, 0), (0, 1, 0, 0), (0.13917310535907745, 0, 0.9902680516242981, 0), (0, 8.133918762207031, 0, 1) ), ( (0.9902680516242981, 0, -0.13917310535907745, 0), (0, 1, 0, 0), (0.13917310535907745, 0, 0.9902680516242981, 0), (0.0000152587890625, 12.703475952148438, 4.76837158203125e-7, 1) ), ( (0.9972168803215027, 0.047661252319812775, -0.05733105540275574, 0), (-0.04931998252868652, 0.9983940124511719, -0.027873460203409195, 0), (0.05591049790382385, 0.030623450875282288, 0.9979660511016846, 0), (0.00003814697265625, 9.490631103515625, -0.000002384185791015625, 1) ), ( (0.11388653516769409, 0.1123746931552887, -0.9871178865432739, 0), (-0.14208868145942688, 0.985210657119751, 0.0957643985748291, 0), (0.9832805395126343, 0.12935201823711395, 0.12816941738128662, 0), (-1.1253128051757812, 2.008176803588867, 2.2335309982299805, 1) ), ( (0.9661937355995178, -0.2565537393093109, 0.0254923515021801, 0), (0.2578164041042328, 0.9612196683883667, -0.09791550785303116, 0), (0.000616840086877346, 0.10117769986391068, 0.9948681592941284, 0), (0, 3.796478271484375, 0.00000762939453125, 1) ), ( (0.953896164894104, 0.16399529576301575, -0.25137147307395935, 0), (-0.04564404860138893, 0.9070459604263306, 0.41855019330978394, 0), (0.29664573073387146, -0.3877798318862915, 0.8727130889892578, 0), (9.5367431640625e-7, 3.069915771484375, 0, 1) ), ( (0.9713905453681946, -0.1564296931028366, -0.17869023978710175, 0), (0.14176784455776215, 0.9856019020080566, -0.09214526414871216, 0), (0.1905316859483719, 0.06417649984359741, 0.9795810580253601, 0), (-4.76837158203125e-7, 2.9115142822265625, 0, 1) ), ( (-0.942827582359314, 0.06669096648693085, -0.3265402913093567, 0), (-0.08481508493423462, 0.8995050191879272, 0.428599089384079, 0), (0.3223083019256592, 0.4317905604839325, -0.8424217700958252, 0), (-0.9364166259765625, 0.04183197021484375, 3.8025155067443848, 1) ), ( (0.9560995101928711, 0.28713929653167725, -0.058521512895822525, 0), (-0.24150115251541138, 0.8851820230484009, 0.3976556062698364, 0), (0.16598473489284515, -0.3660653233528137, 0.9156665802001953, 0), (0.000003814697265625, 3.9692630767822266, 0, 1) ), ( (0.9647724628448486, 0.21177002787590027, -0.15610095858573914, 0), (-0.18553072214126587, 0.9683414697647095, 0.16701224446296692, 0), (0.18652722239494324, -0.13216730952262878, 0.9735190868377686, 0), (0, 3.0722007751464844, 0.0000019073486328125, 1) ), ( (0.14217442274093628, 0.022538669407367706, -0.9895849823951721, 0), (-0.10347091406583786, 0.9946020245552063, 0.00778719037771225, 0), (0.9844186902046204, 0.10128612071275711, 0.14373904466629028, 0), (-0.5103988647460938, 2.2239131927490234, 0.25247621536254883, 1) ), ( (0.9869639873504639, -0.1317869871854782, -0.09238111972808838, 0), (0.11276759952306747, 0.975811243057251, -0.1872856616973877, 0), (0.11482834815979004, 0.1744266152381897, 0.9779518246650696, 0), (-9.5367431640625e-7, 3.5406436920166016, -0.00000762939453125, 1) ), ( (0.9887338280677795, 0.14785391092300415, 0.02333708293735981, 0), (-0.14397338032722473, 0.8967260718345642, 0.41851404309272766, 0), (0.04095196723937988, -0.41715893149375916, 0.9079104661941528, 0), (0, 3.766569137573242, 0, 1) ), ( (0.9943108558654785, -0.10140889137983322, -0.03259042650461197, 0), (0.09876351803541183, 0.9923177361488342, -0.07450670003890991, 0), (0.03989569842815399, 0.07086408138275146, 0.9966878294944763, 0), (-4.76837158203125e-7, 3.5339012145996094, 0, 1) ), ( (0.16481834650039673, -0.11917591094970703, -0.9790975451469421, 0), (0.021218225359916687, 0.9928721189498901, -0.1172807365655899, 0), (0.9860957264900208, -0.0014447011053562164, 0.16617220640182495, 0), (0.12760162353515625, 2.066356658935547, -1.74287748336792, 1) ), ( (0.9912810325622559, 0.12538574635982513, 0.0405004546046257, 0), (-0.10873211920261383, 0.9520210027694702, -0.28606534004211426, 0), (-0.07442580908536911, 0.2791674733161926, 0.9573538303375244, 0), (0, 3.4162139892578125, 0, 1) ), ( (0.9952078461647034, 0.09168953448534012, 0.03397535905241966, 0), (-0.09721285849809647, 0.8903402090072632, 0.4447965621948242, 0), (0.01053356472402811, -0.4459678530693054, 0.8949869871139526, 0), (-9.5367431640625e-7, 3.6593289375305176, 0, 1) ), ( (0.9968402981758118, -0.07820025831460953, 0.013932830654084682, 0), (0.07920672744512558, 0.9917991757392883, -0.10030283033847809, 0), (-0.005974863655865192, 0.1010894775390625, 0.9948593974113464, 0), (0, 3.5133018493652344, 0, 1) ), ( (0.27176380157470703, -0.29482266306877136, -0.9160916805267334, 0), (0.2329501211643219, 0.9437620639801025, -0.23462176322937012, 0), (0.9337444305419922, -0.1496419906616211, 0.32515931129455566, 0), (0.753662109375, 1.5959186553955078, -3.6511623859405518, 1) ), ( (0.9116452932357788, 0.3998800218105316, -0.09486246109008789, 0), (-0.4085616171360016, 0.856818675994873, -0.31454595923423767, 0), (-0.04450070858001709, 0.32551148533821106, 0.9444903135299683, 0), (0, 3.578510284423828, 0, 1) ), ( (0.9912046194076538, 0.03966819494962692, 0.1262529492378235, 0), (-0.08241128921508789, 0.9314783811569214, 0.3543393909931183, 0), (-0.1035458892583847, -0.3616274893283844, 0.926554799079895, 0), (0, 3.474264144897461, -0.00000762939453125, 1) ), ( (0.9961962699890137, -0.07194356620311737, 0.04916474595665932, 0), (0.07831601798534393, 0.9865943789482117, -0.14317183196544647, 0), (-0.03820536658167839, 0.1464776247739792, 0.9884759187698364, 0), (0, 3.259601593017578, 0, 1) ), ( (0.9999997615814209, -0.0000034272770790266804, -0.0006794669316150248, 0), (0.000003427259343879996, 1, -2.72515077170965e-8, 0), (0.0006794669316150248, 2.4922792718484743e-8, 0.9999997615814209, 0), (0, 3.1635284423828125, 4.76837158203125e-7, 1) ), ( (0.9999991059303284, -0.000005245485681371065, -0.0013435744913294911, 0), (0.000005244945441518212, 1, -4.058548768171022e-7, 0), (0.0013435744913294911, 3.9880754343357694e-7, 0.9999991059303284, 0), (0.00000762939453125, 6.327079772949219, 0, 1) ), ( (0.9999994039535522, -0.0000015794897763043991, -0.0011031851172447205, 0), (0.0000015795554872966022, 1, 5.873337016737423e-8, 0), (0.0011031851172447205, -6.047587675084287e-8, 0.9999994039535522, 0), (0, 4.234489440917969, 0, 1) ), ( (0.9999976754188538, -0.000001296343498324859, -0.002146734157577157, 0), (0.0000012964555935468525, 1, 5.077848541645835e-8, 0), (0.002146734157577157, -5.356151078217408e-8, 0.9999976754188538, 0), (0.00000762939453125, 8.468978881835938, 4.76837158203125e-7, 1) ), ( (0.9579556584358215, 0.2666487991809845, 0.10592134296894073, 0), (0.09484323859214783, 0.05412471294403076, -0.9940197467803955, 0), (-0.2707871198654175, 0.9622727632522583, 0.02655923366546631, 0), (0.0000152587890625, 12.703475952148438, 4.76837158203125e-7, 1) ), ( (1, 8.888116553862346e-8, 0.000004763629021908855, 0), (5.010903691982094e-7, 0.9923189282417297, -0.12370585650205612, 0), (-0.000004738034022011561, 0.12370585650205612, 0.9923189282417297, 0), (-7.275957614183426e-12, 19.818754196166992, -0.0000019073486328125, 1) ), ( (1, -3.899177158928069e-8, -0.0000028605111310753273, 0), (-1.3037375623525804e-8, 0.9998345971107483, -0.018186504021286964, 0), (0.0000028607471449504374, 0.018186504021286964, 0.9998345971107483, 0), (1.8189894035458565e-12, 21.898216247558594, 0, 1) ), ( (0.998329222202301, 0.007839895784854889, 0.05724722146987915, 0), (0.052807290107011795, 0.2783634662628174, -0.9590230584144592, 0), (-0.023454176262021065, 0.9604437947273254, 0.27748435735702515, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (-0.8286515474319458, -0.0393272265791893, 0.5583815574645996, 0), (-0.26069387793540955, 0.9098586440086365, -0.3227939009666443, 0), (-0.49535369873046875, -0.4130503535270691, -0.764208197593689, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (0.8191062211990356, -0.010552316904067993, -0.5735447406768799, 0), (-0.5625216960906982, -0.21068799495697021, -0.7994871735572815, 0), (-0.11240260303020477, 0.977496325969696, -0.1785118579864502, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (0.14528608322143555, 0.118111252784729, -0.9823144674301147, 0), (-0.9705332517623901, -0.17590129375457764, -0.16469356417655945, 0), (-0.19224253296852112, 0.9772964715957642, 0.08907485008239746, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (0.7818855047225952, -0.6220917701721191, 0.04070407152175903, 0), (-0.00864747166633606, -0.07610750198364258, -0.997062087059021, 0), (0.6233620643615723, 0.7792364358901978, -0.06488680839538574, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (-0.14548206329345703, -0.13061365485191345, 0.9807013273239136, 0), (-0.8068027496337891, 0.5893834233283997, -0.04118868708610535, 0), (-0.5726293325424194, -0.797224760055542, -0.19112420082092285, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (-0.8225038051605225, 0.561434268951416, -0.09098975360393524, 0), (0.43151378631591797, 0.5117719769477844, -0.7428898215293884, 0), (-0.3705177903175354, -0.6502930521965027, -0.663201093673706, 0), (-8.440540313720703, 20.28851318359375, -9.414346694946289, 1) ), ( (-1, 0.000003462109361862531, -0.0000011298890285615926, 0), (0.0000020291286091378424, 0.2720465064048767, -0.9622840881347656, 0), (-0.000003024150828423444, -0.9622840881347656, -0.27204644680023193, 0), (0.000030230417905841023, 8.827049255371094, -14.105430603027344, 1) ), ( (-0.9999998807907104, -7.98948406099953e-7, -0.000003242668071834487, 0), (0.0000012168134162493516, 0.8170538544654846, -0.5765613317489624, 0), (0.0000031100773867365206, -0.5765613317489624, -0.8170537948608398, 0), (0.000033558775612618774, 8.981147766113281, -15.65843391418457, 1) ), ( (1, 0.0000031515219234279357, -0.0000059739741118391976, 0), (7.573916036562878e-7, 0.8265708088874817, 0.5628327131271362, 0), (0.000006711692549288273, -0.5628327131271362, 0.8265708088874817, 0), (-7.275957614183426e-12, 1.8205490112304688, 0, 1) ), ( (1, -3.0619798963016365e-7, 0.000007607696261402452, 0), (-8.439627663392457e-7, 0.9885758757591248, 0.15072403848171234, 0), (-0.000007566936346847797, -0.15072403848171234, 0.9885758757591248, 0), (0, 2.459644317626953, -0.00000762939453125, 1) ), ( (-0.9488282203674316, -0.17027713358402252, -0.2659524381160736, 0), (-0.058338481932878494, 0.9221925139427185, -0.3823055922985077, 0), (0.3103572428226471, -0.3472270667552948, -0.8849359750747681, 0), (-6.938653469085693, 8.228294372558594, -0.44355201721191406, 1) ), ( (-0.9216364622116089, -0.061218760907649994, 0.38319525122642517, 0), (-0.19713503122329712, 0.9244282245635986, -0.32645103335380554, 0), (-0.3342515528202057, -0.3764103949069977, -0.8640550374984741, 0), (-11.102338790893555, 8.228294372558594, -0.4435596466064453, 1) ), ( (0.9983294606208801, -0.007839923724532127, -0.05724307894706726, 0), (-0.05280330032110214, 0.27836352586746216, -0.9590231776237488, 0), (0.023453056812286377, 0.9604437947273254, 0.2774845361709595, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (-0.828649640083313, 0.039327338337898254, -0.558384358882904, 0), (0.26069504022598267, 0.9098586440086365, -0.32279300689697266, 0), (0.4953562617301941, -0.4130503535270691, -0.7642065286636353, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (0.8191038370132446, 0.010552555322647095, 0.5735481977462769, 0), (0.5625250339508057, -0.21068799495697021, -0.7994849681854248, 0), (0.11240309476852417, 0.9774963855743408, -0.178511381149292, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (0.1452818512916565, -0.11811167001724243, 0.9823150634765625, 0), (0.9705339074134827, -0.1759014129638672, -0.16468948125839233, 0), (0.19224241375923157, 0.9772964119911194, 0.08907610177993774, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (0.7818857431411743, 0.6220917701721191, -0.040700942277908325, 0), (0.008651405572891235, -0.07610738277435303, -0.997062087059021, 0), (-0.6233617067337036, 0.7792364358901978, -0.06488931179046631, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (-0.1454784870147705, 0.1306142807006836, -0.980701744556427, 0), (0.8068027496337891, 0.5893836617469788, -0.04118531942367554, 0), (0.5726302266120911, -0.7972244620323181, -0.1911226511001587, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (-0.8225040435791016, -0.5614344477653503, 0.09098616242408752, 0), (-0.4315107464790344, 0.511772096157074, -0.7428915500640869, 0), (0.3705207109451294, -0.6502927541732788, -0.6631995439529419, 0), (8.440582275390625, 20.28851318359375, -9.414312362670898, 1) ), ( (-0.948829174041748, 0.17027731239795685, 0.26594865322113037, 0), (0.058340203016996384, 0.9221925735473633, -0.3823052942752838, 0), (-0.31035375595092773, -0.34722694754600525, -0.8849371671676636, 0), (6.938655376434326, 8.228294372558594, -0.44352149963378906, 1) ), ( (-0.9216347932815552, 0.06121864914894104, -0.38319918513298035, 0), (0.19713634252548218, 0.9244282245635986, -0.3264502286911011, 0), (0.33425530791282654, -0.3764103651046753, -0.8640536069869995, 0), (11.102340698242188, 8.228294372558594, -0.443511962890625, 1) ), ( (-0.08630752563476562, 0.9864998459815979, -0.13917312026023865, 0), (0.9961947798728943, 0.08715569972991943, 0, 0), (0.012129731476306915, -0.1386435180902481, -0.9902681112289429, 0), (6.8098530769348145, 21.533966064453125, 0.21544742584228516, 1) ), ( (0.9902680516242981, 0, 0.13917310535907745, 0), (-0, 1, 0, 0), (-0.13917310535907745, -0, 0.9902680516242981, 0), (0, 8.133920669555664, -1.1920928955078125e-7, 1) ), ( (0.9902680516242981, 0, 0.13917310535907745, 0), (-0, 1, 0, 0), (-0.13917310535907745, -0, 0.9902680516242981, 0), (-0.000011444091796875, 12.703475952148438, 4.76837158203125e-7, 1) ), ( (0.9972168803215027, -0.047661323100328445, 0.057331036776304245, 0), (0.049320053309202194, 0.9983940124511719, -0.027873465791344643, 0), (-0.05591047927737236, 0.030623460188508034, 0.9979660511016846, 0), (-0.00003814697265625, 9.490642547607422, -0.000003337860107421875, 1) ), ( (0.11388629674911499, -0.11237476766109467, 0.9871179461479187, 0), (0.14208848774433136, 0.985210657119751, 0.09576453268527985, 0), (-0.983280599117279, 0.12935182452201843, 0.12816911935806274, 0), (1.12530517578125, 2.0081748962402344, 2.233532190322876, 1) ), ( (0.9661937355995178, 0.25655362010002136, -0.025492366403341293, 0), (-0.25781628489494324, 0.9612196683883667, -0.09791550785303116, 0), (-0.0006168121472001076, 0.10117769986391068, 0.9948681592941284, 0), (0, 3.796480178833008, 0, 1) ), ( (0.953896164894104, -0.16399523615837097, 0.2513716220855713, 0), (0.04564402252435684, 0.9070460796356201, 0.41854995489120483, 0), (-0.2966458201408386, -0.3877795934677124, 0.8727131485939026, 0), (0, 3.069920539855957, 0, 1) ), ( (0.9713905453681946, 0.15642964839935303, 0.17869004607200623, 0), (-0.14176782965660095, 0.9856019020080566, -0.09214513748884201, 0), (-0.19053149223327637, 0.06417641788721085, 0.9795811176300049, 0), (4.76837158203125e-7, 2.911518096923828, 0, 1) ), ( (-0.9428274631500244, -0.06669122725725174, 0.3265402317047119, 0), (0.08481474965810776, 0.8995051383972168, 0.4285988509654999, 0), (-0.32230842113494873, 0.43179020285606384, -0.8424217700958252, 0), (0.9364166259765625, 0.04183006286621094, 3.802516222000122, 1) ), ( (0.9560995697975159, -0.287138968706131, 0.058521684259176254, 0), (0.2415008246898651, 0.8851822018623352, 0.3976553678512573, 0), (-0.16598470509052277, -0.3660650849342346, 0.9156666398048401, 0), (-0.000003814697265625, 3.969268798828125, 0.000003814697265625, 1) ), ( (0.9647724628448486, -0.2117699682712555, 0.1561010777950287, 0), (0.1855306625366211, 0.9683415293693542, 0.16701215505599976, 0), (-0.1865273118019104, -0.13216719031333923, 0.9735190868377686, 0), (0.000003814697265625, 3.07220458984375, 0, 1) ), ( (0.1421741247177124, -0.022538654506206512, 0.9895851016044617, 0), (0.10347070544958115, 0.9946020245552063, 0.00778723880648613, 0), (-0.9844188094139099, 0.101285919547081, 0.14373880624771118, 0), (0.5103912353515625, 2.2239112854003906, 0.25247645378112793, 1) ), ( (0.9869639873504639, 0.13178694248199463, 0.09238110482692719, 0), (-0.11276756227016449, 0.975811243057251, -0.1872856765985489, 0), (-0.11482833325862885, 0.1744266301393509, 0.9779518246650696, 0), (0, 3.5406436920166016, 0, 1) ), ( (0.9887338280677795, -0.14785385131835938, -0.023337047547101974, 0), (0.14397332072257996, 0.896726131439209, 0.4185139834880829, 0), (-0.040951963514089584, -0.4171588718891144, 0.9079104661941528, 0), (-4.76837158203125e-7, 3.766571521759033, 0.00000762939453125, 1) ), ( (0.9943108558654785, 0.10140880942344666, 0.032590530812740326, 0), (-0.09876342117786407, 0.9923177361488342, -0.07450684905052185, 0), (-0.039895810186862946, 0.07086421549320221, 0.9966878294944763, 0), (4.76837158203125e-7, 3.5338973999023438, 0, 1) ), ( (0.1648181676864624, 0.11917588114738464, 0.9790975451469421, 0), (-0.02121821418404579, 0.9928721189498901, -0.11728070676326752, 0), (-0.9860957264900208, -0.0014447160065174103, 0.16617202758789062, 0), (-0.1276092529296875, 2.0663585662841797, -1.7428779602050781, 1) ), ( (0.9912810325622559, -0.12538568675518036, -0.04050050303339958, 0), (0.10873205214738846, 0.9520210027694702, -0.2860652208328247, 0), (0.07442581653594971, 0.2791673541069031, 0.9573538303375244, 0), (0, 3.4162139892578125, 0, 1) ), ( (0.9952079057693481, -0.09168945997953415, -0.03397538512945175, 0), (0.09721279889345169, 0.8903402090072632, 0.44479653239250183, 0), (-0.010533498600125313, -0.4459678828716278, 0.8949869871139526, 0), (0, 3.659332752227783, 0, 1) ), ( (0.9968402981758118, 0.07820022106170654, -0.013932768255472183, 0), (-0.0792066752910614, 0.9917991757392883, -0.10030290484428406, 0), (0.005974799394607544, 0.10108955204486847, 0.9948593974113464, 0), (0.0000019073486328125, 3.5132999420166016, 0, 1) ), ( (0.2717633843421936, 0.29482269287109375, 0.916091799736023, 0), (-0.2329501062631607, 0.9437620639801025, -0.23462185263633728, 0), (-0.9337445497512817, -0.14964205026626587, 0.32515889406204224, 0), (-0.7536544799804688, 1.595916748046875, -3.651163101196289, 1) ), ( (0.9116452932357788, -0.39987990260124207, 0.09486255049705505, 0), (0.4085615575313568, 0.8568187355995178, -0.3145458996295929, 0), (0.04450057074427605, 0.32551148533821106, 0.9444903135299683, 0), (-9.5367431640625e-7, 3.5785140991210938, 0, 1) ), ( (0.9912046790122986, -0.039668116718530655, -0.12625271081924438, 0), (0.08241112530231476, 0.9314784407615662, 0.35433927178382874, 0), (0.10354571044445038, -0.36162737011909485, 0.9265548586845398, 0), (-0.0000019073486328125, 3.47426700592041, 0, 1) ), ( (0.9961962103843689, 0.07194346189498901, -0.049164965748786926, 0), (-0.07831594347953796, 0.9865943789482117, -0.14317171275615692, 0), (0.03820560872554779, 0.14647753536701202, 0.9884759187698364, 0), (0, 3.2596092224121094, 0, 1) ), ( (0.9999997615814209, 0.0000035315977129357634, 0.0006796903326176107, 0), (-0.000003531554511937429, 1, -6.453518608395825e-8, 0), (-0.0006796903326176107, 6.213480219230405e-8, 0.9999997615814209, 0), (0, 3.163532257080078, -4.76837158203125e-7, 1) ), ( (0.9999991059303284, 0.000005260417310637422, 0.0013438089517876506, 0), (-0.000005259801582724322, 1, -4.6173474288480065e-7, 0), (-0.0013438089517876506, 4.5466615006262145e-7, 0.9999991059303284, 0), (-0.00000762939453125, 6.327083587646484, 0, 1) ), ( (0.9999994039535522, 0.000001668890263317735, 0.0011032035108655691, 0), (-0.000001668966206125333, 1, 6.798080676162499e-8, 0), (-0.0011032035108655691, -6.982197930938128e-8, 0.9999994039535522, 0), (0.000003814697265625, 4.2344818115234375, 0, 1) ), ( (0.9999976754188538, 0.000001281434265365533, 0.0021467509213835, 0), (-0.0000012815620493711322, 1, 5.819705606313619e-8, 0), (-0.0021467509213835, -6.094811766388375e-8, 0.9999976754188538, 0), (-0.000003814697265625, 8.468978881835938, 0, 1) ), ( (0.9579557180404663, -0.2666490077972412, -0.10592073947191238, 0), (-0.09484263509511948, 0.05412459373474121, -0.9940198063850403, 0), (0.2707873284816742, 0.9622727036476135, 0.026559293270111084, 0), (-0.000011444091796875, 12.703475952148438, 4.76837158203125e-7, 1) ), ( (1, -2.665097298404362e-8, -2.344228562378703e-7, 0), (-4.831690603168681e-13, -0.9935997724533081, 0.1129579171538353, 0), (-2.359329300816171e-7, -0.1129579171538353, -0.9935997724533081, 0), (-17.960372924804688, 3.9795360565185547, -2.253962516784668, 1) ), ( (0.9859997034072876, 0.11392837762832642, 0.12175767123699188, 0), (-0.15995720028877258, 0.8524909019470215, 0.4976675510406494, 0), (-0.047098856419324875, -0.5101760625839233, 0.8587794303894043, 0), (0.0000019073486328125, 9.40771484375, 0, 1) ), ( (0.8970038890838623, 0.0033557116985321045, 0.44200998544692993, 0), (-0.35328125953674316, 0.6064403057098389, 0.712336003780365, 0), (-0.2656622529029846, -0.795121967792511, 0.5451647639274597, 0), (0, 14.719597816467285, 0, 1) ), ( (0.903235912322998, -0.31920069456100464, 0.2868376076221466, 0), (0.3745095133781433, 0.25994038581848145, -0.8900413513183594, 0), (0.20954114198684692, 0.9113407135009766, 0.35433119535446167, 0), (0, 14.719597816467285, 0, 1) ), ( (0.9921467900276184, 0.12459951639175415, -0.010940693318843842, 0), (0.08294135332107544, -0.589909553527832, 0.8031982183456421, 0), (0.09362409263849258, -0.7977979183197021, -0.5956113338470459, 0), (-0.0000019073486328125, 16.57054901123047, 0, 1) ), ( (0.5961803197860718, 0.05082279443740845, -0.8012403845787048, 0), (-0.07776573300361633, 0.9969571828842163, 0.005373859778046608, 0), (0.7990754246711731, 0.05910525470972061, 0.5983184576034546, 0), (0, 13.879735946655273, 0, 1) ), ( (0.99882572889328, -0.02485840581357479, -0.041583649814128876, 0), (0.019813457503914833, -0.5736685991287231, 0.8188477754592896, 0), (-0.044210486114025116, -0.818710207939148, -0.5725024938583374, 0), (-17.994251251220703, 3.9795360565185547, -2.253962516784668, 1) ), ( (1, -6.076513159314345e-8, -5.344921873984276e-7, 0), (-1.0942358130705543e-12, -0.9935997724533081, 0.1129579171538353, 0), (-5.379351932788268e-7, -0.1129579171538353, -0.9935997724533081, 0), (17.960369110107422, 3.9795398712158203, -2.253974437713623, 1) ), ( (0.9859996438026428, -0.11392855644226074, -0.12175773084163666, 0), (0.1599573791027069, 0.8524908423423767, 0.4976676106452942, 0), (0.04709881171584129, -0.5101761221885681, 0.8587794303894043, 0), (0, 9.407716751098633, 0, 1) ), ( (0.897003710269928, -0.0033556371927261353, -0.4420102834701538, 0), (0.35328149795532227, 0.6064401865005493, 0.7123359441757202, 0), (0.2656624913215637, -0.7951220273971558, 0.5451645851135254, 0), (0.0000019073486328125, 14.719595909118652, 0.0000019073486328125, 1) ), ( (0.9032357335090637, 0.3192010521888733, -0.28683769702911377, 0), (-0.3745098114013672, 0.259940505027771, -0.8900412321090698, 0), (-0.20954133570194244, 0.911340594291687, 0.35433149337768555, 0), (0.0000019073486328125, 14.719595909118652, 0.0000019073486328125, 1) ), ( (0.9921467900276184, -0.12459944933652878, 0.010940451174974442, 0), (-0.08294110745191574, -0.589909553527832, 0.8031983375549316, 0), (-0.09362418949604034, -0.7977980375289917, -0.5956113338470459, 0), (0, 16.57054901123047, -7.152557373046875e-7, 1) ), ( (0.5961802005767822, -0.05082285404205322, 0.8012404441833496, 0), (0.07776577770709991, 0.9969571828842163, 0.005373910069465637, 0), (-0.7990754842758179, 0.05910526216030121, 0.5983183979988098, 0), (0, 13.87973403930664, 0, 1) ), ( (0.9988257884979248, 0.024858087301254272, 0.04158290475606918, 0), (-0.019813034683465958, -0.5736685991287231, 0.8188478350639343, 0), (0.0442097932100296, -0.8187102675437927, -0.5725024938583374, 0), (17.994247436523438, 3.9795398712158203, -2.253974437713623, 1) ), ( (-1, 1.4210854715202004e-14, 3.9221924907906214e-7, 0), (3.1619885021427763e-7, -0.5916719436645508, 0.806178867816925, 0), (2.3206513333207113e-7, 0.806178867816925, 0.5916719436645508, 0), (0.000005088713805889711, -7.155220031738281, 16.81946563720703, 1) ), ( (1, -5.96224793980582e-8, -2.9006788082597268e-8, 0), (6.630409643548774e-8, 0.8992207050323486, 0.43749529123306274, 0), (-1.0480505352461478e-12, -0.43749529123306274, 0.8992207050323486, 0), (0, 16.37323570251465, 0.0000019073486328125, 1) ), ( (1, -6.422408915796041e-8, -4.537204745247436e-8, 0), (7.86343221648167e-8, 0.8167442083358765, 0.5769999623298645, 0), (5.5067062021407764e-14, -0.5769999623298645, 0.8167442083358765, 0), (2.2737367544323206e-13, 14.632043838500977, 0, 1) )]
                uniform token controlRig:upAxis = "Z"
            }
        }
    }

    def Scope "Looks" (
        variants = {
            string eyeVariant = "darkbrown"
            string skinVariant = "medium"
        }
        prepend variantSets = "skinVariant"
        append variantSets = "eyeVariant"
    )
    {
        def Material "Hoodie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Hoodie_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Hoodie_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Glasses"
        {
            token outputs:mdl:surface.connect = </World/Looks/Glasses/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Glasses/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Glasses"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0.02 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.2 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/Glasses/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "cornea"
        {
            token outputs:mdl:surface.connect = </World/Looks/cornea/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/cornea/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "cornea"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.5 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @../_general/Cornea_NORM.jpg@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/cornea/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "UVMap"
                    float2 outputs:result
                }
            }
        }

        def Material "Glasses_Frame"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Glasses_Frame/data_lookup_color.outputs:out>
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "ChefsHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ChefsHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8996139, 0.8996049, 0.8996049) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ChefsHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/ChefsHat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-816.19147, 21.44432)
            }
        }

        def Material "DriversHat_Branded"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DriversHat_Branded/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-986.63086, 83.60689)
            }
        }

        def Material "DriversHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @../_general/DriversHat_Metal.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }
        }

        def Material "BaseballCap"
        {
            token outputs:mdl:displacement.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/BaseballCap/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/BaseballCap_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/BaseballCap/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/BaseballCap_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-930.96375, 160.52206)
            }
        }

        def Material "Branding"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Branding/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/NVIDIA_Logo_Transparent.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                int inputs:opacity_mode = 0 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @../_general/NVIDIA_Logo_Transparent.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Shirt_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 1 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/Formal_Shirt_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Formal_Shirt_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.95 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }

        def Material "Tie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Tie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @./textures/Ferret_Tie_Albedo.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Tie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Ferret_Tie_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Ferret_Tie_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-419.47623, -215.10246)
            }
        }
        variantSet "skinVariant" = {
            "dark" {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_reflection_color_image = @./textures/Ferret_Albedo_Dark.jpg@ (
                            hidden = false
                        )
                        asset inputs:geometry_normal_image = @./textures/Ferret_NORM.jpg@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Geometry"
                            displayName = "Geometry Normal Map Image"
                            hidden = false
                        )
                        bool inputs:geometry_normal_image_flip_g_channel = 1 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Geometry"
                            displayName = "Normal Map Flip G Channel"
                            hidden = false
                        )
                        float inputs:geometry_normal_strength = 0.5 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 3.4028235e38
                                    float min = 0
                                }
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Geometry"
                            displayName = "Geometry Normal Strength"
                            hidden = false
                        )
                        asset inputs:specular_reflection_roughness_image = @./textures/Ferret_Roughness.jpg@ (
                            hidden = false
                        )
                        float inputs:subsurface_scale = 1 (
                            hidden = false
                        )
                        asset inputs:subsurface_scattering_color_image = @./textures/Ferret_SSS.jpg@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ferret_Albedo_Dark.jpg@ (
                            hidden = false
                        )
                        float inputs:subsurface_weight = 0.5
                    }
                }

                def "FurStrands_Tiny" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor_Dark.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_TinyFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_TinyFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

                def "FurStrands_Small" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor_Dark.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_SmallFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_SmallFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

                def "FurStrands_Large" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor_Dark.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_LargeFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_LargeFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
            "light" {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_reflection_color_image = @./textures/Ferret_Albedo_Light.jpg@ (
                            hidden = false
                        )
                        asset inputs:geometry_normal_image = @./textures/Ferret_NORM.jpg@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Geometry"
                            displayName = "Geometry Normal Map Image"
                            hidden = false
                        )
                        bool inputs:geometry_normal_image_flip_g_channel = 1 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Geometry"
                            displayName = "Normal Map Flip G Channel"
                            hidden = false
                        )
                        float inputs:geometry_normal_strength = 0.5 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 3.4028235e38
                                    float min = 0
                                }
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Geometry"
                            displayName = "Geometry Normal Strength"
                            hidden = false
                        )
                        asset inputs:specular_reflection_roughness_image = @./textures/Ferret_Roughness.jpg@ (
                            hidden = false
                        )
                        float inputs:subsurface_scale = 1 (
                            hidden = false
                        )
                        asset inputs:subsurface_scattering_color_image = @./textures/Ferret_SSS.jpg@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ferret_Albedo_Light.jpg@ (
                            hidden = false
                        )
                        float inputs:subsurface_weight = 0.5
                    }
                }

                def "FurStrands_Tiny" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor_Light.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_TinyFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_TinyFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

                def "FurStrands_Small" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor_Light.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_SmallFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_SmallFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

                def "FurStrands_Large" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor_Light.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_LargeFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_LargeFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
            "medium" {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_reflection_color_image = @./textures/Ferret_Albedo.jpg@ (
                            hidden = false
                        )
                        asset inputs:geometry_normal_image = @./textures/Ferret_NORM.jpg@ (
                            colorSpace = "raw"
                            customData = {
                                asset default = @@
                            }
                            displayGroup = "Geometry"
                            displayName = "Geometry Normal Map Image"
                            hidden = false
                        )
                        bool inputs:geometry_normal_image_flip_g_channel = 1 (
                            customData = {
                                bool default = 0
                            }
                            displayGroup = "Geometry"
                            displayName = "Normal Map Flip G Channel"
                            hidden = false
                        )
                        float inputs:geometry_normal_strength = 0.5 (
                            customData = {
                                float default = 1
                                dictionary range = {
                                    float max = 3.4028235e38
                                    float min = 0
                                }
                                dictionary soft_range = {
                                    float max = 1
                                    float min = 0
                                }
                            }
                            displayGroup = "Geometry"
                            displayName = "Geometry Normal Strength"
                            hidden = false
                        )
                        asset inputs:specular_reflection_roughness_image = @./textures/Ferret_Roughness.jpg@ (
                            hidden = false
                        )
                        float inputs:subsurface_scale = 1 (
                            hidden = false
                        )
                        asset inputs:subsurface_scattering_color_image = @./textures/Ferret_SSS.jpg@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ferret_Albedo.jpg@ (
                            hidden = false
                        )
                        float inputs:subsurface_weight = 0.5
                    }
                }

                def "FurStrands_Tiny" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_TinyFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_TinyFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

                def "FurStrands_Small" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_SmallFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_SmallFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

                def "FurStrands_Large" (
                    prepend payload = @./textures/material_fur.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:diffuse_texture = @./textures/FurColor.jpg@ (
                            hidden = false
                        )
                        asset inputs:normalmap_texture = @./textures/Atlas_LargeFurStrands_NORM.jpg@ (
                            hidden = false
                        )
                        asset inputs:opacity_texture = @./textures/Atlas_LargeFurStrands_Alpha.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
        }
        variantSet "eyeVariant" = {
            "blue" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Blue.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
            "brown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_DarkBrown.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
            "darkbrown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @./textures/Eye_Black.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
            "gray" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Gray.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
            "green" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Green.jpg@ (
                            hidden = false
                        )
                    }
                }

            }
        }
        def Material "HardHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HardHat/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.9 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/HardHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HardHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/HardHat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/HardHat_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-801.3356, 183.71509)
            }
        }

        def Material "WesternHatMain"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatMain/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatMain/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }

        def Material "WesternHatBand"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatBand/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatBand/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }
    }
}

