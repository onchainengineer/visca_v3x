#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50000)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (63.461392071695, 157.73381545823014, 196.65372933276913)
                double3 target = (-53.7526692961934, 79.35436531461964, -123.05168060092876)
            }
            dictionary Right = {
                double3 position = (-50000, 0, -1.1102230246251565e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.329780281177466e-12, 50000, 1.1102230246251565e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            int "rtx:hydra:curves:splits" = 2
            double "rtx:hydra:points:defaultWidth" = 1
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 52
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            double "rtx:sceneDb:ambientLightIntensity" = 0
        }
    }
    defaultPrim = "World"
    endTimeCode = 100
    metersPerUnit = 0.01
    startTimeCode = 0
    timeCodesPerSecond = 24
    upAxis = "Y"
)

def Xform "World"
{
    color3f primvars:GlassesColor = (0.9, 0.9, 0.9)
    color3f primvars:HairColor = (0.323, 0.216, 0.102)
    color3f primvars:HatColor = (0.305, 0.085, 0.121)
    color3f primvars:OutfitColor1 = (1, 0.4, 0.5)
    color3f primvars:OutfitColor2 = (0.34, 0.39, 0.44)
    color3f primvars:ShoeColor1 = (0.01, 0.01, 0.01)
    color3f primvars:ShoeColor2 = (0.38, 0.14, 0.08)

    def Xform "LookAtTarget"
    {
        double3 xformOp:rotateXYZ = (0, 0, 0)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (0, 200, 300)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Scope "Looks" (
        variants = {
            string skinVariant = "light"
            string eyeVariant = "blue"
        }
        prepend variantSets = "skinVariant"
        append variantSets = "eyeVariant"
    )
    {
        variantSet "skinVariant" = {
            "dark"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Ted_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ted_Albedo_Dark.png@ (
                            hidden = false
                        )
                    }
                }
            }
            "medium"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Ted_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ted_Albedo_Medium.png@ (
                            hidden = false
                        )
                    }
                }
            }
            "light"
            {
                def "Skin_SSS" (
                    prepend payload = @../_general/material_skin.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:specular_reflection_roughness_image = @./textures/Ted_Roughness.png@ (
                            hidden = false
                        )
                        asset inputs:subsurface_transmission_color_image = @./textures/Ted_Albedo_Light.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }

        variantSet "eyeVariant" = {
            "blue" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Blue.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "brown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Brown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "darkbrown" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_DarkBrown.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "gray" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Gray.png@ (
                            hidden = false
                        )
                    }
                }   
            }
            "green" {
                def "eyes" (
                    prepend payload = @../_general/material_eyes.usda@
                )
                {
                    over "Shader"
                    {
                        asset inputs:subsurface_transmission_color_image = @../_general/Eye_Green.png@ (
                            hidden = false
                        )
                    }
                }   
            }
        }
        

        def Material "BeltBuckle"
        {
            token outputs:mdl:surface.connect = </World/Looks/BeltBuckle/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/BeltBuckle/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "BeltBuckle"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 0.5 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./textures/FancyPants_DIF.png@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./textures/FancyPant_NORM.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 1 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./textures/FancyPants_Roughness.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/BeltBuckle/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @./textures/FancyPants_DIF.png@
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </World/Looks/BeltBuckle/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "Glasses"
        {
            token outputs:mdl:surface.connect = </World/Looks/Glasses/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Glasses/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Glasses"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0.02 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.2 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/Glasses/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/Glasses/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "Watch"
        {
            token outputs:mdl:surface.connect = </World/Looks/Watch/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Watch/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Watch"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./textures/Watch_DIF.png@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @./textures/Watch_Metallic.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./textures/Watch_NORM.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./textures/Watch_Roughness.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Watch/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/Watch/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/Watch/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/Watch/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/Watch/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/Watch/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @./textures/Watch_DIF.png@
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </World/Looks/Watch/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "Watch_Glass"
        {
            token outputs:mdl:surface.connect = </World/Looks/Watch_Glass/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/Watch_Glass/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "Watch_Glass"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 1 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.03 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/Watch_Glass/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/Watch_Glass/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/Watch_Glass/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/Watch_Glass/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/Watch_Glass/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/Watch_Glass/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "ShoeSole2"
        {
            token outputs:mdl:surface.connect = </World/Looks/ShoeSole2/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/ShoeSole2/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "ShoeSole2"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.2, 0.2, 0.2) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.png@ (
                        colorSpace = "sRGB"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (0.05, 0.05, 0.05) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 1 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 1 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/ShoeSole2/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    asset inputs:file = @./textures/GuyShoes_Albedo.png@
                    token inputs:sourceColorSpace = "sRGB"
                    float2 inputs:st.connect = </World/Looks/ShoeSole2/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "cornea"
        {
            token outputs:mdl:surface.connect = </World/Looks/cornea/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/cornea/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "cornea"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniGlass.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniGlass"
                    color3f inputs:absorption_coeff = (0, 0, 0) (
                        customData = {
                            float3 default = (0, 0, 0)
                        }
                        hidden = true
                    )
                    float inputs:cutout_opacity = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:cutout_opacity_mono_source = 1 (
                        customData = {
                            int default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_alpha"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:cutout_opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        doc = "The opacity map"
                        hidden = false
                    )
                    float inputs:depth = 0.001 (
                        customData = {
                            float default = 0.001
                            dictionary range = {
                                float max = 1000
                                float min = 0
                            }
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Volume Absorption Scale"
                        doc = "Controls how much light is absorbed through the surface"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:frosting_roughness = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Glass Roughness"
                        doc = "Sets the roughness of the glass material "
                        hidden = false
                    )
                    color3f inputs:glass_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                            dictionary range = {
                                float3 max = (1, 1, 1)
                                float3 min = (0, 0, 0)
                            }
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color"
                        doc = "Sets the color of the glass"
                        hidden = false
                    )
                    asset inputs:glass_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Color"
                        displayName = "Glass Color Texture"
                        doc = "Specifies the texture to be used for the glass color of the material"
                        hidden = false
                    )
                    float inputs:glass_ior = 1.5 (
                        customData = {
                            float default = 1.491
                            dictionary soft_range = {
                                float max = 4
                                float min = 1
                            }
                        }
                        displayGroup = "Refraction"
                        displayName = "Glass IOR"
                        doc = "Sets IOR of the glass material "
                        hidden = false
                    )
                    float inputs:normal_map_strength = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Determines the degree of bumpiness"
                        hidden = false
                    )
                    asset inputs:normal_map_texture = @../_general/Cornea_NORM.png@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Texture"
                        doc = "The normal map texture"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    color3f inputs:reflection_color = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color"
                        hidden = false
                    )
                    asset inputs:reflection_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflection"
                        displayName = "Reflection Color Texture"
                        doc = "The reflection color texture"
                        hidden = false
                    )
                    asset inputs:roughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture"
                        doc = "The roughness texture"
                        hidden = false
                    )
                    float inputs:roughness_texture_influence = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Roughness"
                        displayName = "Roughness Texture Influence"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of the texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger numbers increase the size."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls the position of the texture."
                        hidden = false
                    )
                    bool inputs:thin_walled = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Refraction"
                        displayName = "Thin Walled"
                        doc = "When enabled, the material is considered thin-walled. Use this, when you have glass surfaces that are modeled with a single plane"
                        hidden = false
                    )
                    bool inputs:use_glass_color_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        hidden = true
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "Choose the UV Space Index to be used"
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    color3f inputs:emissiveColor = (0, 0, 0)
                    float inputs:ior.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:metallic = 0
                    normal3f inputs:normal.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:rgb>
                    float inputs:opacity.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:roughness.connect = </World/Looks/cornea/preview/Glass_Color_Texture.outputs:r>
                    float inputs:specular = 0.5
                    token outputs:surface
                }

                def Shader "Glass_Color_Texture"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/cornea/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "UVMap"
                    float2 outputs:result
                }
            }
        }

        def Material "Hoodie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Pants_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyPants_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyPants_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-892.5756, 147.44347)
            }
        }

        def Material "Socks"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Socks/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Socks/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Socks/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Socks/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "DressShirt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DressShirt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DressShirt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DressShirt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/DressShirt_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DressShirt/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/DressShirt_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/DressShirt_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-856.6802, 111.39916)
            }
        }

        def Material "Pants_Formal"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Pants_Formal/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Pants_Formal/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Pants_Formal/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/FancyPants_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Pants_Formal/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @./textures/FancyPants_Metal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/FancyPant_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/FancyPants_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "Shirt_Casual"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shirt_Casual/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shirt_Casual/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShirt_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-862.11914, 126.450386)
            }
        }

        def Material "Shoes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Shoes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Shoes/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Shoes/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "ShoeLaces"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeLaces/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeLaces/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeLaces/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeLaces/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "EyeBrowLashes"
        {
            token outputs:mdl:displacement.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/EyeBrowLashes/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.39999998 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                float inputs:bump_factor = 0.5 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Strength"
                    doc = "Strength of normal map."
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/EyeBrowsLashes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/EyeBrowLashes/data_lookup_color.outputs:out>
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/EyeBrowsLashes_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:opacity_constant = 0 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Amount"
                    doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                    hidden = false
                )
                asset inputs:opacity_texture = @../_general/EyeBrowsLashes_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.75 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-831.58685, 87.93512)
            }
        }

        def Material "HairStrands"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HairStrands/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HairStrands/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HairStrands/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniSurface.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniSurface"
                color3f inputs:diffuse_reflection_color = (0.1, 0.07, 0.05) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Base"
                    displayName = "Color"
                    hidden = false
                )
                float inputs:diffuse_reflection_weight = 1 (
                    customData = {
                        float default = 0.8
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Base"
                    displayName = "Weight"
                    hidden = false
                )
                bool inputs:enable_diffuse_transmission = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Subsurface"
                    displayName = "Enable Subsurface"
                    doc = "Enables the use of subsurface"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_specular_transmission = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Transmission"
                    displayName = "Enable Transmission"
                    doc = "Enables the use of transmission"
                    hidden = false
                )
                asset inputs:geometry_normal_image = @./textures/HairStrands_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Map Image"
                    hidden = false
                )
                bool inputs:geometry_normal_image_flip_g_channel = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Normal Map Flip G Channel"
                    hidden = false
                )
                float inputs:geometry_normal_strength = 0.5 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Geometry Normal Strength"
                    hidden = false
                )
                float inputs:geometry_opacity = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity"
                    hidden = false
                )
                asset inputs:geometry_opacity_image = @./textures/HairStrands_Alpha.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image"
                    hidden = false
                )
                int inputs:geometry_opacity_image_alpha_mode = 1 (
                    customData = {
                        int default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Image Alpha Mode"
                    hidden = false
                    renderType = "::OmniSurface::OmniImage::alpha_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "alpha_default"
                        string options = "alpha_default:0|alpha_red:1|alpha_green:2|alpha_blue:3|alpha_white:4|alpha_black:5|alpha_luminance:6|alpha_average:7"
                    }
                )
                float inputs:geometry_opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Geometry"
                    displayName = "Opacity Threshold"
                    doc = "If > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:specular_reflection_ior = 1.55 (
                    customData = {
                        float default = 1.5
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 5
                            float min = 1
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "IOR"
                    hidden = false
                )
                float inputs:specular_reflection_roughness = 0.5 (
                    customData = {
                        float default = 0.2
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Roughness"
                    hidden = false
                )
                float inputs:specular_reflection_weight = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Specular"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:specular_transmission_weight = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Transmission"
                    displayName = "Weight"
                    hidden = false
                )
                float inputs:subsurface_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary range = {
                            float max = 3.4028235e38
                            float min = 0
                        }
                        dictionary soft_range = {
                            float max = 10
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Scale"
                    hidden = false
                )
                color3f inputs:subsurface_scattering_color = (1, 0.9837925, 0.9471947) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Radius (mfp)"
                    hidden = false
                )
                color3f inputs:subsurface_transmission_color = (0.99999315, 0.99999, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color"
                    hidden = false
                )
                color3f inputs:subsurface_transmission_color.connect = </World/Looks/HairStrands/data_lookup_color.outputs:out>
                asset inputs:subsurface_transmission_color_image = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Color Image"
                    hidden = false
                )
                float inputs:subsurface_weight = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight"
                    hidden = false
                )
                asset inputs:subsurface_weight_image = @./textures/HairStrands_SSSMix.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Subsurface"
                    displayName = "Weight Image"
                    hidden = false
                )
                bool inputs:thin_walled = 0 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Geometry"
                    displayName = "Thin Walled"
                    doc = "Thin surface with no interior."
                    hidden = false
                )
                float3 inputs:uvw_projection_scale = (11, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale"
                    doc = "Scale the projected texture."
                    hidden = false
                )
                float inputs:uvw_s_scale = 1 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 100
                            float min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale U"
                    hidden = false
                )
                float inputs:uvw_t_scale = 0.2 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 100
                            float min = 0
                        }
                    }
                    displayGroup = "UVW Coordinates"
                    displayName = "Scale V"
                    hidden = false
                )
                token outputs:out
                color3f subsurface_transmission_color.connect = </World/Looks/Hair/data_lookup_color.outputs:out>
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-512.9804, 21.023666)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-893.928, 1140.235)
            }
        }

        def Material "Glasses_Frame"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Glasses_Frame/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Glasses_Frame/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "HairBase"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HairBase/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HairBase/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HairBase/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/Hair_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HairBase/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/Hair_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/Hair_Rough.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HairColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-804.67847, 83.20347)
            }
        }

        def Material "ChefsHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ChefsHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ChefsHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8996139, 0.8996049, 0.8996049) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ChefsHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/ChefsHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-816.19147, 21.44432)
            }
        }

        def Material "DriversHat_Branded"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat_Branded/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/DriversHat_Branded/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-986.63086, 83.60689)
            }
        }

        def Material "DriversHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/DriversHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/DriversHat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/DriversHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @../_general/DriversHat_Metal.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/DriversHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/DriversHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }
        }

        def Material "BaseballCap"
        {
            token outputs:mdl:displacement.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/BaseballCap/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/BaseballCap/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/BaseballCap_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/BaseballCap/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/BaseballCap_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-930.96375, 160.52206)
            }
        }

        def Material "ShoeSole1"
        {
            token outputs:mdl:displacement.connect = </World/Looks/ShoeSole1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/ShoeSole1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/ShoeSole1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/GuyShoes_Albedo.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/ShoeSole1/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @./textures/GuyShoes_Normal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.5 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/GuyShoes_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-945.19543, 345.9053)
            }
        }

        def Material "Belt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Belt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Belt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Belt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @./textures/FancyPants_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Belt/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:metallic_texture = @./textures/FancyPants_Metal.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @./textures/FancyPants_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "ShoeColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-844.2693, 256.29074)
            }
        }

        def Material "NameTag"
        {
            token outputs:mdl:surface.connect = </World/Looks/NameTag/mdl/Shader.outputs:out>
            token outputs:surface.connect = </World/Looks/NameTag/preview/Principled_BSDF.outputs:surface>
            custom string userProperties:blenderName:data = "NameTag"

            def Scope "mdl"
            {
                def Shader "Shader"
                {
                    uniform token info:implementationSource = "sourceAsset"
                    uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                    uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                    float inputs:albedo_add = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = -1
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Add"
                        doc = "Adds a constant value to the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_brightness = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Brightness"
                        doc = "Multiplier for the diffuse color "
                        hidden = false
                    )
                    float inputs:albedo_desaturation = 0 (
                        customData = {
                            float default = 0
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Desaturation"
                        doc = "Desaturates the diffuse color"
                        hidden = false
                    )
                    asset inputs:ao_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "AO"
                        displayName = "Ambient Occlusion Map"
                        doc = "The Ambient Occlusion texture for the material"
                        hidden = false
                    )
                    float inputs:ao_to_diffuse = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "AO"
                        displayName = "AO to Diffuse"
                        doc = "Controls the amount of ambient occlusion multiplied into the diffuse color channel"
                        hidden = false
                    )
                    float inputs:bump_factor = 1 (
                        customData = {
                            float default = 1
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Strength"
                        doc = "Strength of normal map."
                        hidden = false
                    )
                    float inputs:detail_bump_factor = 1 (
                        customData = {
                            float default = 0.3
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Strength"
                        doc = "Strength of the detail normal"
                        hidden = false
                    )
                    asset inputs:detail_normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Detail Normal Map"
                        hidden = false
                    )
                    float inputs:detail_texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Rotate"
                        doc = "Rotates angle of the detail texture in degrees."
                        hidden = false
                    )
                    float2 inputs:detail_texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Scale"
                        doc = "Larger numbers increase the size of the detail texture"
                        hidden = false
                    )
                    float2 inputs:detail_texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Detail Texture Translate"
                        doc = "Controls the position of the detail texture."
                        hidden = false
                    )
                    color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                        customData = {
                            float3 default = (0.2, 0.2, 0.2)
                        }
                        displayGroup = "Albedo"
                        displayName = "Base Color"
                        doc = "This is the base color"
                        hidden = false
                    )
                    asset inputs:diffuse_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Albedo"
                        displayName = "Albedo Map"
                        hidden = false
                    )
                    color3f inputs:diffuse_tint = (1, 1, 1) (
                        customData = {
                            float3 default = (1, 1, 1)
                        }
                        displayGroup = "Albedo"
                        displayName = "Color Tint"
                        doc = "When enabled, this color value is multiplied over the final albedo color"
                        hidden = false
                    )
                    color3f inputs:emissive_color = (0, 0, 0) (
                        customData = {
                            float3 default = (1, 0.1, 0.1)
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color"
                        doc = "The emission color"
                        hidden = false
                    )
                    asset inputs:emissive_color_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Color map"
                        doc = "The emissive color texture"
                        hidden = false
                    )
                    float inputs:emissive_intensity = 27320.537 (
                        customData = {
                            float default = 40
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Intensity"
                        doc = "Intensity of the emission"
                        hidden = false
                    )
                    asset inputs:emissive_mask_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Emissive"
                        displayName = "Emissive Mask map"
                        doc = "The texture masking the emissive color"
                        hidden = false
                    )
                    bool inputs:enable_emission = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Emissive"
                        displayName = "Enable Emission"
                        doc = "Enables the emission of light from the material"
                        hidden = false
                    )
                    bool inputs:enable_opacity = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity"
                        doc = "Enables the use of cutout opacity"
                        hidden = false
                    )
                    bool inputs:enable_opacity_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Opacity"
                        displayName = "Enable Opacity Texture"
                        doc = "Enables or disables the usage of the opacity texture map"
                        hidden = false
                    )
                    bool inputs:enable_ORM_texture = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Enable ORM Texture"
                        doc = "When True the ORM texture will be used to extract the Occlusion, Roughness and Metallic Map"
                        hidden = false
                    )
                    bool inputs:flip_tangent_u = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip U Tangent"
                        hidden = false
                    )
                    bool inputs:flip_tangent_v = 0 (
                        customData = {
                            bool default = 1
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map Flip V Tangent"
                        hidden = false
                    )
                    float inputs:metallic_constant = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Amount"
                        doc = "Metallic Material"
                        hidden = false
                    )
                    asset inputs:metallic_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map"
                        hidden = false
                    )
                    float inputs:metallic_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Metallic Map Influence"
                        doc = "Blends between the constant value and the lookup of the metallic texture"
                        hidden = false
                    )
                    asset inputs:normalmap_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Normal"
                        displayName = "Normal Map"
                        doc = "Enables the usage of the normalmap texture"
                        hidden = false
                    )
                    float inputs:opacity_constant = 0 (
                        customData = {
                            float default = 1
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Amount"
                        doc = "Opacity value between 0 and 1, when Opacity Map is not valid"
                        hidden = false
                    )
                    int inputs:opacity_mode = 1 (
                        customData = {
                            int default = 1
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Mono Source"
                        doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                        hidden = false
                        renderType = "::base::mono_mode"
                        sdrMetadata = {
                            string __SDR__enum_value = "mono_average"
                            string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                        }
                    )
                    asset inputs:opacity_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Map"
                        hidden = false
                    )
                    float inputs:opacity_threshold = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Opacity"
                        displayName = "Opacity Threshold"
                        doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                        hidden = false
                    )
                    asset inputs:ORM_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "ORM Map"
                        doc = "Texture that hae Occlusion, Roughness and Metallic map stored in the respective r, g and b channels"
                        hidden = false
                    )
                    bool inputs:project_uvw = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable Project UVW Coordinates"
                        doc = "When enabled, UV coordinates will be generated by projecting them from a coordinate system"
                        hidden = false
                    )
                    float inputs:reflection_roughness_constant = 0.3 (
                        customData = {
                            float default = 0.5
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Amount"
                        doc = "Higher roughness values lead to more blurry reflections"
                        hidden = false
                    )
                    float inputs:reflection_roughness_texture_influence = 0 (
                        customData = {
                            float default = 0
                            dictionary range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map Influence"
                        doc = "Blends between the constant value and the lookup of the roughness texture"
                        hidden = false
                    )
                    asset inputs:reflectionroughness_texture = @@ (
                        colorSpace = "raw"
                        customData = {
                            asset default = @@
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Roughness Map"
                        hidden = false
                    )
                    float inputs:specular_level = 0.5 (
                        customData = {
                            float default = 0.5
                            dictionary soft_range = {
                                float max = 1
                                float min = 0
                            }
                        }
                        displayGroup = "Reflectivity"
                        displayName = "Specular"
                        doc = "The specular level (intensity) of the material"
                        hidden = false
                    )
                    float inputs:texture_rotate = -0 (
                        customData = {
                            float default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Texture Rotate"
                        doc = "Rotates angle of texture in degrees."
                        hidden = false
                    )
                    float2 inputs:texture_scale = (1, 1) (
                        customData = {
                            float2 default = (1, 1)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Scale"
                        doc = "Larger number increases size of texture."
                        hidden = false
                    )
                    float2 inputs:texture_translate = (0, 0) (
                        customData = {
                            float2 default = (0, 0)
                        }
                        displayGroup = "UV"
                        displayName = "Texture Translate"
                        doc = "Controls position of texture."
                        hidden = false
                    )
                    int inputs:uv_space_index = 0 (
                        customData = {
                            int default = 0
                            dictionary range = {
                                int max = 3
                                int min = 0
                            }
                        }
                        displayGroup = "UV"
                        displayName = "UV Space Index"
                        doc = "UV Space Index."
                        hidden = false
                    )
                    bool inputs:world_or_object = 0 (
                        customData = {
                            bool default = 0
                        }
                        displayGroup = "UV"
                        displayName = "Enable World Space"
                        doc = "When set to 'true' uses world space for projection, when 'false' object space is used"
                        hidden = false
                    )
                    token outputs:out
                }
            }

            def Scope "preview"
            {
                def Shader "Principled_BSDF"
                {
                    uniform token info:id = "UsdPreviewSurface"
                    float inputs:clearcoat = 0
                    float inputs:clearcoatRoughness = 0.03
                    color3f inputs:diffuseColor.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:rgb>
                    color3f inputs:emissiveColor.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:rgb>
                    float inputs:ior = 1.45
                    float inputs:metallic.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:r>
                    normal3f inputs:normal.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:rgb>
                    float inputs:opacity = 1
                    float inputs:roughness.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:r>
                    float inputs:specular.connect = </World/Looks/NameTag/preview/Albedo_Map.outputs:r>
                    token outputs:surface
                }

                def Shader "Albedo_Map"
                {
                    uniform token info:id = "UsdUVTexture"
                    float2 inputs:st.connect = </World/Looks/NameTag/preview/UV_Map.outputs:result>
                    token inputs:wrapS = "repeat"
                    token inputs:wrapT = "repeat"
                    float outputs:r
                    color3f outputs:rgb
                }

                def Shader "UV_Map"
                {
                    uniform token info:id = "UsdPrimvarReader_float2"
                    token inputs:varname = "_"
                    float2 outputs:result
                }
            }
        }

        def Material "Branding"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Branding/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Branding/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                bool inputs:enable_opacity = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity"
                    doc = "Enables the use of cutout opacity"
                    hidden = false
                )
                bool inputs:enable_opacity_texture = 1 (
                    customData = {
                        bool default = 0
                    }
                    displayGroup = "Opacity"
                    displayName = "Enable Opacity Texture"
                    doc = "Enables or disables the usage of the opacity texture map"
                    hidden = false
                )
                int inputs:opacity_mode = 0 (
                    customData = {
                        int default = 1
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Mono Source"
                    doc = "Determines how to lookup opacity from the supplied texture. mono_alpha, mono_average, mono_luminance, mono_maximum"
                    hidden = false
                    renderType = "::base::mono_mode"
                    sdrMetadata = {
                        string __SDR__enum_value = "mono_average"
                        string options = "mono_alpha:0|mono_average:1|mono_luminance:2|mono_maximum:3"
                    }
                )
                asset inputs:opacity_texture = @../_general/NVIDIA_Logo_Transparent.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Map"
                    hidden = false
                )
                float inputs:opacity_threshold = 0.5 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Opacity"
                    displayName = "Opacity Threshold"
                    doc = "If negative, disable cutout_opacity; if 0, use fractional opacity values 'as is'; if > 0, remap opacity values to 1 when >= threshold and to 0 otherwise"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.79999995 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "Hoodie_Secondary"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Hoodie_Secondary/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/Hoodie_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Hoodie_Secondary/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Hoodie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Hoodie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "Tie"
        {
            token outputs:mdl:displacement.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/Tie/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/Tie/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.9, 0.9) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                asset inputs:diffuse_texture = @@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/Tie/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/Tie_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/Tie_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value = (0.91467035, 1, 0.5830116) (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-927.4453, 167.08766)
            }
        }

        def Material "LabCoat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @../_general/Polyester_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Shirt"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Shirt/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.8, 0.8, 0.8) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Color"
                    doc = "This is the albedo base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Shirt/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/LabCoat_Shirt_NORM.jpg@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor1" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-847.7966, 117.52515)
            }
        }

        def Material "LabCoat_Buttons"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Buttons/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:detail_bump_factor = 0.3 (
                    customData = {
                        float default = 0.3
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Strength"
                    doc = "Strength of the detail normal"
                    hidden = false
                )
                asset inputs:detail_normalmap_texture = @@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Detail Normal Map"
                    hidden = false
                )
                float2 inputs:detail_texture_scale = (30, 30) (
                    customData = {
                        float2 default = (1, 1)
                    }
                    displayGroup = "UV"
                    displayName = "Detail Texture Scale"
                    doc = "Larger numbers increase the size of the detail texture"
                    hidden = false
                )
                color3f inputs:diffuse_color_constant = (0.8, 0.799992, 0.799992) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Buttons/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/LabCoat_Buttons_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    doc = "Enables the usage of the normalmap texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 1 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/LabCoat_Buttons_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-784.462, 123.53502)
            }
        }

        def Material "LabCoat_Pen1"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen1/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                color3f inputs:diffuse_color_constant = (0.9, 0.899991, 0.899991) (
                    customData = {
                        float3 default = (0.2, 0.2, 0.2)
                    }
                    displayGroup = "Albedo"
                    displayName = "Base Color"
                    doc = "This is the base color"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/LabCoat_Pen1/data_lookup_color.outputs:out>
                float inputs:reflection_roughness_constant = 0.29999998 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "GlassesColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-855.50385, 101.25165)
            }
        }

        def Material "LabCoat_Pen2"
        {
            token outputs:mdl:displacement.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/LabCoat_Pen2/Shader.outputs:out>

            def Shader "Shader"
            {
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:metallic_constant = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Amount"
                    doc = "Metallic Material"
                    hidden = false
                )
                float inputs:metallic_texture_influence = 0 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Metallic Map Influence"
                    doc = "Blends between the constant value and the lookup of the metallic texture"
                    hidden = false
                )
                float inputs:reflection_roughness_constant = 0.14999999 (
                    customData = {
                        float default = 0.5
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Amount"
                    doc = "Higher roughness values lead to more blurry reflections"
                    hidden = false
                )
                token outputs:out
            }
        }

        def Material "HardHat"
        {
            token outputs:mdl:displacement.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/HardHat/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/HardHat/Shader.outputs:out>

            def Shader "Shader"
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                float inputs:albedo_brightness = 0.9 (
                    customData = {
                        float default = 1
                        dictionary soft_range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Brightness"
                    doc = "Multiplier for the diffuse color "
                    hidden = false
                )
                asset inputs:diffuse_texture = @../_general/HardHat_DIF.jpg@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/HardHat/data_lookup_color.outputs:out>
                bool inputs:flip_tangent_v = 0 (
                    customData = {
                        bool default = 1
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map Flip V Tangent"
                    hidden = false
                )
                asset inputs:normalmap_texture = @../_general/HardHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/HardHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    customData = {
                        string default = ""
                    }
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-801.3356, 183.71509)
            }
        }

        def Material "WesternHatMain"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatMain/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatMain/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatMain/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "HatColor" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }

        def Material "WesternHatBand"
        {
            token outputs:mdl:displacement.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:surface.connect = </World/Looks/WesternHatBand/Shader.outputs:out>
            token outputs:mdl:volume.connect = </World/Looks/WesternHatBand/Shader.outputs:out>

            def Shader "Shader" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:diffuse_color_constant", "inputs:diffuse_texture", "inputs:albedo_desaturation", "inputs:albedo_add", "inputs:albedo_brightness", "inputs:diffuse_tint", "inputs:reflection_roughness_constant", "inputs:reflection_roughness_texture_influence", "inputs:reflectionroughness_texture", "inputs:metallic_constant", "inputs:metallic_texture_influence", "inputs:metallic_texture", "inputs:specular_level", "inputs:enable_ORM_texture", "inputs:ORM_texture", "inputs:ao_to_diffuse", "inputs:ao_texture", "inputs:enable_emission", "inputs:emissive_color", "inputs:emissive_color_texture", "inputs:emissive_mask_texture", "inputs:emissive_intensity", "inputs:enable_opacity", "inputs:opacity_texture", "inputs:opacity_constant", "inputs:enable_opacity_texture", "inputs:opacity_mode", "inputs:opacity_threshold", "inputs:bump_factor", "inputs:normalmap_texture", "inputs:detail_bump_factor", "inputs:detail_normalmap_texture", "inputs:flip_tangent_u", "inputs:flip_tangent_v", "inputs:project_uvw", "inputs:world_or_object", "inputs:uv_space_index", "inputs:texture_translate", "inputs:texture_rotate", "inputs:texture_scale", "inputs:detail_texture_translate", "inputs:detail_texture_rotate", "inputs:detail_texture_scale"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @OmniPBR.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "OmniPBR"
                asset inputs:diffuse_texture = @../_general/WesternHat_DIF.png@ (
                    colorSpace = "auto"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Albedo"
                    displayName = "Albedo Map"
                    hidden = false
                )
                color3f inputs:diffuse_tint = (1, 1, 1) (
                    customData = {
                        float3 default = (1, 1, 1)
                    }
                    displayGroup = "Albedo"
                    displayName = "Color Tint"
                    doc = "When enabled, this color value is multiplied over the final albedo color"
                    hidden = false
                )
                color3f inputs:diffuse_tint.connect = </World/Looks/WesternHatBand/data_lookup_color.outputs:out>
                asset inputs:normalmap_texture = @../_general/WesternHat_NORM.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Normal"
                    displayName = "Normal Map"
                    hidden = false
                )
                float inputs:reflection_roughness_texture_influence = 1 (
                    customData = {
                        float default = 0
                        dictionary range = {
                            float max = 1
                            float min = 0
                        }
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map Influence"
                    doc = "Blends between the constant value and the lookup of the roughness texture"
                    hidden = false
                )
                asset inputs:reflectionroughness_texture = @../_general/WesternHat_Roughness.png@ (
                    colorSpace = "raw"
                    customData = {
                        asset default = @@
                    }
                    displayGroup = "Reflectivity"
                    displayName = "Roughness Map"
                    hidden = false
                )
                token outputs:out (
                    renderType = "material"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-510.7013, 0)
            }

            def Shader "data_lookup_color" (
                prepend apiSchemas = ["NodeGraphNodeAPI"]
            )
            {
                reorder properties = ["inputs:name", "inputs:default_value"]
                uniform token info:implementationSource = "sourceAsset"
                uniform asset info:mdl:sourceAsset = @nvidia/support_definitions.mdl@
                uniform token info:mdl:sourceAsset:subIdentifier = "data_lookup_color"
                color3f inputs:default_value (
                    customData = {
                        float3 default = (0, 0, 0)
                    }
                    hidden = false
                    renderType = "color"
                )
                string inputs:name = "OutfitColor2" (
                    hidden = false
                    renderType = "string"
                )
                color3f outputs:out (
                    renderType = "color"
                )
                uniform token ui:nodegraph:node:expansionState = "open"
                uniform float2 ui:nodegraph:node:pos = (-825.542, 145.94795)
            }
        }
    }

    def RectLight "RectLight" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float height = 100
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        float width = 100
        double3 xformOp:rotateXYZ = (0, -58.44024698680735, -40.09814257589656)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (-76.33368903619271, 225.36474984910225, -2.359555120774175)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def RectLight "RectLight_01" (
        prepend apiSchemas = ["ShapingAPI"]
    )
    {
        float height = 100
        float intensity = 15000
        float shaping:cone:angle = 180
        float shaping:cone:softness
        float shaping:focus
        color3f shaping:focusTint
        asset shaping:ies:file
        token visibility = "invisible"
        float width = 100
        double3 xformOp:rotateXYZ = (-51.57396317594845, 37.44499471708423, -25.12594113990295)
        double3 xformOp:scale = (1, 1, 1)
        double3 xformOp:translate = (68.56262565191813, 187.50074054759443, 119.35317374410711)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def "character" (
        instanceable = false
        prepend payload = @./Ted.usd@
    )
    {

        over "character"
        {
            over "GEO_UpperTeeth"
            {
                over "GEO_UpperTeeth"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_Shoes"
            {
                over "GEO_Shoes"
                {
                    rel material:binding = </World/Looks/Shoes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )

                    over "Shoes"
                    {
                        rel material:binding = </World/Looks/Shoes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "ShoeLaces"
                    {
                        rel material:binding = </World/Looks/ShoeLaces> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "ShoeSole1"
                    {
                        rel material:binding = </World/Looks/ShoeSole1> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "ShoeSole2"
                    {
                        rel material:binding = </World/Looks/ShoeSole2> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }

                    over "Socks"
                    {
                        rel material:binding = </World/Looks/Socks> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "GEO_Body"
            {
                over "GEO_Body"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "GEO_EyebrowsAndEyeLashes"
            {
                over "GEO_EyebrowsAndEyeLashes"
                {
                    rel material:binding = </World/Looks/EyeBrowLashes> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "Eye_Pivot_r"
            {
                over "GEO_Eye_r"
                {
                    over "GEO_Eye_r"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                    over "GEO_Cornea_r"
                    {
                        over "GEO_Cornea_r"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "glasses_variants" (
                variants = {
                    string glassesVariant = "glasses1"
                }
                prepend variantSets = "glassesVariant"
            )
            {
                variantSet "glassesVariant" = {
                    "glasses1" {
                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_Glasses2_Frames"
                            {
                                over "GEO_Glasses2_Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_Glasses_Frames"
                            {
                                over "GEO_Glasses_Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                    }
                    "glasses2" {
                        over "glasses2"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_Glasses2_Frames"
                            {
                                over "GEO_Glasses2_Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "visible"

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_Glasses_Frames"
                            {
                                over "GEO_Glasses_Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                    }
                    "glasses3" {
                        over "glasses2"
                        {
                            token visibility = "visible"

                            over "GEO_Glasses2"
                            {
                                over "GEO_Glasses2"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_Glasses2_Frames"
                            {
                                over "GEO_Glasses2_Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "glasses1"
                        {
                            token visibility = "invisible"

                            over "GEO_Glasses"
                            {
                                over "GEO_Glasses"
                                {
                                    rel material:binding = </World/Looks/Glasses> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }

                            over "GEO_Glasses_Frames"
                            {
                                over "GEO_Glasses_Frames"
                                {
                                    rel material:binding = </World/Looks/Glasses_Frame> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                    }
                }
            }

            over "headgear_variants" (
                variants = {
                    string headgearVariant = "headgear1"
                }
                prepend variantSets = "headgearVariant"
            )
            {
                variantSet "headgearVariant" = {
                    "headgear1" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underDriversHat"
                            {
                                over "GEO_HairBase_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underDrivers"
                            {
                                over "GEO_HairStrands_underDrivers"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underChefsHat"
                            {
                                over "GEO_HairBase_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underChefsHat"
                            {
                                over "GEO_HairStrands_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "visible"

                            over "GEO_HairBase"
                            {
                                over "GEO_HairBase"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands"
                            {
                                over "GEO_HairStrands"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underBaseballCap"
                            {
                                over "GEO_HairBase_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underBaseballCap"
                            {
                                over "GEO_HairStrands_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underHardHat"
                            {
                                over "GEO_HairBase_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underHardHat"
                            {
                                over "GEO_HairStrands_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                   
                            over "GEO_HairBase_underWesternHat"
                            {
                                over "GEO_HairBase_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_HairStrands_underWesternHat"
                            {
                                over "GEO_HairStrands_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear2" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underDriversHat"
                            {
                                over "GEO_HairBase_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underDrivers"
                            {
                                over "GEO_HairStrands_underDrivers"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underChefsHat"
                            {
                                over "GEO_HairBase_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underChefsHat"
                            {
                                over "GEO_HairStrands_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_HairBase"
                            {
                                over "GEO_HairBase"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands"
                            {
                                over "GEO_HairStrands"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "visible"

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underBaseballCap"
                            {
                                over "GEO_HairBase_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underBaseballCap"
                            {
                                over "GEO_HairStrands_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underHardHat"
                            {
                                over "GEO_HairBase_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underHardHat"
                            {
                                over "GEO_HairStrands_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                              
                                over "GEO_HairBase_underWesternHat"
                                {
                                    over "GEO_HairBase_underWesternHat"
                                    {
                                        rel material:binding = </World/Looks/HairBase> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                                over "GEO_HairStrands_underWesternHat"
                                {
                                    over "GEO_HairStrands_underWesternHat"
                                    {
                                        rel material:binding = </World/Looks/HairStrands> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }
                    }
                    "headgear3" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "visible"

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underDriversHat"
                            {
                                over "GEO_HairBase_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underDrivers"
                            {
                                over "GEO_HairStrands_underDrivers"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underChefsHat"
                            {
                                over "GEO_HairBase_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underChefsHat"
                            {
                                over "GEO_HairStrands_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_HairBase"
                            {
                                over "GEO_HairBase"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands"
                            {
                                over "GEO_HairStrands"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underBaseballCap"
                            {
                                over "GEO_HairBase_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underBaseballCap"
                            {
                                over "GEO_HairStrands_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underHardHat"
                            {
                                over "GEO_HairBase_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underHardHat"
                            {
                                over "GEO_HairStrands_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                           
                            over "GEO_HairBase_underWesternHat"
                            {
                                over "GEO_HairBase_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_HairStrands_underWesternHat"
                            {
                                over "GEO_HairStrands_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear4" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underDriversHat"
                            {
                                over "GEO_HairBase_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underDrivers"
                            {
                                over "GEO_HairStrands_underDrivers"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "visible"

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underChefsHat"
                            {
                                over "GEO_HairBase_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underChefsHat"
                            {
                                over "GEO_HairStrands_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_HairBase"
                            {
                                over "GEO_HairBase"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands"
                            {
                                over "GEO_HairStrands"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underBaseballCap"
                            {
                                over "GEO_HairBase_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underBaseballCap"
                            {
                                over "GEO_HairStrands_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underHardHat"
                            {
                                over "GEO_HairBase_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underHardHat"
                            {
                                over "GEO_HairStrands_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "GEO_HairBase_underWesternHat"
                            {
                                over "GEO_HairBase_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_HairStrands_underWesternHat"
                            {
                                over "GEO_HairStrands_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear5" {

                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underDriversHat"
                            {
                                over "GEO_HairBase_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underDrivers"
                            {
                                over "GEO_HairStrands_underDrivers"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underChefsHat"
                            {
                                over "GEO_HairBase_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underChefsHat"
                            {
                                over "GEO_HairStrands_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_HairBase"
                            {
                                over "GEO_HairBase"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands"
                            {
                                over "GEO_HairStrands"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underBaseballCap"
                            {
                                over "GEO_HairBase_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underBaseballCap"
                            {
                                over "GEO_HairStrands_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "visible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underHardHat"
                            {
                                over "GEO_HairBase_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underHardHat"
                            {
                                over "GEO_HairStrands_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "invisible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }                         
                            over "GEO_HairBase_underWesternHat"
                            {
                                over "GEO_HairBase_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_HairStrands_underWesternHat"
                            {
                                over "GEO_HairStrands_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                    "headgear6" {
                        over "haeadgear_DriversHat"
                        {
                            token visibility = "invisible"

                            over "GEO_DriversHat"
                            {
                                over "GEO_DriversHat"
                                {
                                    rel material:binding = </World/Looks/DriversHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "DriversHat"
                                    {
                                        rel material:binding = </World/Looks/DriversHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "DriversHat_Branded"
                                    {
                                        rel material:binding = </World/Looks/DriversHat_Branded> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underDriversHat"
                            {
                                over "GEO_HairBase_underDriversHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underDrivers"
                            {
                                over "GEO_HairStrands_underDrivers"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_ChefsHat"
                        {
                            token visibility = "invisible"

                            over "GEO_ChefsHat"
                            {
                                over "GEO_ChefsHat"
                                {
                                    rel material:binding = </World/Looks/ChefsHat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underChefsHat"
                            {
                                over "GEO_HairBase_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underChefsHat"
                            {
                                over "GEO_HairStrands_underChefsHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Nothing"
                        {
                            token visibility = "invisible"

                            over "GEO_HairBase"
                            {
                                over "GEO_HairBase"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands"
                            {
                                over "GEO_HairStrands"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_Baseballcap"
                        {
                            token visibility = "invisible"

                            over "Baseballcap"
                            {
                                over "Baseballcap"
                                {
                                    rel material:binding = </World/Looks/BaseballCap> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairBase_underBaseballCap"
                            {
                                over "GEO_HairBase_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underBaseballCap"
                            {
                                over "GEO_HairStrands_underBaseballCap"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_HardHat"
                        {
                            token visibility = "invisible"
                            over "GEO_HardHat"
                            {
                                over "GEO_HardHat"
                                {
                                    over "HardHat"
                                    {
                                        rel material:binding = </World/Looks/HardHat> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_HairBase_underHardHat"
                            {
                                over "GEO_HairBase_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_HairStrands_underHardHat"
                            {
                                over "GEO_HairStrands_underHardHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "haeadgear_WesternHat"
                        {
                            token visibility = "visible"
                            over "GEO_WesternHat"
                            {
                                over "GEO_WesternHat"
                                {
                                    over "WesternHatMain"
                                    {
                                        rel material:binding = </World/Looks/WesternHatMain> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "WesternHatBand"
                                    {
                                        rel material:binding = </World/Looks/WesternHatBand> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            over "GEO_HairBase_underWesternHat"
                            {
                                over "GEO_HairBase_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairBase> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_HairStrands_underWesternHat"
                            {
                                over "GEO_HairStrands_underWesternHat"
                                {
                                    rel material:binding = </World/Looks/HairStrands> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }
                    }
                }
            }

            over "Jaw_Group"
            {
                over "GEO_TeethLower"
                {
                    over "GEO_TeethLower"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
                
                over "GEO_Tongue"
                {
                    over "GEO_Tongue"
                    {
                        rel material:binding = </World/Looks/Skin_SSS> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                }
            }

            over "GEO_Head"
            {
                over "GEO_Head"
                {
                    rel material:binding = </World/Looks/Skin_SSS> (
                        bindMaterialAs = "weakerThanDescendants"
                    )
                }
            }

            over "outfit_variants" (
                variants = {
                    string outfitVariant = "outfit2"
                }
                prepend variantSets = "outfitVariant"
            )
            {
                variantSet "outfitVariant" = {
                    "outfit1" {
                        over "GEO_Watch"
                        {
                            token visibility = "visible"
                            over "GEO_Watch"
                            {
                                rel material:binding = </World/Looks/Watch> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "GEO_Watch_Glass"
                            {
                                over "GEO_Watch_Glass"
                                {
                                    rel material:binding = </World/Looks/Watch_Glass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "visible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Pants_Formal"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "BeltBuckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                            
                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit2" {
                        over "GEO_Watch"
                        {
                            token visibility = "visible"
                            over "GEO_Watch"
                            {
                                rel material:binding = </World/Looks/Watch> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "GEO_Watch_Glass"
                            {
                                over "GEO_Watch_Glass"
                                {
                                    rel material:binding = </World/Looks/Watch_Glass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Pants_Formal"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "BeltBuckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit3" {
                        over "GEO_Watch"
                        {
                            token visibility = "visible"
                            over "GEO_Watch"
                            {
                                rel material:binding = </World/Looks/Watch> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "GEO_Watch_Glass"
                            {
                                over "GEO_Watch_Glass"
                                {
                                    rel material:binding = </World/Looks/Watch_Glass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }

                        over "outfit_Hoodie"
                        {
                            token visibility = "visible"

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "invisible"

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Pants_Formal"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "BeltBuckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_NameTag"
                            {
                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "invisible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                    "outfit4" {
                        over "GEO_Watch"
                        {
                            token visibility = "invisible"
                            over "GEO_Watch"
                            {
                                rel material:binding = </World/Looks/Watch> (
                                    bindMaterialAs = "weakerThanDescendants"
                                )
                            }

                            over "GEO_Watch_Glass"
                            {
                                over "GEO_Watch_Glass"
                                {
                                    rel material:binding = </World/Looks/Watch_Glass> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                    bool primvars:doNotCastShadows = 1
                                }
                            }
                        }
                        
                        over "outfit_Hoodie"
                        {
                            token visibility = "invisible"

                            over "GEO_Hoodie"
                            {
                                over "GEO_Hoodie"
                                {
                                    rel material:binding = </World/Looks/Hoodie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Hoodie"
                                    {
                                        rel material:binding = </World/Looks/Hoodie> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Hoodie_Secondary"
                                    {
                                        rel material:binding = </World/Looks/Hoodie_Secondary> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }

                                over "GEO_Hoodie_Decal"
                                {
                                    over "GEO_Hoodie_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Hoodie"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Casual"
                        {
                            token visibility = "invisible"

                            over "GEO_Shirt_Casual"
                            {
                                over "GEO_Shirt_Casual"
                                {
                                    rel material:binding = </World/Looks/Shirt_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }

                                over "GEO_Shirt_Casual_Decal"
                                {
                                    over "GEO_Shirt_Casual_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }

                            over "GEO_Pants_Casual"
                            {
                                over "GEO_Pants_Casual"
                                {
                                    rel material:binding = </World/Looks/Pants_Casual> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_Formal"
                        {
                            token visibility = "visible"

                            over "GEO_Belt"
                            {
                                over "GEO_Belt"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Pants_Formal"
                                    {
                                        rel material:binding = </World/Looks/Pants_Formal> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "Belt"
                                    {
                                        rel material:binding = </World/Looks/Belt> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "BeltBuckle"
                                    {
                                        rel material:binding = </World/Looks/BeltBuckle> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_NameTag"
                            {
                                token visibility = "invisible"

                                over "GEO_NameTag"
                                {
                                    rel material:binding = </World/Looks/Branding> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )

                                    over "Branding"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }

                                    over "NameTag"
                                    {
                                        rel material:binding = </World/Looks/NameTag> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }

                            over "GEO_Shirt_Formal"
                            {
                                token visibility = "invisible"
                                
                                over "GEO_Shirt_Formal"
                                {
                                    rel material:binding = </World/Looks/DressShirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }

                            over "GEO_Pants_Formal"
                            {
                                over "GEO_Pants_Formal"
                                {
                                    rel material:binding = </World/Looks/Pants_Formal> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                        }

                        over "outfit_LabCoat"
                        {
                            token visibility = "visible"

                            over "GEO_LabCoat"
                            {
                                over "GEO_LabCoat"
                                {
                                    rel material:binding = </World/Looks/LabCoat> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                                over "GEO_LabCoat_Decal"
                                {
                                    over "GEO_LabCoat_Decal"
                                    {
                                        rel material:binding = </World/Looks/Branding> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                        bool primvars:doNotCastShadows = 1
                                    }
                                }
                            }
                            over "GEO_LabCoat_Shirt"
                            {
                                over "GEO_LabCoat_Shirt"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Shirt> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Tie"
                            {
                                over "GEO_LabCoat_Tie"
                                {
                                    rel material:binding = </World/Looks/Tie> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Buttons"
                            {
                                over "GEO_LabCoat_Buttons"
                                {
                                    rel material:binding = </World/Looks/LabCoat_Buttons> (
                                        bindMaterialAs = "weakerThanDescendants"
                                    )
                                }
                            }
                            over "GEO_LabCoat_Pen"
                            {
                                over "GEO_LabCoat_Pen"
                                {
                                    over "Pen1"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen1> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                    over "Pen2"
                                    {
                                        rel material:binding = </World/Looks/LabCoat_Pen2> (
                                            bindMaterialAs = "weakerThanDescendants"
                                        )
                                    }
                                }
                            }
                        }

                    }
                }
            }
            
            over "Eye_Pivot_l"
            {
                over "GEO_Eye_l"
                {
                    over "GEO_Eye_l"
                    {
                        rel material:binding = </World/Looks/eyes> (
                            bindMaterialAs = "weakerThanDescendants"
                        )
                    }
                    over "GEO_Cornea_l"
                    {
                        over "GEO_Cornea_l"
                        {
                            rel material:binding = </World/Looks/cornea> (
                                bindMaterialAs = "weakerThanDescendants"
                            )
                        }
                        bool primvars:doNotCastShadows = 1
                    }
                }
            }

            over "ted_skeleton" (
                prepend apiSchemas = ["ControlRigAPI"]
            )
            {
                uniform token controlRig:forwardAxis = "MINUS Y"
                uniform token[] controlRig:retargetTags = ["", "", "", "Chest", "", "Left_Shoulder", "Left_Elbow", "Left_Hand", "", "", "", "Left_Index", "", "", "Left_Thumb", "", "", "", "Left_Middle", "", "", "", "Left_Ring", "", "", "", "Left_Pinky", "", "", "", "", "", "", "Head", "Left_Eye", "", "", "", "", "", "", "", "", "", "", "", "", "Right_Eye", "", "", "", "", "", "", "", "", "", "Right_Shoulder", "Right_Elbow", "Right_Hand", "", "", "", "Right_Index", "", "", "Right_Thumb", "", "", "", "Right_Middle", "", "", "", "Right_Ring", "", "", "", "Right_Pinky", "", "", "", "", "", "Left_Thigh", "", "", "Left_Knee", "Left_Foot", "Left_Toe", "", "Right_Thigh", "", "", "Right_Knee", "Right_Foot", "Right_Toe", ""]
                uniform matrix4d[] controlRig:retargetTransforms = [( (1, 0, 0, 0), (0, 1, 0, 0), (0, 0, 1, 0), (0, 0, 0, 1) ), ( (1, -4.284069277105118e-8, 1.1036682678877696e-10, 0), (3.552713678800501e-15, 0.0025762319564819336, 0.9999967217445374, 0), (-4.284083843231201e-8, -0.9999967217445374, 0.0025762319564819336, 0), (-3.198512221561687e-25, -0.9338779449462891, 79.09077453613281, 1) ), ( (1, -1.1260958138192834e-10, 8.709160614905898e-10, 0), (1.1036557084898035e-10, 0.9999966621398926, 0.0025761770084500313, 0), (-8.712032761870603e-10, -0.0025761770084500313, 0.9999966621398926, 0), (3.552713678800501e-15, 15.174720764160156, 0, 1) ), ( (1, -1.9295689490661516e-9, -2.3829365147776116e-7, 0), (-4.334473890921231e-10, 0.9999508261680603, -0.009916006587445736, 0), (2.383010695439225e-7, 0.009916006587445736, 0.9999508261680603, 0), (-3.552713678800501e-15, 15.174667358398438, 5.960464477539063e-8, 1) ), ( (-0.0006147623062133789, -0.9999496340751648, -0.010014329105615616, 0), (0.9999688267707825, -0.0005359649658203125, -0.007876243442296982, 0), (0.007870478555560112, -0.010018859058618546, 0.9999188184738159, 0), (5.894352436065674, 13.808395385742188, 0.0000011920928955078125, 1) ), ( (0.9997078776359558, 0.0008014175109565258, -0.024155709892511368, 0), (-0.0006114558782428503, 0.9999688267707825, 0.007870405912399292, 0), (0.024161264300346375, -0.00785333663225174, 0.9996772408485413, 0), (-0.00000286102294921875, 9.382988929748535, 0.000001430511474609375, 1) ), ( (0.9916588068008423, 0.000005205388333706651, 0.12889054417610168, 0), (-0.000005263127604848705, 1, 1.0736565059232817e-7, 0), (-0.12889054417610168, -7.848375389585271e-7, 0.9916588068008423, 0), (-0.00008392333984375, 23.335552215576172, 0.00000286102294921875, 1) ), ( (0.9966076612472534, 0.04340130463242531, -0.06992515921592712, 0), (-0.045243170112371445, 0.9986637830734253, -0.024975016713142395, 0), (0.06874777376651764, 0.028053928166627884, 0.9972395300865173, 0), (0.00003814697265625, 22.634742736816406, -0.00000476837158203125, 1) ), ( (0.1843165159225464, 0.40889447927474976, -0.8937744498252869, 0), (-0.057466864585876465, 0.9122821092605591, 0.40551063418388367, 0), (0.9811854958534241, -0.023379921913146973, 0.19164657592773438, 0), (-0.1584320068359375, 2.699840545654297, 1.5524072647094727, 1) ), ( (0.95352703332901, -0.2983342707157135, -0.0422234870493412, 0), (0.29907581210136414, 0.9541494846343994, 0.012347722426056862, 0), (0.036603767424821854, -0.024401908740401268, 0.9990319013595581, 0), (0, 5.954366207122803, 0, 1) ), ( (0.9584802389144897, -0.031359314918518066, -0.2834293842315674, 0), (0.017771875485777855, 0.9985717535018921, -0.050384800881147385, 0), (0.28460460901260376, 0.043255764991045, 0.9576686024665833, 0), (0, 2.0623035430908203, 0, 1) ), ( (0.9774783849716187, -0.05864686518907547, -0.20272299647331238, 0), (0.06329992413520813, 0.9978574514389038, 0.016540277749300003, 0), (0.201318621635437, -0.029000114649534225, 0.9790964126586914, 0), (4.76837158203125e-7, 2.640200614929199, -0.00000762939453125, 1) ), ( (-0.6774033308029175, 0.6806080341339111, -0.2791009545326233, 0), (0.4843348264694214, 0.698229193687439, 0.5271582007408142, 0), (0.5536645650863647, 0.221920445561409, -0.8026249408721924, 0), (1.0154953002929688, 1.6790008544921875, 1.7411327362060547, 1) ), ( (0.9976591467857361, 0.011967485770583153, -0.06732770800590515, 0), (-0.0021786177530884743, 0.9896299242973328, 0.14362385869026184, 0), (0.06834833323955536, -0.143140971660614, 0.987339437007904, 0), (0, 3.3051910400390625, 0, 1) ), ( (0.9799096584320068, -0.07363618910312653, -0.18535055220127106, 0), (0.09316274523735046, 0.9907230734825134, 0.09893687069416046, 0), (0.17634572088718414, -0.11421695351600647, 0.9776792526245117, 0), (0, 3.160053253173828, -0.000003814697265625, 1) ), ( (0.2139529585838318, 0.19029361009597778, -0.9581296443939209, 0), (-0.017537295818328857, 0.9814322590827942, 0.19100558757781982, 0), (0.9766864776611328, -0.02406320720911026, 0.21331757307052612, 0), (-0.22019195556640625, 2.9374465942382812, 0.5308208465576172, 1) ), ( (0.9922225475311279, -0.04600703716278076, -0.11566240340471268, 0), (0.0377456471323967, 0.9966444373130798, -0.07263016700744629, 0), (0.1186157837510109, 0.06769953668117523, 0.9906296133995056, 0), (-0.0000019073486328125, 5.890303134918213, -0.00000762939453125, 1) ), ( (0.9969782829284668, -0.07070907950401306, -0.03216446191072464, 0), (0.0721229612827301, 0.9963730573654175, 0.04515533149242401, 0), (0.028854912146925926, -0.04733867943286896, 0.9984620213508606, 0), (-0.0000019073486328125, 2.833298683166504, 0, 1) ), ( (0.9999586343765259, 0.0067351399920880795, 0.006115165539085865, 0), (-0.006975001189857721, 0.999171793460846, 0.0400889627635479, 0), (-0.005840095691382885, -0.04012995585799217, 0.9991773962974548, 0), (9.5367431640625e-7, 3.330109119415283, 0, 1) ), ( (0.241804301738739, 0.0030465256422758102, -0.9703202247619629, 0), (0.04046792536973953, 0.9990933537483215, 0.01322148833423853, 0), (0.9694807529449463, -0.04246385768055916, 0.24146175384521484, 0), (-0.25466156005859375, 2.954608917236328, -0.520179271697998, 1) ), ( (0.9999571442604065, -0.005688309203833342, 0.0073083313181996346, 0), (0.004876882303506136, 0.9942888617515564, 0.10661111027002335, 0), (-0.007873029448091984, -0.10657089203596115, 0.9942739605903625, 0), (0, 6.1610565185546875, 0, 1) ), ( (0.998893678188324, 0.044919490814208984, -0.013918043114244938, 0), (-0.046562328934669495, 0.9862006306648254, -0.15887175500392914, 0), (0.006589544005692005, 0.15934403240680695, 0.9872010946273804, 0), (-0.0000019073486328125, 2.0918827056884766, 0, 1) ), ( (0.9984543323516846, 0.004652721807360649, 0.05538293719291687, 0), (-0.0027420225087553263, 0.9994000196456909, -0.034525901079177856, 0), (-0.055510349571704865, 0.03432067483663559, 0.9978680610656738, 0), (0.0000019073486328125, 3.1176416873931885, -0.00000762939453125, 1) ), ( (0.37269532680511475, -0.22493229806423187, -0.9002797603607178, 0), (0.14109177887439728, 0.9726333618164062, -0.1846008449792862, 0), (0.9171648025512695, -0.05822218954563141, 0.39423203468322754, 0), (-0.263946533203125, 2.7815322875976562, -1.5441234111785889, 1) ), ( (0.9658025503158569, 0.24979382753372192, -0.06948751211166382, 0), (-0.2498416304588318, 0.9682524800300598, 0.008142556063830853, 0), (0.06931541860103607, 0.009496773593127728, 0.9975495934486389, 0), (0.000003814697265625, 6.329771041870117, 0, 1) ), ( (0.996196985244751, 0.006658762693405151, 0.08687511086463928, 0), (-0.002690480090677738, 0.9989508986473083, -0.04571538046002388, 0), (-0.08708837628364563, 0.045307788997888565, 0.9951697587966919, 0), (-0.000003814697265625, 1.5153522491455078, 0, 1) ), ( (0.9973366260528564, 0.023795228451490402, 0.06894480437040329, 0), (-0.016318753361701965, 0.9941204786300659, -0.10704262554645538, 0), (-0.07108654826879501, 0.10563243925571442, 0.99186110496521, 0), (0, 2.6937255859375, -0.00000762939453125, 1) ), ( (0.999997615814209, -0.000002443428002152359, 0.0021926534827798605, 0), (0.0000024441469577141106, 1, -3.2514594749954995e-7, 0), (-0.0021926534827798605, 3.305043492218829e-7, 0.999997615814209, 0), (0.00000762939453125, 7.544910430908203, -9.5367431640625e-7, 1) ), ( (0.9998373985290527, -0.000001835247644521587, -0.01803172007203102, 0), (0.0000018305430558029911, 1, -2.7740995278691116e-7, 0), (0.01803172007203102, 2.443569826482417e-7, 0.9998373985290527, 0), (0.00002288818359375, 15.089820861816406, -0.00000286102294921875, 1) ), ( (0.9999999403953552, 0.000004932290266879136, -0.000397211842937395, 0), (-0.000004932278443448013, 1, 2.98535383080889e-8, 0), (0.000397211842937395, -2.789437836270281e-8, 0.9999999403953552, 0), (0, 7.778537750244141, 1.1920928955078125e-7, 1) ), ( (0.9999997019767761, 0.000004738576535601169, -0.0008058710373006761, 0), (-0.0000047385619836859405, 1, 1.9604460277378166e-8, 0), (0.0008058710373006761, -1.5785783347155302e-8, 0.9999997019767761, 0), (-0.0000457763671875, 15.557048797607422, 3.5762786865234375e-7, 1) ), ( (0.996084451675415, -0.08474338799715042, 0.025185225531458855, 0), (0.025060804560780525, -0.002531886100769043, -0.9996827244758606, 0), (0.0847802609205246, 0.9963995814323425, -0.0003981590270996094, 0), (-0.0000762939453125, 23.335556030273438, 3.5762786865234375e-7, 1) ), ( (1, -2.531862497434645e-9, 2.3823632488984003e-7, 0), (-8.733869627519653e-9, 0.9988818764686584, 0.047276172786951065, 0), (-2.3808964044746972e-7, -0.047276172786951065, 0.9988818764686584, 0), (2.842170943040401e-14, 13.808403015136719, 1.1920928955078125e-7, 1) ), ( (1, 7.974354510054127e-10, -4.40504344112469e-8, 0), (4.850372326004049e-10, 0.9995763301849365, 0.02910606749355793, 0), (4.405498188475576e-8, -0.02910606749355793, 0.9995763301849365, 0), (0, 14.007011413574219, 0, 1) ), ( (-0.999561071395874, 0.02814388833940029, 0.009260770864784718, 0), (0.014542711898684502, 0.19371801614761353, 0.9809495210647583, 0), (0.0258137546479702, 0.9806535243988037, -0.19404232501983643, 0), (4.342689514160156, 11.841461181640625, 9.205293655395508, 1) ), ( (0.9636242985725403, 0.11190015822649002, -0.2427067905664444, 0), (0.1852952539920807, 0.3747042417526245, 0.9084395170211792, 0), (0.19259779155254364, -0.9203667640686035, 0.3403395414352417, 0), (4.342691421508789, 11.841461181640625, 9.205293655395508, 1) ), ( (-0.9646428823471069, -0.0891188308596611, 0.24803581833839417, 0), (0.26353979110717773, -0.3144693374633789, 0.9119516015052795, 0), (-0.0032723546028137207, 0.9450749754905701, 0.32683712244033813, 0), (4.342689514160156, 11.841461181640625, 9.205292701721191, 1) ), ( (-0.7628974914550781, -0.028074592351913452, 0.6459095478057861, 0), (0.6249285936355591, -0.2880525588989258, 0.7255962491035461, 0), (0.16568508744239807, 0.9572029709815979, 0.2372991442680359, 0), (4.342689037322998, 11.841461181640625, 9.205293655395508, 1) ), ( (-0.9820897579193115, -0.0891888290643692, -0.16596746444702148, 0), (-0.1367855966091156, -0.26828014850616455, 0.953580379486084, 0), (-0.1295745074748993, 0.9592033624649048, 0.2512754201889038, 0), (4.342689514160156, 11.841461181640625, 9.205292701721191, 1) ), ( (0.7348441481590271, -0.06989550590515137, -0.6746248602867126, 0), (0.6700534224510193, 0.22885674238204956, 0.7061536312103271, 0), (0.10503548383712769, -0.9709475040435791, 0.21500778198242188, 0), (4.342689037322998, 11.841461181640625, 9.205292701721191, 1) ), ( (0.9792119264602661, 0.1054324060678482, 0.17328593134880066, 0), (-0.19106902182102203, 0.19265395402908325, 0.9624848365783691, 0), (0.06809286028146744, -0.9755861759185791, 0.20879393815994263, 0), (4.342689514160156, 11.841461181640625, 9.205292701721191, 1) ), ( (1, 1.251858066098066e-7, 1.3208278915044502e-9, 0), (8.943949580952903e-9, -0.08196079730987549, 0.9966355562210083, 0), (1.2487288358897786e-7, -0.9966355562210083, -0.08196079730987549, 0), (6.155671883334435e-8, 1.71881103515625, 6.752697944641113, 1) ), ( (1, -4.665011488214077e-8, 1.0895723434600768e-8, 0), (7.251088618431822e-9, 0.3722158670425415, 0.9281461834907532, 0), (-4.735368719366306e-8, -0.9281461834907532, 0.3722158670425415, 0), (4.795808195012796e-8, 2.795806884765625, 4.9895501136779785, 1) ), ( (1, 7.072662100426896e-8, -2.1006172801207867e-7, 0), (2.220300920896534e-8, 0.9109922051429749, 0.41242358088493347, 0), (2.2053393422538647e-7, -0.41242358088493347, 0.9109922051429749, 0), (4.547473508864641e-13, 2.290332794189453, 0, 1) ), ( (1, 1.2434966834007355e-8, 1.1665647292602443e-7, 0), (-3.609344645383317e-8, 0.9787473082542419, 0.2050701230764389, 0), (-1.1162716617718615e-7, -0.2050701230764389, 0.9787473082542419, 0), (0, 2.4732937812805176, 0, 1) ), ( (0.9998027682304382, -0.01919936016201973, 0.00507497088983655, 0), (0.003803059458732605, 0.435932993888855, 0.8999711275100708, 0), (-0.01949121616780758, -0.8997743129730225, 0.4359200596809387, 0), (4.930774211883545, 14.21270751953125, 8.167315483093262, 1) ), ( (0.9380146861076355, -0.009461730718612671, -0.3464663624763489, 0), (0.31659603118896484, 0.43020063638687134, 0.8453960418701172, 0), (0.14105111360549927, -0.9026837348937988, 0.4065300226211548, 0), (7.957640171051025, 13.513107299804688, 7.675579071044922, 1) ), ( (-0.999561071395874, -0.02814388833940029, -0.009260770864784718, 0), (-0.014542711898684502, 0.19371801614761353, 0.9809495210647583, 0), (-0.0258137546479702, 0.9806535243988037, -0.19404232501983643, 0), (-4.342689514160156, 11.841461181640625, 9.205293655395508, 1) ), ( (0.9636242985725403, -0.11190015822649002, 0.2427067905664444, 0), (-0.1852952539920807, 0.3747042417526245, 0.9084395170211792, 0), (-0.19259779155254364, -0.9203667640686035, 0.3403395414352417, 0), (-4.342691421508789, 11.841461181640625, 9.205293655395508, 1) ), ( (-0.9646428823471069, 0.0891188308596611, -0.24803581833839417, 0), (-0.26353979110717773, -0.3144693374633789, 0.9119516015052795, 0), (0.0032723546028137207, 0.9450749754905701, 0.32683712244033813, 0), (-4.342689514160156, 11.841461181640625, 9.205292701721191, 1) ), ( (-0.7628974914550781, 0.028074592351913452, -0.6459095478057861, 0), (-0.6249285936355591, -0.2880525588989258, 0.7255962491035461, 0), (-0.16568508744239807, 0.9572029709815979, 0.2372991442680359, 0), (-4.342689037322998, 11.841461181640625, 9.205293655395508, 1) ), ( (-0.9820897579193115, 0.0891888290643692, 0.16596746444702148, 0), (0.1367855966091156, -0.26828014850616455, 0.953580379486084, 0), (0.1295745074748993, 0.9592033624649048, 0.2512754201889038, 0), (-4.342689514160156, 11.841461181640625, 9.205292701721191, 1) ), ( (0.7348441481590271, 0.06989550590515137, 0.6746248602867126, 0), (-0.6700534224510193, 0.22885674238204956, 0.7061536312103271, 0), (-0.10503548383712769, -0.9709475040435791, 0.21500778198242188, 0), (-4.342689037322998, 11.841461181640625, 9.205292701721191, 1) ), ( (0.9792119264602661, -0.1054324060678482, -0.17328593134880066, 0), (0.19106902182102203, 0.19265395402908325, 0.9624848365783691, 0), (-0.06809286028146744, -0.9755861759185791, 0.20879393815994263, 0), (-4.342689514160156, 11.841461181640625, 9.205292701721191, 1) ), ( (0.9998027682304382, 0.01919936016201973, -0.00507497088983655, 0), (-0.003803059458732605, 0.435932993888855, 0.8999711275100708, 0), (0.01949121616780758, -0.8997743129730225, 0.4359200596809387, 0), (-4.930774211883545, 14.21270751953125, 8.167315483093262, 1) ), ( (0.9380146861076355, 0.009461730718612671, 0.3464663624763489, 0), (-0.31659603118896484, 0.43020063638687134, 0.8453960418701172, 0), (-0.14105111360549927, -0.9026837348937988, 0.4065300226211548, 0), (-7.957640171051025, 13.513107299804688, 7.675579071044922, 1) ), ( (-0.0006147623062133789, 0.9999496340751648, 0.010014329105615616, 0), (-0.9999688267707825, -0.0005359649658203125, -0.007876631803810596, 0), (-0.007870867848396301, -0.01001885998994112, 0.9999188184738159, 0), (-5.894351482391357, 13.808395385742188, -0.0000011920928955078125, 1) ), ( (0.9997073411941528, -0.0008184848120436072, 0.024177661165595055, 0), (0.0006300294771790504, 0.9999693632125854, 0.007801196537911892, 0), (-0.024183304980397224, -0.007783681154251099, 0.9996772408485413, 0), (0.00000286102294921875, 9.382990837097168, 9.5367431640625e-7, 1) ), ( (0.9916530847549438, 0.00004668334440793842, -0.12893453240394592, 0), (-0.000028677977752522565, 1, 0.00014150390052236617, 0), (0.12893453240394592, -0.00013662519631907344, 0.9916530847549438, 0), (0.0000762939453125, 23.335556030273438, 0.00000476837158203125, 1) ), ( (0.9966076612472534, -0.043401289731264114, 0.06992513686418533, 0), (0.04524315521121025, 0.9986637830734253, -0.024974975734949112, 0), (-0.06874775141477585, 0.028053883463144302, 0.9972395300865173, 0), (-0.00003814697265625, 22.634742736816406, -0.000003814697265625, 1) ), ( (0.18431657552719116, -0.408894419670105, 0.8937744498252869, 0), (0.05746670067310333, 0.9122821688652039, 0.4055106043815613, 0), (-0.9811854958534241, -0.023380056023597717, 0.19164657592773438, 0), (0.15842437744140625, 2.6998443603515625, 1.552408218383789, 1) ), ( (0.95352703332901, 0.2983343005180359, 0.0422234833240509, 0), (-0.29907578229904175, 0.9541494846343994, 0.012347596697509289, 0), (-0.03660380095243454, -0.024401787668466568, 0.9990319013595581, 0), (0, 5.954367637634277, 0, 1) ), ( (0.9584802389144897, 0.03135927394032478, 0.28342944383621216, 0), (-0.017771843820810318, 0.9985717535018921, -0.0503847561776638, 0), (-0.28460466861724854, 0.043255727738142014, 0.9576686024665833, 0), (0, 2.0623037815093994, 0, 1) ), ( (0.9774783849716187, 0.058646876364946365, 0.20272298157215118, 0), (-0.06329996138811111, 0.9978574514389038, 0.01654038205742836, 0), (-0.20131860673427582, -0.029000218957662582, 0.9790964126586914, 0), (9.5367431640625e-7, 2.6402010917663574, 0, 1) ), ( (-0.6774030923843384, -0.6806082725524902, 0.2791008949279785, 0), (-0.4843350648880005, 0.6982290148735046, 0.5271582007408142, 0), (-0.5536645650863647, 0.22192029654979706, -0.8026249408721924, 0), (-1.0154953002929688, 1.6790008544921875, 1.741133213043213, 1) ), ( (0.9976591467857361, -0.011967459693551064, 0.06732769310474396, 0), (0.002178594935685396, 0.9896299839019775, 0.14362382888793945, 0), (-0.06834831833839417, -0.14314094185829163, 0.987339437007904, 0), (-0.00000762939453125, 3.3051910400390625, 0, 1) ), ( (0.9799096584320068, 0.07363618165254593, 0.18535052239894867, 0), (-0.09316273778676987, 0.9907230734825134, 0.09893690794706345, 0), (-0.17634569108486176, -0.11421699076890945, 0.9776792526245117, 0), (0, 3.160053253173828, 0, 1) ), ( (0.2139529585838318, -0.1902935951948166, 0.9581296443939209, 0), (0.017537280917167664, 0.9814322590827942, 0.19100558757781982, 0), (-0.9766864776611328, -0.024063214659690857, 0.21331757307052612, 0), (0.220184326171875, 2.9374465942382812, 0.530820369720459, 1) ), ( (0.9922225475311279, 0.04600704833865166, 0.11566239595413208, 0), (-0.0377456434071064, 0.9966444373130798, -0.07263027131557465, 0), (-0.11861579120159149, 0.06769964098930359, 0.9906296133995056, 0), (0, 5.8903021812438965, 0.00000762939453125, 1) ), ( (0.9969782829284668, 0.07070911675691605, 0.03216448426246643, 0), (-0.07212299853563309, 0.9963730573654175, 0.045155398547649384, 0), (-0.02885492891073227, -0.04733874648809433, 0.9984620213508606, 0), (-0.0000019073486328125, 2.833293914794922, 0, 1) ), ( (0.9999586343765259, -0.006735136732459068, -0.0061151799745857716, 0), (0.00697499793022871, 0.999171793460846, 0.04008893296122551, 0), (0.005840111058205366, -0.040129926055669785, 0.9991773962974548, 0), (0, 3.330108642578125, 0, 1) ), ( (0.241804301738739, -0.003046482801437378, 0.9703202247619629, 0), (-0.040467970073223114, 0.9990933537483215, 0.013221456669270992, 0), (-0.9694807529449463, -0.04246389493346214, 0.24146175384521484, 0), (0.25466156005859375, 2.9546127319335938, -0.520179033279419, 1) ), ( (0.9999571442604065, 0.005688353441655636, -0.007308336440473795, 0), (-0.0048769256100058556, 0.9942888021469116, 0.10661116242408752, 0), (0.007873039692640305, -0.10657094419002533, 0.9942739009857178, 0), (0, 6.161059379577637, 0, 1) ), ( (0.998893678188324, -0.04491955786943436, 0.013918048702180386, 0), (0.04656239598989487, 0.9862006306648254, -0.15887169539928436, 0), (-0.006589542143046856, 0.15934397280216217, 0.9872011542320251, 0), (0, 2.0918827056884766, 0, 1) ), ( (0.9984543323516846, -0.004652722273021936, -0.05538291484117508, 0), (0.0027420204132795334, 0.9994000196456909, -0.03452596068382263, 0), (0.055510327219963074, 0.034320734441280365, 0.9978680610656738, 0), (0.0000019073486328125, 3.1176393032073975, -0.00000762939453125, 1) ), ( (0.37269532680511475, 0.22493234276771545, 0.9002797603607178, 0), (-0.14109182357788086, 0.9726333618164062, -0.18460088968276978, 0), (-0.9171648025512695, -0.0582222118973732, 0.39423203468322754, 0), (0.263946533203125, 2.7815322875976562, -1.544123888015747, 1) ), ( (0.9658025503158569, -0.2497938573360443, 0.06948751956224442, 0), (0.24984166026115417, 0.9682524800300598, 0.008142544887959957, 0), (-0.06931542605161667, 0.009496788494288921, 0.9975495934486389, 0), (0, 6.329769134521484, -0.00000762939453125, 1) ), ( (0.996196985244751, -0.006658756174147129, -0.08687511831521988, 0), (0.002690470078960061, 0.9989508986473083, -0.04571541026234627, 0), (0.08708838373422623, 0.04530781880021095, 0.9951697587966919, 0), (0, 1.5153493881225586, 0, 1) ), ( (0.9973366260528564, -0.023795243352651596, -0.0689447894692421, 0), (0.016318771988153458, 0.9941204786300659, -0.10704261064529419, 0), (0.07108653336763382, 0.10563242435455322, 0.99186110496521, 0), (0.000003814697265625, 2.6937267780303955, -0.00000762939453125, 1) ), ( (0.999997615814209, 0.000002443444373056991, -0.0021926609333604574, 0), (-0.0000024441387722617947, 1, -3.139700766041642e-7, 0), (0.0021926609333604574, 3.1932847832649713e-7, 0.999997615814209, 0), (-0.00000762939453125, 7.544910430908203, -9.5367431640625e-7, 1) ), ( (0.9998373985290527, 0.0000018352477582084248, 0.018031712621450424, 0), (-0.000001830408791647642, 1, -2.8485928282862005e-7, 0), (-0.018031712621450424, 2.518075632451655e-7, 0.9998373985290527, 0), (-0.00002288818359375, 15.089820861816406, -0.00000286102294921875, 1) ), ( (0.9999999403953552, -0.000004932290266879136, 0.0003972127742599696, 0), (0.000004932278443448013, 1, 2.985354186080258e-8, 0), (-0.0003972127742599696, -2.789437480998913e-8, 0.9999999403953552, 0), (0, 7.778537750244141, 1.1920928955078125e-7, 1) ), ( (0.9999997019767761, -0.000004738575626106467, 0.0008058720268309116, 0), (0.0000047385619836859405, 1, 1.8673144808190045e-8, 0), (-0.0008058720268309116, -1.4854464325253502e-8, 0.9999997019767761, 0), (0.0000457763671875, 15.557048797607422, 2.384185791015625e-7, 1) ), ( (0.996084451675415, 0.08474338054656982, -0.02518521435558796, 0), (-0.02506079524755478, -0.002531886100769043, -0.9996827244758606, 0), (-0.0847802609205246, 0.9963995814323425, -0.0003981590270996094, 0), (0.0000762939453125, 23.335556030273438, 3.5762786865234375e-7, 1) ), ( (-0.9962500333786011, 0.00021835626102983952, -0.08652029186487198, 0), (0.000004124798579141498, -0.9999966621398926, -0.002571245189756155, 0), (-0.08652056008577347, -0.0025619599036872387, 0.9962467551231384, 0), (10.01815128326416, 2.148559808731079, 0.48246318101882935, 1) ), ( (0.9980029463768005, -6.866901003377279e-7, 0.06316723674535751, 0), (7.356603646258009e-7, 1, -7.519896030316886e-7, 0), (-0.06316723674535751, 7.96957522197772e-7, 0.9980029463768005, 0), (-2.9802322387695312e-8, 5.830444812774658, -9.5367431640625e-7, 1) ), ( (0.9921445250511169, -0.12182250618934631, 0.02843387797474861, 0), (-0.024329960346221924, 0.03504401445388794, 0.9990894794464111, 0), (-0.1227080374956131, -0.9919329881668091, 0.031804800033569336, 0), (4.76837158203125e-7, 32.7420654296875, -4.76837158203125e-7, 1) ), ( (0.9996615648269653, -0.000007692180588492192, 0.02601361833512783, 0), (0.000007924780220491812, 1, -0.000008838361281959806, 0), (-0.02601361833512783, 0.000009041522389452439, 0.9996615648269653, 0), (8.642673492431641e-7, 32.7420654296875, -0.00000762939453125, 1) ), ( (0.9999830722808838, 0.0011101096170023084, -0.005708174780011177, 0), (0.004796676803380251, 0.3974713683128357, 0.9176020622253418, 0), (0.0032874755561351776, -0.9176139831542969, 0.39745932817459106, 0), (0, 36.60736083984375, 5.960464477539063e-8, 1) ), ( (0.9998443126678467, -0.0045863245613873005, 0.01703788712620735, 0), (-0.003920430783182383, 0.8837438821792603, 0.46795451641082764, 0), (-0.01720331981778145, -0.46794843673706055, 0.8835883140563965, 0), (0, 7.626015663146973, 0, 1) ), ( (-0.9960817098617554, -0.0018205717206001282, 0.08841966092586517, 0), (-0.08228028565645218, -0.3474714756011963, -0.9340736865997314, 0), (0.032423846423625946, -0.9376888275146484, 0.3459600806236267, 0), (10.074614524841309, 2.1485595703125, 0.48246312141418457, 1) ), ( (-0.9962500333786011, -0.00022286664170678705, 0.08652037382125854, 0), (3.845052560791373e-7, -0.9999966621398926, -0.002571450313553214, 0), (0.08652065694332123, -0.0025617743376642466, 0.9962467551231384, 0), (-10.01815128326416, 2.148559808731079, 0.48246416449546814, 1) ), ( (0.9980029463768005, 1.4683621429867344e-7, -0.06316716969013214, 0), (-1.8827253711606318e-7, 1, -6.500265499198576e-7, 0), (0.06316716969013214, 6.60621026327135e-7, 0.9980029463768005, 0), (-8.642673492431641e-7, 5.830445289611816, -4.76837158203125e-7, 1) ), ( (0.9921445250511169, 0.12182252109050751, -0.028433863073587418, 0), (0.024329956620931625, 0.03504389524459839, 0.9990895986557007, 0), (0.12270805239677429, -0.9919331073760986, 0.031804680824279785, 0), (-9.5367431640625e-7, 32.7420654296875, -2.384185791015625e-7, 1) ), ( (0.9996615648269653, -0.000001122123876484693, -0.02601349912583828, 0), (8.972786531558086e-7, 1, -0.000008655078090669122, 0), (0.02601349912583828, 0.000008628808245703112, 0.9996615648269653, 0), (-5.066394805908203e-7, 32.7420654296875, -0.00000762939453125, 1) ), ( (0.9999830722808838, -0.001110106473788619, 0.0057081724517047405, 0), (-0.004796676337718964, 0.3974713683128357, 0.9176020622253418, 0), (-0.003287471365183592, -0.9176139831542969, 0.39745932817459106, 0), (9.5367431640625e-7, 36.607357025146484, -1.1920928955078125e-7, 1) ), ( (0.9998443126678467, 0.004586323630064726, -0.01703788712620735, 0), (0.003920431714504957, 0.8837438821792603, 0.46795451641082764, 0), (0.01720331981778145, -0.46794843673706055, 0.8835883140563965, 0), (0, 7.626015663146973, 0, 1) ), ( (-0.9960817098617554, 0.0018203072249889374, -0.0884195864200592, 0), (0.08228030800819397, -0.3474714756011963, -0.9340736865997314, 0), (-0.03242357447743416, -0.9376888275146484, 0.3459600806236267, 0), (-10.074614524841309, 2.1485595703125, 0.482464075088501, 1) )]
                uniform token controlRig:upAxis = "Z"
            }
        }
    }
}