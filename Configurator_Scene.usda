#usda 1.0
(
    customLayerData = {
        dictionary audio2faceSettings = {
            int export_fps = 60
        }
        dictionary audioSettings = {
            double dopplerLimit = 2
            double dopplerScale = 1
            double nonSpatialTimeScale = 1
            double spatialTimeScale = 1
            double speedOfSound = 340
        }
        dictionary cameraSettings = {
            dictionary Front = {
                double3 position = (0, 0, 50847.77357657052)
                double radius = 500
            }
            dictionary Perspective = {
                double3 position = (-9.41660048428767, 158.29900000000433, 373.8330005692238)
                double3 target = (-9.478329998215223, 119.58017054160533, 1.718129943644783)
            }
            dictionary Right = {
                double3 position = (-50591.31202474496, 0, -1.1233527891173481e-11)
                double radius = 500
            }
            dictionary Top = {
                double3 position = (-4.368788867939017e-12, 50450.46843290329, 1.1202254331466774e-11)
                double radius = 500
            }
            string boundCamera = "/OmniverseKit_Persp"
        }
        dictionary omni_layer = {
            string authoring_layer = "./Configurator_Scene.usda"
            dictionary muteness = {
            }
        }
        dictionary renderSettings = {
            int "rtx:ambientOcclusion:maxSamples" = 2
            int "rtx:ambientOcclusion:minSamples" = 2
            float3 "rtx:debugView:pixelDebug:textColor" = (0, 1e18, 0)
            bool "rtx:directLighting:domeLight:enabled" = 0
            int "rtx:directLighting:domeLight:sampleCount" = 1
            bool "rtx:directLighting:sampledLighting:autoEnable" = 0
            int "rtx:directLighting:sampledLighting:autoEnableLightCountThreshold" = 2
            float3 "rtx:fog:fogColor" = (0.75, 0.75, 0.75)
            float3 "rtx:index:regionOfInterestMax" = (0, 0, 0)
            float3 "rtx:index:regionOfInterestMin" = (0, 0, 0)
            bool "rtx:indirectDiffuse:enabled" = 0
            float3 "rtx:iray:environment_dome_ground_position" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_ground_reflectivity" = (0, 0, 0)
            float3 "rtx:iray:environment_dome_rotation_axis" = (3.4028235e38, 3.4028235e38, 3.4028235e38)
            bool "rtx:matteObject:enabled" = 0
            double "rtx:post:aa:sharpness" = 0.4999999888241291
            float3 "rtx:post:backgroundZeroAlpha:backgroundDefaultColor" = (0, 0, 0)
            float3 "rtx:post:colorcorr:contrast" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gain" = (1, 1, 1)
            float3 "rtx:post:colorcorr:gamma" = (1, 1, 1)
            float3 "rtx:post:colorcorr:offset" = (0, 0, 0)
            float3 "rtx:post:colorcorr:saturation" = (1, 1, 1)
            float3 "rtx:post:colorgrad:blackpoint" = (0, 0, 0)
            float3 "rtx:post:colorgrad:contrast" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gain" = (1, 1, 1)
            float3 "rtx:post:colorgrad:gamma" = (1, 1, 1)
            float3 "rtx:post:colorgrad:lift" = (0, 0, 0)
            float3 "rtx:post:colorgrad:multiply" = (1, 1, 1)
            float3 "rtx:post:colorgrad:offset" = (0, 0, 0)
            float3 "rtx:post:colorgrad:whitepoint" = (1, 1, 1)
            int "rtx:post:dlss:execMode" = 0
            double "rtx:post:dof:fNumber" = 1.5
            double "rtx:post:dof:focalLength" = 24
            double "rtx:post:dof:subjectDistance" = 348.3999938964844
            float3 "rtx:post:lensDistortion:lensFocalLengthArray" = (10, 30, 50)
            float3 "rtx:post:lensFlares:anisoFlareFalloffX" = (450, 475, 500)
            float3 "rtx:post:lensFlares:anisoFlareFalloffY" = (10, 10, 10)
            float3 "rtx:post:lensFlares:cutoffPoint" = (2, 2, 2)
            float3 "rtx:post:lensFlares:haloFlareFalloff" = (10, 10, 10)
            float3 "rtx:post:lensFlares:haloFlareRadius" = (75, 75, 75)
            float3 "rtx:post:lensFlares:isotropicFlareFalloff" = (50, 50, 50)
            float3 "rtx:post:tonemap:whitepoint" = (1, 1, 1)
            float3 "rtx:raytracing:indexdirect:svoBrickSize" = (32, 32, 32)
            float3 "rtx:raytracing:inscattering:singleScatteringAlbedo" = (0.9, 0.9, 0.9)
            float3 "rtx:raytracing:inscattering:transmittanceColor" = (0.5, 0.5, 0.5)
            bool "rtx:raytracing:subsurface:enabled" = 1
            int "rtx:raytracing:subsurface:maxSamplePerFrame" = 64
            bool "rtx:raytracing:subsurface:transmission:enabled" = 0
            int "rtx:realtime:mgpu:tileOverlap" = 24
            double "rtx:reflections:maxRoughness" = 0.09999999776482582
            float3 "rtx:sceneDb:ambientLightColor" = (0.1, 0.1, 0.1)
        }
    }
    defaultPrim = "World"
    endTimeCode = 788
    metersPerUnit = 0.01
    subLayers = [
        @./Animations/AnimGraph_Overwrite.usda@
    ]
    timeCodesPerSecond = 30
    upAxis = "Y"
)

def Xform "World" (
    variants = {
        string avatarVariant = "avatar4"
        string sceneVariant = "scene1"
    }
    prepend variantSets = ["sceneVariant", "avatarVariant"]
)
{
    def Scope "transfer_data"
    {
    }

    def Camera "camera_start" (
        hide_in_stage_window = false
        kind = "model"
        no_delete = false
    )
    {
        float2 clippingRange = (10, 10000)
        float focalLength = 35
        float focusDistance = 369.7
        float fStop = 1.5
        float horizontalAperture = 20.955
        float horizontalApertureOffset = 0
        bool omni:kit:cameraLock = 1
        custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -406.0767884037098)
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        custom string userProperties:blenderName:data = "Camera"
        float verticalAperture = 15.2908
        float verticalApertureOffset = 0
        token visibility = "invisible"
        float3 xformOp:rotateXYZ = (-5.9402924, 0.009506203, 0.00002060469)
        float3 xformOp:scale = (1, 0.9999997, 0.99999875)
        double3 xformOp:translate = (-9.41660048428767, 158.29900000000433, 373.8330005692238)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def Camera "camera_end" (
        hide_in_stage_window = false
        kind = "model"
        no_delete = false
    )
    {
        float2 clippingRange = (10, 10000)
        float focalLength = 35
        float focusDistance = 263.6
        float fStop = 1.5
        float horizontalAperture = 20.955
        float horizontalApertureOffset = 0
        bool omni:kit:cameraLock = 1
        custom uniform vector3d omni:kit:centerOfInterest = (0, 0, -274.541314997627)
        token projection = "perspective"
        double shutter:close = 0.25
        double shutter:open = -0.25
        custom string userProperties:blenderName:data = "Camera"
        float verticalAperture = 15.2908
        float verticalApertureOffset = 0
        token visibility = "invisible"
        float3 xformOp:rotateXYZ = (-5.9402924, 0.009506203, 0.00002060489)
        float3 xformOp:scale = (1, 0.9999997, 0.99999875)
        double3 xformOp:translate = (-4.8353004842877745, 156.02299999999997, 276.27700056922436)
        uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
    }

    def "Animations" (
        prepend apiSchemas = ["OmniScriptingAPI"]
        instanceable = false
        prepend payload = @./Animations.usda@
    )
    {
        uniform asset[] omni:scripting:scripts = [@./Scripts/animation_graph_builder_behavior_script.py@] (
            customData = {
                dictionary fileExts = {
                    string "*.py" = "Python File"
                }
            }
        )

        over "Rig_Retarget"
        {
            over "character" (
                prepend apiSchemas = ["AnimationGraphAPI"]
            )
            {
                custom float anim:graph:variable:AutoBlink
                custom float anim:graph:variable:AutoEyeDart
                custom float anim:graph:variable:BlendShapeStrength
                custom float[] anim:graph:variable:BlendShapeWeights
                custom string anim:graph:variable:Blink
                custom float anim:graph:variable:BlinkingStrength
                custom string anim:graph:variable:Command
                custom string anim:graph:variable:CustomAnimation
                custom float3 anim:graph:variable:Eye_LookAt_Target
                custom float anim:graph:variable:Eye_LookAt_Weight
                custom string anim:graph:variable:gesture_state (
                    customData = {
                        string default = "none"
                    }
                )
                custom string anim:graph:variable:IdleType
                custom string anim:graph:variable:IdleVariant
                custom float3[] anim:graph:variable:JointPositions
                custom float4[] anim:graph:variable:JointRotations
                custom string anim:graph:variable:ListeningVariant
                custom float3 anim:graph:variable:LookAt_Goal
                custom float3 anim:graph:variable:LookAt_Target
                custom float anim:graph:variable:LookAt_Weight
                custom string anim:graph:variable:posture_state (
                    customData = {
                        string default = "none"
                    }
                )
                custom float3 anim:graph:variable:RootPositionDisplacement
                custom float4 anim:graph:variable:RootRotationDisplacement
                custom string anim:graph:variable:state
                custom string anim:graph:variable:StopCustomAnimation
                custom string anim:graph:variable:Subvariant
                custom float anim:graph:variable:SubvariantFloat
                custom string anim:graph:variable:TalkingVariant
                custom string anim:graph:variable:ThinkingVariant
                custom string anim:graph:variable:variant_state (
                    customData = {
                        string default = "none"
                    }
                )
                rel animationGraph = </World/AnimationGraph>
                custom rel inputs:pose
            }
        }
    }

    def AnimationGraph "AnimationGraph"
    {
        custom float anim:graph:variable:BlendShapeStrength = 1
        custom float[] anim:graph:variable:BlendShapeWeights = []
        custom float anim:graph:variable:BlinkingStrength = 1
        custom string anim:graph:variable:gesture_state = "none"
        custom float3[] anim:graph:variable:JointPositions = [(0, 1, 2), (0, 1, 2)]
        custom float4[] anim:graph:variable:JointRotations = [(0, 1, 2, 3), (0, 1, 2, 3)]
        custom string anim:graph:variable:posture_state = "none"
        custom float3 anim:graph:variable:RootPositionDisplacement = (0, 1, 2)
        custom float4 anim:graph:variable:RootRotationDisplacement = (0, 1, 2, 3)
        custom string anim:graph:variable:variant_state = "none"
        rel inputs:pose
        rel skel:skeleton = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT>
        custom uniform float2 ui:position = (527.56494, 296.90765)

        over "Read_JointPositions"
        {
            token inputs:variableName
        }

        over "Read_JointRotations"
        {
            token inputs:variableName
        }

        over "Read_RootPositionDisplacement"
        {
            token inputs:variableName
        }

        over "Read_RootRotationDisplacement"
        {
            token inputs:variableName
        }

        over "Read_BlendShapeWeights"
        {
            token inputs:variableName
        }

        over "Read_BlinkingStrength"
        {
            token inputs:variableName
        }

        over "Read_BlendShapeStrength"
        {
            token inputs:variableName
        }

        over "Blend"
        {
            rel inputs:pose0 = </World/AnimationGraph/MainStateMachine>
        }

        def StateMachine "MainStateMachine"
        {
            rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
            custom float2 ui:position = (-159.86295, -150.91792)

            def State "GesturesMainState"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine>
                custom float2 ui:position = (-11.669072, 261.04877)

                def StateMachine "GesturesStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                    custom float2 ui:position = (-285.6506, 134.04817)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-296.39606, -57.083874)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Tests/Test_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (158.52435, -32.352528)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-42.306644, -148.0699)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Tests/Test_4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-14.942617, -163.0443)
                        }
                    }

                    def State "Goodbye"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye/AnimationClip>
                        custom float2 ui:position = (-129.88722, 91.976135)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Goodbye>
                            bool inputs:loop = 0
                            custom float2 ui:position = (59.668232, 257.7273)
                        }
                    }

                    def Transition "Transition_Start_Goodbye"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Goodbye/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "goodbye"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Goodbye_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Goodbye_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "goodbye"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Goodbye_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Goodbye_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Goodbye>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Welcome"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome/AnimationClip>
                        custom float2 ui:position = (281.32144, 13.428116)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Welcome>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-247.4661, -120.05814)
                        }
                    }

                    def Transition "Transition_Start_Welcome"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Welcome/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "welcome"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Welcome_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Welcome_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "welcome"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Welcome_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Welcome_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Welcome>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Attraction_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1/AnimationClip>
                        custom float2 ui:position = (10.682938, 103.897736)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Attraction_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (267.71835, -206.93555)
                        }
                    }

                    def Transition "Transition_Start_Attraction_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Attraction_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "attraction_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Attraction_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Attraction_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "attraction_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Attraction_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Attraction_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Attraction_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2/AnimationClip>
                        custom float2 ui:position = (-277.98917, 222.02141)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Attraction_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (183.09862, 159.44896)
                        }
                    }

                    def Transition "Transition_Start_Attraction_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Attraction_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "attraction_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Attraction_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Attraction_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "attraction_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Attraction_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Attraction_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Attraction_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Bowing_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1/AnimationClip>
                        custom float2 ui:position = (-18.839539, 106.66842)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Bowing_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-53.118465, -184.76901)
                        }
                    }

                    def Transition "Transition_Start_Bowing_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Bowing_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "bowing_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Bowing_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Bowing_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "bowing_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Bowing_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Bowing_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Bowing_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2/AnimationClip>
                        custom float2 ui:position = (-65.46374, 172.22795)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Bowing_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (181.11337, 276.6807)
                        }
                    }

                    def Transition "Transition_Start_Bowing_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Bowing_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "bowing_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Bowing_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Bowing_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "bowing_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Bowing_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Bowing_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Bowing_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Come_Here_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1/AnimationClip>
                        custom float2 ui:position = (232.60028, 109.250725)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Come_Here_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (12.547214, 134.35622)
                        }
                    }

                    def Transition "Transition_Start_Come_Here_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Come_Here_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "come_here_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Come_Here_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Come_Here_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "come_here_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Come_Here_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Come_Here_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Come_Here_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Dont_Understand_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1/AnimationClip>
                        custom float2 ui:position = (-190.07785, 253.85072)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Dont_Understand_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (127.545944, 56.691334)
                        }
                    }

                    def Transition "Transition_Start_Dont_Understand_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Dont_Understand_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "dont_understand_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Dont_Understand_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Dont_Understand_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "dont_understand_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Dont_Understand_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Dont_Understand_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Dont_Understand_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Driving_Mime"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime/AnimationClip>
                        custom float2 ui:position = (-39.57497, 80.124954)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Driving_Mime>
                            bool inputs:loop = 0
                            custom float2 ui:position = (70.60724, 239.31247)
                        }
                    }

                    def Transition "Transition_Start_Driving_Mime"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Driving_Mime/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "driving_mime"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Driving_Mime_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Driving_Mime_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "driving_mime"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Driving_Mime_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Driving_Mime_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Driving_Mime>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Exhausted"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted/AnimationClip>
                        custom float2 ui:position = (42.441788, -171.97371)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Exhausted>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-35.172382, -154.21889)
                        }
                    }

                    def Transition "Transition_Start_Exhausted"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Exhausted/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "exhausted"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Exhausted_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Exhausted_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "exhausted"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Exhausted_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Exhausted_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Exhausted>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Fistbump_Offer"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer/AnimationClip>
                        custom float2 ui:position = (242.97011, 206.1155)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Fistbump_Offer>
                            bool inputs:loop = 0
                            custom float2 ui:position = (33.49147, -182.16505)
                        }
                    }

                    def Transition "Transition_Start_Fistbump_Offer"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Fistbump_Offer/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "fistbump_offer"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Fistbump_Offer_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Fistbump_Offer_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "fistbump_offer"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Fistbump_Offer_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Fistbump_Offer_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Fistbump_Offer>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "No_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1/AnimationClip>
                        custom float2 ui:position = (-273.8748, -219.49832)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/No_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-34.06843, 104.522446)
                        }
                    }

                    def Transition "Transition_Start_No_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_No_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "no_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_No_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_No_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "no_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_No_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_No_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/No_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Nodding_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1/AnimationClip>
                        custom float2 ui:position = (-165.60114, 110.71221)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Nodding_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (217.16963, 154.34465)
                        }
                    }

                    def Transition "Transition_Start_Nodding_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Nodding_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "nodding_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Nodding_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Nodding_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "nodding_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Nodding_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Nodding_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Nodding_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Open_Question_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1/AnimationClip>
                        custom float2 ui:position = (-44.683514, 87.436745)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Open_Question_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (293.02045, 231.24696)
                        }
                    }

                    def Transition "Transition_Start_Open_Question_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Open_Question_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "open_question_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Open_Question_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Open_Question_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "open_question_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Open_Question_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Open_Question_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Open_Question_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Personal_Statement_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1/AnimationClip>
                        custom float2 ui:position = (-97.1103, 111.268234)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Personal_Statement_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-202.07323, 34.42108)
                        }
                    }

                    def Transition "Transition_Start_Personal_Statement_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Personal_Statement_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "personal_statement_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Personal_Statement_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Personal_Statement_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "personal_statement_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Personal_Statement_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Personal_Statement_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Personal_Statement_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2/AnimationClip>
                        custom float2 ui:position = (-86.07962, -37.11221)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Personal_Statement_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-36.660686, 97.939766)
                        }
                    }

                    def Transition "Transition_Start_Personal_Statement_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Personal_Statement_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "personal_statement_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Personal_Statement_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Personal_Statement_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "personal_statement_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Personal_Statement_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Personal_Statement_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Personal_Statement_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Phone_Dialing"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing/AnimationClip>
                        custom float2 ui:position = (207.59761, -18.856895)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Phone_Dialing>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-212.04913, 152.49257)
                        }
                    }

                    def Transition "Transition_Start_Phone_Dialing"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Phone_Dialing/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "phone_dialing"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Phone_Dialing_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Phone_Dialing_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "phone_dialing"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Phone_Dialing_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Phone_Dialing_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Phone_Dialing>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Please_Repeat_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1/AnimationClip>
                        custom float2 ui:position = (150.98581, 272.30713)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Please_Repeat_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-63.566395, -21.672594)
                        }
                    }

                    def Transition "Transition_Start_Please_Repeat_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Please_Repeat_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "please_repeat_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Please_Repeat_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Please_Repeat_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "please_repeat_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Please_Repeat_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Please_Repeat_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Please_Repeat_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2/AnimationClip>
                        custom float2 ui:position = (24.357445, 235.27403)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Please_Repeat_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (122.52991, -287.23312)
                        }
                    }

                    def Transition "Transition_Start_Please_Repeat_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Please_Repeat_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "please_repeat_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Please_Repeat_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Please_Repeat_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "please_repeat_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Please_Repeat_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Please_Repeat_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Please_Repeat_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Backward_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1/AnimationClip>
                        custom float2 ui:position = (-175.60638, 212.33691)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Backward_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (51.28429, 224.34508)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Backward_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Backward_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_backward_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Backward_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Backward_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_backward_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Backward_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Backward_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Backward_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Down_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1/AnimationClip>
                        custom float2 ui:position = (-53.16052, -173.71927)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Down_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-297.51556, 297.63058)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Down_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Down_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_down_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Down_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Down_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_down_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Down_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Down_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Down_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2/AnimationClip>
                        custom float2 ui:position = (-218.17108, 85.78126)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Down_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-6.174654, -71.91036)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Down_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Down_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_down_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Down_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Down_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_down_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Down_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Down_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Down_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Left_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1/AnimationClip>
                        custom float2 ui:position = (22.321291, -253.02986)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Left_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (282.0205, -4.3578353)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Left_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Left_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_left_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Left_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Left_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_left_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Left_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Left_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_Left_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2/AnimationClip>
                        custom float2 ui:position = (-290.8263, -48.39394)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_Left_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (154.32114, -112.7498)
                        }
                    }

                    def Transition "Transition_Start_Pointing_Left_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_Left_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_left_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Left_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Left_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_left_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_Left_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_Left_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_Left_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_To_Self_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1/AnimationClip>
                        custom float2 ui:position = (147.01344, 160.41763)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_To_Self_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-156.52757, 280.78348)
                        }
                    }

                    def Transition "Transition_Start_Pointing_To_Self_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_To_Self_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_to_self_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_Self_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_Self_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_to_self_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_Self_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_Self_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_Self_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_To_User_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1/AnimationClip>
                        custom float2 ui:position = (-283.26675, 218.16328)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_To_User_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (7.589473, -207.9723)
                        }
                    }

                    def Transition "Transition_Start_Pointing_To_User_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_To_User_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_to_user_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_User_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_User_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_to_user_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_User_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_User_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pointing_To_User_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2/AnimationClip>
                        custom float2 ui:position = (-144.96423, 56.110374)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pointing_To_User_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-132.9257, 203.05264)
                        }
                    }

                    def Transition "Transition_Start_Pointing_To_User_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pointing_To_User_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pointing_to_user_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_User_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_User_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pointing_to_user_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pointing_To_User_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pointing_To_User_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pointing_To_User_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Presenting_Options_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1/AnimationClip>
                        custom float2 ui:position = (-168.2829, -69.563225)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Presenting_Options_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (4.0879006, -96.13622)
                        }
                    }

                    def Transition "Transition_Start_Presenting_Options_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Presenting_Options_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "presenting_options_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Presenting_Options_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Presenting_Options_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "presenting_options_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Presenting_Options_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Presenting_Options_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Presenting_Options_2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2/AnimationClip>
                        custom float2 ui:position = (194.48569, -141.67068)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Presenting_Options_2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-246.6137, -207.12889)
                        }
                    }

                    def Transition "Transition_Start_Presenting_Options_2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Presenting_Options_2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "presenting_options_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Presenting_Options_2_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Presenting_Options_2_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "presenting_options_2"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Presenting_Options_2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Presenting_Options_2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Presenting_Options_2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Pulling_Mime"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime/AnimationClip>
                        custom float2 ui:position = (76.167274, 38.13759)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Pulling_Mime>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-262.021, 295.8295)
                        }
                    }

                    def Transition "Transition_Start_Pulling_Mime"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Pulling_Mime/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "pulling_mime"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pulling_Mime_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pulling_Mime_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "pulling_mime"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Pulling_Mime_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Pulling_Mime_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Pulling_Mime>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Raise_Both_Arms"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms/AnimationClip>
                        custom float2 ui:position = (-12.33562, -108.33768)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Raise_Both_Arms>
                            bool inputs:loop = 0
                            custom float2 ui:position = (137.49744, -285.4249)
                        }
                    }

                    def Transition "Transition_Start_Raise_Both_Arms"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Raise_Both_Arms/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "raise_both_arms"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Raise_Both_Arms_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Raise_Both_Arms_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "raise_both_arms"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Raise_Both_Arms_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Raise_Both_Arms_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Raise_Both_Arms>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Stupid_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1/AnimationClip>
                        custom float2 ui:position = (-39.450512, 98.6483)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Stupid_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (277.28174, 156.98267)
                        }
                    }

                    def Transition "Transition_Start_Stupid_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Stupid_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "stupid_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Stupid_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Stupid_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "stupid_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Stupid_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Stupid_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Stupid_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Success_1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1/AnimationClip>
                        custom float2 ui:position = (231.09552, -228.65645)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Success_1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-42.137638, -280.92575)
                        }
                    }

                    def Transition "Transition_Start_Success_1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Success_1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "success_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Success_1_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Success_1_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "success_1"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Success_1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Success_1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Success_1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Tell_Secret"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret/AnimationClip>
                        custom float2 ui:position = (-136.80348, -69.42188)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Tell_Secret>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-93.70735, -75.75552)
                        }
                    }

                    def Transition "Transition_Start_Tell_Secret"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Tell_Secret/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "tell_secret"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Tell_Secret_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Tell_Secret_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "tell_secret"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Tell_Secret_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Tell_Secret_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Tell_Secret>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "The_Robot"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot/AnimationClip>
                        custom float2 ui:position = (181.848, -186.27382)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/The_Robot>
                            bool inputs:loop = 0
                            custom float2 ui:position = (194.69737, 25.152653)
                        }
                    }

                    def Transition "Transition_Start_The_Robot"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_The_Robot/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "the_robot"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_The_Robot_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_The_Robot_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "the_robot"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_The_Robot_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_The_Robot_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/The_Robot>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Toss"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss/AnimationClip>
                        custom float2 ui:position = (-96.75292, 31.341461)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Toss>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-203.146, -2.7271502)
                        }
                    }

                    def Transition "Transition_Start_Toss"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Toss/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "toss"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Toss_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Toss_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "toss"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Toss_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Toss_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Toss>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def State "Trying_To_See"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See/AnimationClip>
                        custom float2 ui:position = (-286.82803, 217.78505)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Gestures/Trying_To_See>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-101.05138, -93.574234)
                        }
                    }

                    def Transition "Transition_Start_Trying_To_See"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_Trying_To_See/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "trying_to_see"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Trying_To_See_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Trying_To_See_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "!="
                            custom string inputs:value = "trying_to_see"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Trying_To_See_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Trying_To_See_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Trying_To_See>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "gesture_state"
                        }
                    }

                    def Transition "Transition_Start_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Transition_Start_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState/GesturesStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }
                }
            }

            def State "PostureMainState_Idle"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine>
                custom float2 ui:position = (297.0912, 68.07344)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>
                    custom float2 ui:position = (-49.407784, 174.39403)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-259.40118, 42.30252)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (12.420577, 216.73691)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (51.720207, -8.836551)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (12.135515, 169.13838)
                        }
                    }

                    def State "Idle_Loop"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle_Loop/AnimationClip>
                        custom float2 ui:position = (-91.60752, 34.67365)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (124.434166, 297.33328)
                        }
                    }

                    def State "Idle1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle1/AnimationClip>
                        custom float2 ui:position = (116.21052, 277.1227)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-60.580402, 65.26859)
                        }
                    }

                    def State "Idle2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle2/AnimationClip>
                        custom float2 ui:position = (147.17691, -90.95043)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-138.49504, 283.69986)
                        }
                    }

                    def State "Idle3"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle3/AnimationClip>
                        custom float2 ui:position = (-90.879616, 299.94162)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle3>
                            bool inputs:loop = 0
                            custom float2 ui:position = (211.3626, -170.35913)
                        }
                    }

                    def State "Idle4"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle4/AnimationClip>
                        custom float2 ui:position = (196.93153, 290.17627)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Idle/Idle4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-133.90787, 98.672646)
                        }
                    }

                    def Transition "Transition_Start_Idle_Loop"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle_Loop/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle_Loop>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle_Loop_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle_Loop_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle_Loop>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "2"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle3"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle3/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle3>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "3"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle3_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle3_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle3>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Idle4"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Start_Idle4/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle4>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "4"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle4_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_Idle4_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Idle4>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Head_Idle"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine>
                custom float2 ui:position = (161.75354, -250.0308)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End>
                    custom float2 ui:position = (191.59908, -114.98356)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (123.82908, 270.08295)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Head_Idle/Idle_FaceMotion>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-278.9346, 67.027725)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-124.55722, -231.20473)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Head_Idle/Idle_FaceMotion>
                            bool inputs:loop = 0
                            custom float2 ui:position = (127.112885, 287.42795)
                        }
                    }

                    def State "Idle_FaceMotion"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Idle_FaceMotion/AnimationClip>
                        custom float2 ui:position = (7.6263003, -92.193474)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Head_Idle/Idle_FaceMotion>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-30.546244, -51.22927)
                        }
                    }

                    def Transition "Transition_Start_Idle_FaceMotion"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Transition_Start_Idle_FaceMotion/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Idle_FaceMotion>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Idle_FaceMotion_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Transition_Idle_FaceMotion_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Idle_FaceMotion>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Listening"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine>
                custom float2 ui:position = (19.141146, -54.4945)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>
                    custom float2 ui:position = (-251.77652, 287.65665)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (298.02435, -195.51927)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-155.37602, -37.826225)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (119.23976, -281.19302)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (201.29852, 83.06002)
                        }
                    }

                    def State "Listening_Loop"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening_Loop/AnimationClip>
                        custom float2 ui:position = (-138.42386, 222.52032)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (96.725525, -109.84543)
                        }
                    }

                    def State "Listening1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening1/AnimationClip>
                        custom float2 ui:position = (28.707596, 287.54254)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-270.94022, 125.07721)
                        }
                    }

                    def State "Listening2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening2/AnimationClip>
                        custom float2 ui:position = (209.64816, 115.39011)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-215.98895, 58.28976)
                        }
                    }

                    def State "Listening3"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening3/AnimationClip>
                        custom float2 ui:position = (171.57315, -48.842453)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening3>
                            bool inputs:loop = 0
                            custom float2 ui:position = (49.456966, -147.91922)
                        }
                    }

                    def State "Listening4"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening4/AnimationClip>
                        custom float2 ui:position = (-112.35087, 185.14209)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Listening/Listening4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-6.3011174, -30.712957)
                        }
                    }

                    def Transition "Transition_Start_Listening_Loop"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening_Loop/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening_Loop>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening_Loop_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening_Loop_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening_Loop>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "2"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening3"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening3/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening3>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "3"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening3_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening3_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening3>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Listening4"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Start_Listening4/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening4>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "4"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Listening4_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_Listening4_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Listening4>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Talking"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine>
                custom float2 ui:position = (-226.2697, -75.31746)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>
                    custom float2 ui:position = (12.432633, -161.3926)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (184.76134, -69.77958)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-156.90613, -115.02151)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (194.67812, 242.48608)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (276.1787, -290.88354)
                        }
                    }

                    def State "Talking_Loop"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking_Loop/AnimationClip>
                        custom float2 ui:position = (152.33647, 15.2904215)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking_Loop>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-225.26395, -152.07985)
                        }
                    }

                    def State "Talking1"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking1/AnimationClip>
                        custom float2 ui:position = (-130.9855, -57.469986)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking1>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-17.567236, 262.0733)
                        }
                    }

                    def State "Talking2"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking2/AnimationClip>
                        custom float2 ui:position = (-264.98697, 125.50158)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking2>
                            bool inputs:loop = 0
                            custom float2 ui:position = (212.46365, -85.62005)
                        }
                    }

                    def State "Talking3"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking3/AnimationClip>
                        custom float2 ui:position = (-150.46968, -167.2149)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking3>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-119.49649, -212.82121)
                        }
                    }

                    def State "Talking4"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking4/AnimationClip>
                        custom float2 ui:position = (31.006792, -149.7603)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Talking/Talking4>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-283.64908, -160.41994)
                        }
                    }

                    def Transition "Transition_Start_Talking_Loop"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking_Loop/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking_Loop>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking_Loop_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking_Loop_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking_Loop>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking1"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking1/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking1>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking1_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking1_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking1>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking2"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking2/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking2>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "2"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking2_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking2_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking2>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking3"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking3/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking3>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "3"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking3_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking3_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking3>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Talking4"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Start_Talking4/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking4>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "4"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Talking4_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_Talking4_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Talking4>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Attentive"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine>
                custom float2 ui:position = (192.37926, -49.577866)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>
                    custom float2 ui:position = (230.12175, 266.16937)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-153.991, 35.98347)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Active>
                            bool inputs:loop = 0
                            custom float2 ui:position = (228.64015, 48.852203)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-199.19983, -151.22806)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Active>
                            bool inputs:loop = 0
                            custom float2 ui:position = (292.5749, -120.36788)
                        }
                    }

                    def State "Attentive_Active"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Active/AnimationClip>
                        custom float2 ui:position = (220.6218, 177.0074)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Active>
                            bool inputs:loop = 0
                            custom float2 ui:position = (145.19083, 133.16536)
                        }
                    }

                    def State "Attentive_Neutral"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Neutral/AnimationClip>
                        custom float2 ui:position = (173.98912, 208.44461)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Attentive/Attentive_Neutral>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-262.58014, -199.3141)
                        }
                    }

                    def Transition "Transition_Start_Attentive_Active"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Start_Attentive_Active/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Active>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Attentive_Active_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Attentive_Active_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Active>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_Start_Attentive_Neutral"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Start_Attentive_Neutral/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Neutral>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "1"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Attentive_Neutral_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_Attentive_Neutral_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Attentive_Neutral>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Thinking"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine>
                custom float2 ui:position = (3.3175948, -172.50629)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End>
                    custom float2 ui:position = (19.930813, -4.090596)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-223.93713, -248.42331)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Thinking/Thinking>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-293.00833, 195.02168)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-250.955, 276.9392)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Thinking/Thinking>
                            bool inputs:loop = 0
                            custom float2 ui:position = (290.2991, 147.41786)
                        }
                    }

                    def State "Thinking"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Thinking/AnimationClip>
                        custom float2 ui:position = (-29.770031, -134.52692)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Thinking/Thinking>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-52.528545, -92.82404)
                        }
                    }

                    def Transition "Transition_Start_Thinking"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Transition_Start_Thinking/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Thinking>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Thinking_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Transition_Thinking_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Thinking>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Debug_LeftRight"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine>
                custom float2 ui:position = (-62.222916, 135.71747)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/End>
                    custom float2 ui:position = (235.51573, -205.37099)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-154.39766, -174.06186)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_LeftRight/Head_LeftRight_60d_YAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-272.79242, 212.52036)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (6.765326, -259.77914)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_LeftRight/Head_LeftRight_60d_YAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-32.246845, -29.633524)
                        }
                    }

                    def State "Head_LeftRight_60d_YAxis"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Head_LeftRight_60d_YAxis/AnimationClip>
                        custom float2 ui:position = (166.77357, 156.83847)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_LeftRight/Head_LeftRight_60d_YAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-219.30661, 76.12537)
                        }
                    }

                    def Transition "Transition_Start_Head_LeftRight_60d_YAxis"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Transition_Start_Head_LeftRight_60d_YAxis/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Head_LeftRight_60d_YAxis>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Head_LeftRight_60d_YAxis_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Transition_Head_LeftRight_60d_YAxis_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Head_LeftRight_60d_YAxis>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Debug_UpDown"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine>
                custom float2 ui:position = (5.811776, -291.90494)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/End>
                    custom float2 ui:position = (-211.3585, 100.109055)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-79.784515, 278.21124)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_UpDown/Head_UpDown_30d_XAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (1.0502174, 112.9699)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (-219.82942, -12.330925)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_UpDown/Head_UpDown_30d_XAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (140.47289, 200.089)
                        }
                    }

                    def State "Head_UpDown_30d_XAxis"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Head_UpDown_30d_XAxis/AnimationClip>
                        custom float2 ui:position = (-180.23555, -61.85597)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_UpDown/Head_UpDown_30d_XAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-15.883795, -35.776566)
                        }
                    }

                    def Transition "Transition_Start_Head_UpDown_30d_XAxis"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Transition_Start_Head_UpDown_30d_XAxis/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Head_UpDown_30d_XAxis>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Head_UpDown_30d_XAxis_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Transition_Head_UpDown_30d_XAxis_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Head_UpDown_30d_XAxis>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def State "PostureMainState_Debug_Tilt"
            {
                rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine>
                custom float2 ui:position = (-14.734998, -122.45986)

                def StateMachine "VariantStateMachine"
                {
                    rel inputs:startState = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/End>
                    custom float2 ui:position = (185.23245, 247.84677)

                    def State "Start"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Start/AnimationClip>
                        custom float2 ui:position = (-90.59956, 82.71604)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_Tilt/Head_Tilt_LeftRight_30d_ZAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-71.57645, 47.251194)
                        }
                    }

                    def State "End"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/End/AnimationClip>
                        custom float2 ui:position = (117.323364, 0.9097664)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_Tilt/Head_Tilt_LeftRight_30d_ZAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (104.749245, 154.28745)
                        }
                    }

                    def State "Head_Tilt_LeftRight_30d_ZAxis"
                    {
                        rel inputs:pose = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Head_Tilt_LeftRight_30d_ZAxis/AnimationClip>
                        custom float2 ui:position = (205.97739, -186.71407)

                        def AnimationClip "AnimationClip"
                        {
                            rel inputs:animationSource = </World/Animations/Animations/Postures/Debug_Tilt/Head_Tilt_LeftRight_30d_ZAxis>
                            bool inputs:loop = 0
                            custom float2 ui:position = (-170.16907, 8.622811)
                        }
                    }

                    def Transition "Transition_Start_Head_Tilt_LeftRight_30d_ZAxis"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Transition_Start_Head_Tilt_LeftRight_30d_ZAxis/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Start>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Head_Tilt_LeftRight_30d_ZAxis>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "0"
                            token inputs:variableName = "variant_state"
                        }
                    }

                    def Transition "Transition_Head_Tilt_LeftRight_30d_ZAxis_End"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Transition_Head_Tilt_LeftRight_30d_ZAxis_End/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Head_Tilt_LeftRight_30d_ZAxis>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/End>

                        def ConditionTimeFractionCrossed "Condition"
                        {
                            float inputs:fraction = 0.95
                        }
                    }

                    def Transition "Transition_End_Start"
                    {
                        rel inputs:condition = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Transition_End_Start/Condition>
                        float inputs:durationTime = 0.7
                        rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/End>
                        rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt/VariantStateMachine/Start>

                        def ConditionCompareVariable "Condition"
                        {
                            token inputs:operator = "=="
                            custom string inputs:value = "none"
                            token inputs:variableName = "variant_state"
                        }
                    }
                }
            }

            def Transition "Transition_PostureMainState_Idle_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_GesturesMainState"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_GesturesMainState/Condition>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>

                def ConditionCompareVariable "Condition"
                {
                    token inputs:operator = "!="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }
            }

            def Transition "Transition_GesturesMainState_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/GesturesMainState>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_GesturesMainState_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Idle_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Idle_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Head_Idle_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Head_Idle_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Listening_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Listening_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Talking_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Talking_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Attentive_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Attentive_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Thinking_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Thinking_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_UpDown/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_LeftRight_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_Tilt"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_Tilt/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_tilt"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_Tilt/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_UpDown_PostureMainState_Debug_Tilt/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Head_Idle"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Head_Idle/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Head_Idle>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "head_idle"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Head_Idle/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Head_Idle/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Listening"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Listening/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Listening>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "listening"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Listening/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Listening/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Talking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Talking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Talking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "talking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Talking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Talking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Attentive"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Attentive/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Attentive>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "attentive"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Attentive/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Attentive/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Thinking"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Thinking/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Thinking>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "thinking"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Thinking/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Thinking/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_LeftRight"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_LeftRight/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_LeftRight>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_leftright"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_LeftRight/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_LeftRight/ConditionB>
                }
            }

            def Transition "Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_UpDown"
            {
                rel inputs:condition = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_UpDown/ConditionLogical>
                float inputs:durationTime = 0.7
                rel inputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_Tilt>
                rel outputs:state = </World/AnimationGraph/MainStateMachine/PostureMainState_Debug_UpDown>

                def ConditionCompareVariable "ConditionA"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "none"
                    token inputs:variableName = "gesture_state"
                }

                def ConditionCompareVariable "ConditionB"
                {
                    token inputs:operator = "=="
                    custom string inputs:value = "debug_updown"
                    token inputs:variableName = "posture_state"
                }

                def ConditionAND "ConditionLogical"
                {
                    rel inputs:condition0 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_UpDown/ConditionA>
                    rel inputs:condition1 = </World/AnimationGraph/MainStateMachine/Transition_PostureMainState_Debug_Tilt_PostureMainState_Debug_UpDown/ConditionB>
                }
            }
        }
    }
    variantSet "avatarVariant" = {
        "avatar1" {
            def "character" (
                instanceable = false
                prepend payload = @./Avatars/Ted/Ted_Configurable.usda@
            )
            {
                over "character"
                {
                    over "character"
                    {
                        over "ted_skeleton" (
                            prepend apiSchemas = ["SkelBindingAPI"]
                        )
                        {
                            rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                        }
                    }
                }
            }

        }
        "avatar2" {
            def "character" (
                instanceable = false
                prepend payload = @./Avatars/Violet/Violet_Configurable.usda@
            )
            {
                over "character"
                {
                    over "character"
                    {
                        over "violet_skeleton" (
                            prepend apiSchemas = ["SkelBindingAPI"]
                        )
                        {
                            rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                        }
                    }
                }
            }

        }
        "avatar3" {
            def "character" (
                instanceable = false
                prepend payload = @./Avatars/Emma/Emma_Configurable.usda@
            )
            {
                over "RectLight"
                {
                    token visibility = "invisible"
                }

                over "RectLight_01"
                {
                    token visibility = "invisible"
                }

                over "character"
                {
                    over "character"
                    {
                        over "emma_skeleton" (
                            prepend apiSchemas = ["SkelBindingAPI"]
                        )
                        {
                            rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                        }
                    }
                }
            }

        }
        "avatar4" {
            def "character" (
                instanceable = false
                prepend payload = @./Avatars/Ben/Ben_Configurable.usda@
            )
            {
                over "character"
                {
                    over "character"
                    {
                        over "ben_skeleton" (
                            prepend apiSchemas = ["SkelBindingAPI"]
                        )
                        {
                            rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                        }
                    }
                }
            }

        }
        "avatar5" {
            def "character" (
                instanceable = false
                prepend payload = @./Avatars/Ferret/Ferret_Configurable.usda@
            )
            {
                over "character"
                {
                    over "character"
                    {
                        over "Ferret_skeleton" (
                            prepend apiSchemas = ["SkelBindingAPI"]
                        )
                        {
                            rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                        }
                    }
                }
            }

        }
        "dummy" {
            def "character" (
                instanceable = false
                prepend payload = @./Avatars/Dummy/Dummy_Configurable.usda@
            )
            {
                over "character"
                {
                    over "character"
                    {
                        over "OUTPUT"
                        {
                            over "root_JNT"
                            {
                                over "root_JNT" (
                                    prepend apiSchemas = ["SkelBindingAPI"]
                                )
                                {
                                    rel skel:animationSource = </World/Animations/Rig_Retarget/character/OUTPUT/root_JNT/root_JNT/ACE_Animation_Target>
                                }
                            }
                        }
                    }
                }
            }

        }
    }
    variantSet "sceneVariant" = {
        "dummy" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/Dummy/DummyScene.usda@
            )
            {
            }

        }
        "scene1" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/Empty Scene/Scene_Empty.usda@
            )
            {
            }

        }
        "scene2" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/QSR/TokkioScene_QSR_Customizable.usda@
            )
            {
            }

        }
        "scene3" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/Datacenter/TokkioScene_Datacenter_Customizable.usda@
            )
            {
            }

        }
        "scene4" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/CustomizableOffice/Customizable_Office.usda@
            )
            {
            }

        }
        "scene5" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/Futuristic/FuturisticScene.usda@
            )
            {
            }

        }
        "scene6" {
            def "Scene" (
                instanceable = false
                prepend payload = @./Scenes/TechStore/TechStore_cheaper.usda@
            )
            {
                float3 xformOp:rotateXYZ = (0, -32.4, 0)
                float3 xformOp:scale = (1, 1, 1)
                double3 xformOp:translate = (-511, 0, 0)
                uniform token[] xformOpOrder = ["xformOp:translate", "xformOp:rotateXYZ", "xformOp:scale"]
            }

        }
    }
}

